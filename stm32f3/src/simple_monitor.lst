
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800bc28 l    d  .rodata	00000000 .rodata
0801b584 l    d  .ARM	00000000 .ARM
0801b58c l    d  .init_array	00000000 .init_array
0801b594 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000ac0 l    d  .bss	00000000 .bss
20001d1c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801c058 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800bbb4 l       .text	00000000 LoopCopyDataInit
0800bbac l       .text	00000000 CopyDataInit
0800bbc8 l       .text	00000000 LoopFillZerobss
0800bbc2 l       .text	00000000 FillZerobss
0800bbda l       .text	00000000 LoopForever
0800bbf4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800bc0c l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001e0 l     F .text	00000000 register_tm_clones
08000204 l     F .text	00000000 __do_global_dtors_aux
20000ac0 l       .bss	00000001 completed.7680
0801b594 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0800022c l     F .text	00000000 frame_dummy
20000ac4 l       .bss	00000018 object.7685
0801b590 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 build/lz_ka_asm.o
00000032 l       *ABS*	00000000 LOCATION
00000029 l       *ABS*	00000000 LSM303DLHC_OUT_X_H_A
0000002b l       *ABS*	00000000 LSM303DLHC_OUT_Y_H_A
080002cc l       .text	00000000 get_LED_index
080002f4 l       .text	00000000 Top
08000312 l       .text	00000000 Bottom
080002ee l       .text	00000000 W
080002e8 l       .text	00000000 E
08000330 l       .text	00000000 Lights
08000300 l       .text	00000000 NW
08000306 l       .text	00000000 NE
0800030c l       .text	00000000 N
0800031e l       .text	00000000 SW
08000324 l       .text	00000000 SE
0800032a l       .text	00000000 S
0800034e l       .text	00000000 c
08000354 l       .text	00000000 win
0800035a l       .text	00000000 counter
0800035e l       .text	00000000 blink_all_leds
080003a2 l       .text	00000000 busy_delay
080003a6 l       .text	00000000 delay_loop
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
08001fe4 l     F .text	0000006a __sbprintf
0800c1c4 l     O .rodata	00000010 blanks.8142
0800c1d4 l     O .rodata	00000010 zeroes.8143
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080021c0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080032c4 l     F .text	00000004 __fp_unlock
080032d4 l     F .text	000000f0 __sinit.part.1
080033c4 l     F .text	00000004 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
20000438 l     O .data	00000020 lc_ctype_charset
2000045c l     O .data	00000020 lc_message_charset
2000047c l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800c1e8 l     O .rodata	0000000c p05.6468
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 vfprintf.c
0800549c l     F .text	0000007e __sprint_r.part.0
08006148 l     F .text	0000006a __sbprintf
0800c310 l     O .rodata	00000010 blanks.8085
0800c320 l     O .rodata	00000010 zeroes.8086
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 lz_ka_hook.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000b10 l     O .bss	00000004 count.6975
20000b14 l     O .bss	00000004 saved.6976
200008cc l     O .data	00000004 buf.6977
200008d0 l     O .data	00000004 printPrompt.6978
0800c61d l     O .rodata	00000006 __FUNCTION__.6992
00000000 l    df *ABS*	00000000 dump.c
20000b18 l     O .bss	00000004 address.6416
200008d4 l     O .data	00000004 count.6417
00000000 l    df *ABS*	00000000 syscall.c
20000b1c l     O .bss	00000004 heap_end.7021
00000000 l    df *ABS*	00000000 terminal.c
080077f4 l     F .text	0000007c USBD_CDC_DataIn
20000b20 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
08007b44 l     F .text	00000078 Uncompress
20000c44 l     O .bss	00000014 buf.6964
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000c58 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
08009c34 l     F .text	0000002a I2C_TransferConfig
08009c5e l     F .text	00000096 I2C_IsAcknowledgeFailed
08009cf4 l     F .text	00000066 I2C_WaitOnFlagUntilTimeout
08009d5a l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
08009daa l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08009dfe l     F .text	00000062 I2C_RequestMemoryWrite
08009e60 l     F .text	00000060 I2C_RequestMemoryRead
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800a1f4 l     F .text	00000050 SPI_WaitFifoStateUntilTimeout.part.1
0800a1f4 l     F .text	00000050 SPI_WaitFlagStateUntilTimeout.part.0
0800a244 l     F .text	00000040 SPI_WaitFlagStateUntilTimeout
0800a284 l     F .text	00000050 SPI_WaitFifoStateUntilTimeout
0800a2d4 l     F .text	00000048 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
0800a880 l     F .text	00000016 USBD_CtlError.constprop.0
20000c5c l     O .bss	00000001 cfgidx.11292
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800ac4a l     F .text	00000012 USBD_CDC_DataIn
0800ac5c l     F .text	00000028 USBD_CDC_EP0_RxReady
0800ac84 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800ac90 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800ac9c l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800acb4 l     F .text	0000002e USBD_CDC_DataOut
0800ace2 l     F .text	0000003a USBD_CDC_DeInit
0800ad1c l     F .text	0000008c USBD_CDC_Init
0800ada8 l     F .text	00000056 USBD_CDC_Setup
2000099c l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000c60 l     O .bss	00000230 mem.11511
00000000 l    df *ABS*	00000000 usbd_desc.c
0800b0b4 l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800b18c l     F .text	00000004 CDC_Itf_DeInit
0800b190 l     F .text	0000001c CDC_Itf_Receive
0800b1ac l     F .text	00000018 CDC_Itf_Init
0800b1c4 l     F .text	00000048 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800b20c l     F .text	00000080 SPIx_Init
0800b28c l     F .text	00000040 SPIx_WriteRead
0800b2cc l     F .text	0000006c I2Cx_Init
20000e90 l     O .bss	00000038 I2cHandle
20000ec8 l     O .bss	00000060 SpiHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000f28 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000f2c l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800bbf8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/6.3.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000010 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
0801b598 l       .fini_array	00000000 __fini_array_end
20000ac0 l       .bss	00000000 __bss_start__
20001d1c l       .bss	00000000 __bss_end__
0801b594 l       .fini_array	00000000 __fini_array_start
0801b594 l       .init_array	00000000 __init_array_end
0801b58c l       .init_array	00000000 __preinit_array_end
0801b58c l       .init_array	00000000 __init_array_start
0801b58c l       .init_array	00000000 __preinit_array_start
0800bbf4  w    F .text	00000002 RTC_Alarm_IRQHandler
0801547c g     O .rodata	00000008 RTC_BKP19R_fields
0801b478 g     O .rodata	00000010 APBAHBPrescTable
08017324 g     O .rodata	00000050 TIM2_SR_fields
0800d7cc g     O .rodata	00000100 CAN_F10R1_fields
08016494 g     O .rodata	00000008 TIM16_DMAR_fields
0800053c g     F .text	00000014 putchar
0800bbf4  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08004c60 g     F .text	00000040 _mprec_log10
080140ac g     O .rodata	00000008 I2C1_RXDR_fields
08006e08 g     F .text	0000002c .hidden __aeabi_dcmpun
0800b794 g     F .text	0000001e LSM303DLHC_AccFilterCmd
0800bbf4  w    F .text	00000002 TIM8_CC_IRQHandler
080174cc g     O .rodata	00000030 TIM6_CR1_fields
08013f94 g     O .rodata	00000048 I2C1_ICR_fields
08004ce8 g     F .text	0000005e __any_on
080077ec g     F .text	00000004 _isatty_r
0800c2c0 g     O .rodata	00000028 __mprec_tinytens
20000f30 g     O .bss	00000050 input_b
08006dcc g     F .text	00000012 .hidden __aeabi_dcmple
080172d4 g     O .rodata	00000008 TIM2_PSC_fields
0801669c g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08000760 g     F .text	000000ba strcpy
08011ca4 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08014104 g     O .rodata	00000008 I2C1_TXDR_fields
08000550 g     F .text	00000068 _puts_r
0800b154 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800e9cc g     O .rodata	00000100 CAN_F19R1_fields
08006d08 g     F .text	0000007a .hidden __cmpdf2
08007c0c g     F .text	00000054 DecodeWriteRegister
08009af4 g     F .text	000000c6 HAL_PCD_EP_ClrStall
080163c4 g     O .rodata	00000008 TIM16_CCR1_fields
0800bbf4  w    F .text	00000002 DebugMon_Handler
080077f0 g     F .text	00000004 _lseek_r
0801300c g     O .rodata	00000020 FPU_MVFR1_fields
0800af4e g     F .text	0000001a HAL_PCD_ResetCallback
08009bee g     F .text	00000022 PCD_WritePMA
0800f1cc g     O .rodata	00000100 CAN_F22R1_fields
08010dcc g     O .rodata	000000e0 CAN_FA1R_fields
20000fd0 g     O .bss	00000224 hUSBDDevice
080172dc g     O .rodata	00000048 TIM2_SMCR_fields
080143f4 g     O .rodata	00000020 NVIC_IPR1_fields
0801c07c g     O .parsetable	0000000c CmdTestE
08006d08 g     F .text	0000007a .hidden __eqdf2
0800dfcc g     O .rodata	00000100 CAN_F14R1_fields
08017a1c g     O .rodata	00000008 TIM8_PSC_fields
08016154 g     O .rodata	00000030 TIM15_EGR_fields
08007870 g     F .text	00000048 CmdStats
0800ba70 g     F .text	0000002e L3GD20_FilterConfig
08009bba g     F .text	00000034 HAL_PCDEx_PMAConfig
08017374 g     O .rodata	00000140 TIM2_registers
080160f4 g     O .rodata	00000058 TIM15_DIER_fields
08012454 g     O .rodata	00000008 DMA1_CMAR3_fields
08013314 g     O .rodata	00000100 GPIOA_BSRR_fields
080123e4 g     O .rodata	00000060 DMA1_CCR7_fields
0800915c g     F .text	000001d8 HAL_PCD_EP_Close
08017f34 g     O .rodata	00000008 TSC_IOG6CR_fields
0800d304 g     O .rodata	00000028 ADC1_SQR1_fields
08000990 g     F .text	00000006 strtok_r
08006878 g     F .text	0000005a .hidden __floatdidf
0801107c g     O .rodata	000000e0 CAN_FS1R_fields
08016a94 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
080156bc g     O .rodata	00000010 RTC_SHIFTR_fields
0800050c g     F .text	00000028 printf
0800b9f4 g     F .text	00000040 L3GD20_EnableIT
080114c4 g     O .rodata	00000028 CAN_TI1R_fields
0800a6b6 g     F .text	00000016 USBD_SetClassConfig
08014334 g     O .rodata	00000020 NVIC_IPR14_fields
0800646c g     F .text	00000054 _wcrtomb_r
0800bbf4  w    F .text	00000002 TIM1_CC_IRQHandler
08008adc g     F .text	00000068 HAL_NVIC_SetPriority
0800d3bc g     O .rodata	000001b0 ADC1_registers
0800af36 g     F .text	00000010 HAL_PCD_DataInStageCallback
08017214 g     O .rodata	00000018 TIM2_CR2_fields
0801318c g     O .rodata	00000008 Flash_WRPR_fields
08005188 g     F .text	00000020 __sseek
08003498 g     F .text	00000008 __sinit
08012204 g     O .rodata	00000060 DMA1_CCR2_fields
080061b4 g     F .text	000000ae __swbuf_r
0800bbf4  w    F .text	00000002 HardFault_Handler
08017fcc g     O .rodata	00000100 TSC_IOHCR_fields
08011e0c g     O .rodata	00000020 CRC_CR_fields
08003ad4 g     F .text	00000040 _setlocale_r
080033c8 g     F .text	0000002e __sfmoreglue
08014534 g     O .rodata	00000008 NVIC_ISER0_fields
08004450 g     F .text	00000002 __malloc_unlock
08015f44 g     O .rodata	00000008 TIM15_ARR_fields
080154ac g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
08016b84 g     O .rodata	00000008 TIM1_CCR3_fields
08016d14 g     O .rodata	00000008 TIM1_DMAR_fields
0801604c g     O .rodata	00000008 TIM15_CCR1_fields
0800bbf4  w    F .text	00000002 USB_HP_IRQHandler
0801861c g     O .rodata	00000010 USART1_RTOR_fields
08014dfc g     O .rodata	00000070 RCC_AHBENR_fields
080171b4 g     O .rodata	00000018 TIM2_CNT_fields
0801410c g     O .rodata	000000b0 I2C1_registers
08007334 g     F .text	00000018 SysTick_Handler
08015804 g     O .rodata	00000008 RTC_WPR_fields
080156cc g     O .rodata	00000008 RTC_SSR_fields
08008d30 g     F .text	0000000a HAL_GPIO_WritePin
08017f14 g     O .rodata	00000008 TSC_IOG2CR_fields
0800ae56 g     F .text	00000026 USBD_CDC_ReceivePacket
0800bbf4  w    F .text	00000002 PVD_IRQHandler
080124e4 g     O .rodata	00000008 DMA1_CPAR7_fields
0800b75a g     F .text	0000001c LSM303DLHC_AccRebootCmd
080174bc g     O .rodata	00000010 TIM6_CNT_fields
08016c9c g     O .rodata	00000078 TIM1_DIER_fields
0800af46 g     F .text	00000008 HAL_PCD_SOFCallback
08014274 g     O .rodata	00000008 NVIC_ICPR0_fields
08004384 g     F .text	000000c6 memmove
0800bbf4  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800b47c g     F .text	00000068 GYRO_IO_Init
08014434 g     O .rodata	00000020 NVIC_IPR2_fields
0801b598 g       *ABS*	00000000 _sidata
08003484 g     F .text	00000014 _cleanup
080089fc g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800bbf4  w    F .text	00000002 PendSV_Handler
0801c070 g     O .parsetable	0000000c CmdButtonE
0801427c g     O .rodata	00000008 NVIC_ICPR1_fields
0800bbf4  w    F .text	00000002 NMI_Handler
08008b44 g     F .text	00000018 HAL_NVIC_EnableIRQ
08004454 g     F .text	0000004c _Balloc
0801b58c g       .ARM	00000000 __exidx_end
0800092c g     F .text	00000062 __strtok_r
0800bbf4  w    F .text	00000002 EXTI3_IRQHandler
08008990 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800b3c0 g     F .text	0000001c BSP_LED_Off
0801249c g     O .rodata	00000008 DMA1_CNDTR5_fields
08017614 g     O .rodata	00000098 TIM8_CCER_fields
08010acc g     O .rodata	00000100 CAN_F8R2_fields
08006cf8 g     F .text	0000008a .hidden __gtdf2
0801c0e8 g       .parsetable	00000000 _parsetable_end
08014e6c g     O .rodata	00000048 RCC_AHBRSTR_fields
080003c0 g     F .text	0000000c __errno
0801550c g     O .rodata	00000008 RTC_BKP6R_fields
080114ec g     O .rodata	00000028 CAN_TI2R_fields
0800a898 g     F .text	000001f4 USBD_StdDevReq
08009ec2 g     F .text	00000090 HAL_I2C_Init
08014544 g     O .rodata	00000008 NVIC_ISER2_fields
0801c0d0 g     O .parsetable	0000000c CmdWE
08009f52  w    F .text	00000002 HAL_I2C_MspDeInit
08011264 g     O .rodata	00000020 CAN_RDH0R_fields
08012fac g     O .rodata	00000020 FPU_FPDSCR_fields
0800b09c g     F .text	0000000c USBD_VCP_DeviceDescriptor
08008d44 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08008a34  w    F .text	00000002 HAL_MspInit
0800d6cc g     O .rodata	00000100 CAN_F0R2_fields
08017f44 g     O .rodata	00000008 TSC_IOG8CR_fields
0800b034 g     F .text	00000026 USBD_LL_IsStallEP
0800d5cc g     O .rodata	00000100 CAN_F0R1_fields
08016194 g     O .rodata	00000020 TIM15_SMCR_fields
0800afe8 g     F .text	0000000e USBD_LL_Start
0800b5d4 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800b694 g     F .text	00000030 BSP_ACCELERO_Init
0800a6ac g     F .text	0000000a USBD_Start
080077e2 g     F .text	0000000a _fstat_r
08008d3a g     F .text	00000008 HAL_GPIO_TogglePin
08017874 g     O .rodata	00000048 TIM8_CR1_fields
080130a4 g     O .rodata	00000008 Flash_AR_fields
0800fdcc g     O .rodata	00000100 CAN_F2R1_fields
08011c4c g     O .rodata	00000058 COMP_COMP4_CSR_fields
0801384c g     O .rodata	00000040 GPIOB_AFRH_fields
08005148 g     F .text	00000004 __seofread
0800bc24 g       .text	00000000 _etext
08012c7c g     O .rodata	00000010 EXTI_PR2_fields
0801872c g     O .rodata	00000028 USB_FS_FNR_fields
20000ac0 g       .bss	00000000 _sbss
08011d9c g     O .rodata	00000070 COMP_registers
080102cc g     O .rodata	00000100 CAN_F4R2_fields
0800b098 g     F .text	00000002 USBD_static_free
08012444 g     O .rodata	00000008 DMA1_CMAR1_fields
0801723c g     O .rodata	00000060 TIM2_DIER_fields
08006d94 g     F .text	00000010 .hidden __aeabi_cdcmple
08017f0c g     O .rodata	00000008 TSC_IOG1CR_fields
08016664 g     O .rodata	00000020 TIM17_CCER_fields
08017a24 g     O .rodata	00000008 TIM8_RCR_fields
080163cc g     O .rodata	00000010 TIM16_CNT_fields
0801394c g     O .rodata	00000100 GPIOB_BSRR_fields
08000298 g     F .text	0000011a lzTilt
0800e4cc g     O .rodata	00000100 CAN_F16R2_fields
0800d214 g     O .rodata	00000018 ADC1_OFR1_fields
0800f6cc g     O .rodata	00000100 CAN_F24R2_fields
080154a4 g     O .rodata	00000008 RTC_BKP23R_fields
08016054 g     O .rodata	00000008 TIM15_CCR2_fields
0800d00c g     O .rodata	00000098 ADC1_CFGR_fields
0801544c g     O .rodata	00000008 RTC_BKP13R_fields
0800a69e g     F .text	0000000e USBD_RegisterClass
0800edcc g     O .rodata	00000100 CAN_F20R1_fields
080184dc g     O .rodata	00000060 USART1_ICR_fields
0800f8cc g     O .rodata	00000100 CAN_F25R2_fields
08017f24 g     O .rodata	00000008 TSC_IOG4CR_fields
0800fccc g     O .rodata	00000100 CAN_F27R2_fields
08017a74 g     O .rodata	00000078 TIM8_SR_fields
08018754 g     O .rodata	00000050 USB_FS_ISTR_fields
0801244c g     O .rodata	00000008 DMA1_CMAR2_fields
080154bc g     O .rodata	00000008 RTC_BKP26R_fields
0800d32c g     O .rodata	00000028 ADC1_SQR2_fields
080166cc g     O .rodata	00000010 TIM17_CNT_fields
08018b84 g     O .rodata	00000008 WWDG_SR_fields
08008b88 g     F .text	0000019c HAL_GPIO_Init
08012e4c g     O .rodata	000000c0 EXTI_registers
0800a862 g     F .text	00000006 USBD_LL_SetSpeed
20000a3c g     O .data	00000004 BUTTON_PORT
0800b6c4 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0801428c g     O .rodata	00000008 NVIC_ICTR_fields
080174b4 g     O .rodata	00000008 TIM6_ARR_fields
08011514 g     O .rodata	000000b0 CAN_TSR_fields
080076a0 g     F .text	000000b8 DumpBuffer
08000534 g     F .text	00000006 _putchar_r
08013414 g     O .rodata	00000080 GPIOA_IDR_fields
080188fc g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800af6a g     F .text	00000002 HAL_PCD_ResumeCallback
08004250 g     F .text	00000134 memcpy
08006d84 g     F .text	00000020 .hidden __aeabi_cdrcmple
080108cc g     O .rodata	00000100 CAN_F7R2_fields
08016bbc g     O .rodata	00000010 TIM1_CNT_fields
0800b4e4 g     F .text	00000044 GYRO_IO_Write
080005c8 g     F .text	0000014c setvbuf
08007194 g     F .text	0000005c CmdLED
20000ac0 g     O .data	00000000 .hidden __TMC_END__
08016dcc g     O .rodata	00000078 TIM1_SR_fields
08014314 g     O .rodata	00000020 NVIC_IPR13_fields
08016184 g     O .rodata	00000008 TIM15_PSC_fields
0800aabc g     F .text	000000aa USBD_StdEPReq
080032c8 g     F .text	0000000c _cleanup_r
08013214 g     O .rodata	00000040 GPIOA_AFRH_fields
08006808 g     F .text	00000022 .hidden __floatsidf
08000382 g       .text	00000030 lose
08011f4c g     O .rodata	00000010 DAC_DHR12RD_fields
08011ba4 g     O .rodata	00000058 COMP_COMP2_CSR_fields
08017944 g     O .rodata	00000078 TIM8_DIER_fields
0800d0f4 g     O .rodata	00000010 ADC1_DIFSEL_fields
08006d00 g     F .text	00000082 .hidden __ltdf2
0800b3f4 g     F .text	00000074 BSP_PB_Init
0800bbf4  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800734c g     F .text	00000006 EXTI0_IRQHandler
08017a0c g     O .rodata	00000010 TIM8_OR_fields
0800bbf4  w    F .text	00000002 I2C2_EV_IRQHandler
08011394 g     O .rodata	00000020 CAN_TDH0R_fields
0801894c g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08006e84 g     F .text	00000000 .hidden __aeabi_uldivmod
08018b8c g     O .rodata	00000030 WWDG_registers
080167cc g     O .rodata	00000008 TIM17_RCR_fields
080005b8 g     F .text	00000010 puts
0800ac1e g     F .text	00000016 USBD_CtlSendStatus
0800bbf4  w    F .text	00000002 FPU_IRQHandler
08008a9c  w    F .text	0000001a HAL_Delay
0800aa8c g     F .text	00000030 USBD_StdItfReq
08017834 g     O .rodata	00000008 TIM8_CCR4_fields
200008d8 g     O .data	00000004 SystemCoreClock
080161f4 g     O .rodata	00000120 TIM15_registers
08009448 g     F .text	00000180 HAL_PCD_EP_Transmit
08000278 g     F .text	00000012 my_Tick
08004c00 g     F .text	00000060 __ratio
0800ffcc g     O .rodata	00000100 CAN_F3R1_fields
0800ab66 g     F .text	00000028 USBD_ParseSetupRequest
08017174 g     O .rodata	00000010 TIM2_CCR1_fields
08011f9c g     O .rodata	00000010 DAC_SWTRIGR_fields
0800bbf4  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800ddcc g     O .rodata	00000100 CAN_F13R1_fields
08003c38 g     F .text	00000010 malloc
080141cc g     O .rodata	00000008 IWDG_RLR_fields
080004ec g     F .text	0000001e _printf_r
08009c10 g     F .text	00000022 PCD_ReadPMA
08007218 g     F .text	0000004c CmdGyro
0801106c g     O .rodata	00000010 CAN_FMR_fields
0800c1f8 g     O .rodata	000000c8 __mprec_tens
080149cc g     O .rodata	00000040 OPAMP_registers
08012494 g     O .rodata	00000008 DMA1_CNDTR4_fields
0801424c g     O .rodata	00000008 NVIC_IABR1_fields
0800cfbc g     O .rodata	00000030 ADC1_2_registers
20000a08 g     O .data	0000001c VCP_Desc
08012bac g     O .rodata	000000d0 EXTI_PR1_fields
0800bbf4  w    F .text	00000002 UsageFault_Handler
08003b14 g     F .text	00000008 __locale_charset
0801783c g     O .rodata	00000020 TIM8_CCR5_fields
0800bbf4  w    F .text	00000002 ADC1_2_IRQHandler
20000adc g     O .bss	00000004 __malloc_top_pad
20000f80 g     O .bss	00000050 input
080101cc g     O .rodata	00000100 CAN_F4R1_fields
0800d3ac g     O .rodata	00000010 ADC1_TR3_fields
080124bc g     O .rodata	00000008 DMA1_CPAR2_fields
0801644c g     O .rodata	00000048 TIM16_DIER_fields
08008d24 g     F .text	0000000c HAL_GPIO_ReadPin
0801426c g     O .rodata	00000008 NVIC_ICER2_fields
08000acc g     F .text	00000018 strtoul
20001470 g     O .bss	00000004 BuffLength
20000458 g     O .data	00000004 __mb_cur_max
080067e8 g     F .text	0000001e .hidden __aeabi_ui2d
08003b34 g     F .text	00000008 _localeconv_r
0801781c g     O .rodata	00000008 TIM8_CCR1_fields
20001474 g     O .bss	0000006c UartHandle
08010ccc g     O .rodata	00000100 CAN_F9R2_fields
08011f24 g     O .rodata	00000008 DAC_DHR12L2_fields
08004670 g     F .text	00000012 __i2b
08003744 g     F .text	000002f0 __sfvwrite_r
0800a868 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
0800bbf4  w    F .text	00000002 SPI1_IRQHandler
0801149c g     O .rodata	00000028 CAN_TI0R_fields
0800bbf4  w    F .text	00000002 CAN_SCE_IRQHandler
08006eb4 g     F .text	000002dc .hidden __udivmoddi4
08006564 g     F .text	00000000 .hidden __aeabi_drsub
0800d2bc g     O .rodata	00000048 ADC1_SMPR2_fields
08014474 g     O .rodata	00000020 NVIC_IPR4_fields
080077ac g     F .text	00000030 _sbrk_r
080143b4 g     O .rodata	00000020 NVIC_IPR18_fields
0800ae7c g     F .text	0000009c HAL_PCD_MspInit
08017504 g     O .rodata	00000010 TIM6_DIER_fields
08016a34 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801853c g     O .rodata	000000b0 USART1_ISR_fields
0800bbf4  w    F .text	00000002 TIM6_DAC_IRQHandler
08013f2c g     O .rodata	00000068 I2C1_CR2_fields
08017824 g     O .rodata	00000008 TIM8_CCR2_fields
08009a54 g     F .text	000000a0 HAL_PCD_EP_SetStall
08007980 g     F .text	0000000a _read_r
08016d84 g     O .rodata	00000048 TIM1_SMCR_fields
0800d59c g     O .rodata	00000030 CAN_ESR_fields
0800a674 g     F .text	0000002a USBD_Init
080138cc g     O .rodata	00000080 GPIOB_BRR_fields
200011f8 g     O .bss	00000178 hpcd
08006db8 g     F .text	00000012 .hidden __aeabi_dcmplt
080062d4 g     F .text	00000080 _fclose_r
0800d22c g     O .rodata	00000018 ADC1_OFR2_fields
08016fe4 g     O .rodata	00000010 TIM2_ARR_fields
080032a0 g     F .text	00000024 fflush
0800b570 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000b08 g     O .bss	00000004 __malloc_max_sbrked_mem
08010bcc g     O .rodata	00000100 CAN_F9R1_fields
080155ec g     O .rodata	00000038 RTC_DR_fields
08016b74 g     O .rodata	00000008 TIM1_CCR1_fields
08008b5c g     F .text	0000002c HAL_SYSTICK_Config
0800682c g     F .text	0000003a .hidden __extendsfdf2
08013164 g     O .rodata	00000008 Flash_OPTKEYR_fields
0800d25c g     O .rodata	00000018 ADC1_OFR4_fields
200011f4 g     O .bss	00000004 USBDDataIn
08006b28 g     F .text	000001d0 .hidden __aeabi_ddiv
0800bbf4  w    F .text	00000002 TIM8_UP_IRQHandler
200009eb g     O .data	0000001a USBD_StringSerial
0800f7cc g     O .rodata	00000100 CAN_F25R1_fields
08015c54 g     O .rodata	00000018 SPI1_I2SPR_fields
0800d1bc g     O .rodata	00000008 ADC1_JDR1_fields
080141bc g     O .rodata	00000008 IWDG_KR_fields
0801880c g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08006570 g     F .text	00000276 .hidden __adddf3
0800b61c g     F .text	00000038 COMPASSACCELERO_IO_Write
0800f4cc g     O .rodata	00000100 CAN_F23R2_fields
08011e4c g     O .rodata	00000050 CRC_registers
080182fc g     O .rodata	000000a0 USART1_CR1_fields
08015814 g     O .rodata	00000320 RTC_registers
080104cc g     O .rodata	00000100 CAN_F5R2_fields
08016714 g     O .rodata	00000028 TIM17_CR2_fields
08004a80 g     F .text	000000c4 __b2d
0801b584 g       .ARM	00000000 __exidx_start
08016384 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
08013104 g     O .rodata	00000008 Flash_KEYR_fields
080068d4 g     F .text	00000254 .hidden __aeabi_dmul
0800b902 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801776c g     O .rodata	00000060 TIM8_CCMR2_Output_fields
08014a44 g     O .rodata	00000028 PWR_CSR_fields
0801539c g     O .rodata	00000010 RTC_ALRMASSR_fields
200009a8 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08015e74 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08014244 g     O .rodata	00000008 NVIC_IABR0_fields
0800c1c0 g     O .rodata	00000004 _global_impure_ptr
08012fcc g     O .rodata	00000040 FPU_MVFR0_fields
080164cc g     O .rodata	00000008 TIM16_RCR_fields
08004dd8 g     F .text	0000034c _realloc_r
08000400 g     F .text	00000050 __libc_init_array
0800ac0e g     F .text	00000010 USBD_CtlContinueRx
08015444 g     O .rodata	00000008 RTC_BKP12R_fields
080184cc g     O .rodata	00000010 USART1_GTPR_fields
08008e30 g     F .text	0000032c HAL_PCD_EP_Open
0800bbf4  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800bbf4  w    F .text	00000002 DMA1_Channel4_IRQHandler
08016d64 g     O .rodata	00000010 TIM1_OR_fields
08013d54 g     O .rodata	00000080 GPIOB_PUPDR_fields
080095c8 g     F .text	0000048c HAL_PCD_IRQHandler
08007404 g     F .text	00000020 CmdR
08007384 g     F .text	00000064 a3
08006404 g     F .text	00000026 _fputwc_r
0800c2e8 g     O .rodata	00000028 __mprec_bigtens
08016b8c g     O .rodata	00000008 TIM1_CCR4_fields
08004534 g     F .text	0000009c __s2b
080067e8 g     F .text	0000001e .hidden __floatunsidf
08011414 g     O .rodata	00000020 CAN_TDL1R_fields
080048ec g     F .text	00000036 __mcmp
080144d4 g     O .rodata	00000020 NVIC_IPR7_fields
0800ba9e g     F .text	0000002e L3GD20_FilterCmd
08016794 g     O .rodata	00000008 TIM17_DMAR_fields
08009f54 g     F .text	0000002e HAL_I2C_DeInit
0801605c g     O .rodata	00000010 TIM15_CNT_fields
080034b0 g     F .text	00000014 __fp_lock_all
0800a31e g     F .text	000000a4 HAL_SPI_Init
08015434 g     O .rodata	00000008 RTC_BKP10R_fields
0801121c g     O .rodata	00000048 CAN_MSR_fields
0801525c g     O .rodata	000000d0 RCC_registers
0800bc0c g     F .text	00000000 _init
080113f4 g     O .rodata	00000020 CAN_TDL0R_fields
08011f64 g     O .rodata	00000008 DAC_DHR8R2_fields
08014f2c g     O .rodata	00000090 RCC_APB1RSTR_fields
0800b718 g     F .text	00000010 BSP_GYRO_GetXYZ
0801542c g     O .rodata	00000008 RTC_BKP0R_fields
080115c4 g     O .rodata	00000590 CAN_registers
0801c058 g       .parsetable	00000000 _parsetable_start
08012324 g     O .rodata	00000060 DMA1_CCR5_fields
0801551c g     O .rodata	00000008 RTC_BKP8R_fields
080181dc g     O .rodata	00000110 TSC_registers
080170e4 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800b018 g     F .text	0000000e USBD_LL_StallEP
08014264 g     O .rodata	00000008 NVIC_ICER1_fields
0801649c g     O .rodata	00000028 TIM16_EGR_fields
0801c0b8 g     O .parsetable	0000000c CmdRE
0800a31c  w    F .text	00000002 HAL_SPI_MspInit
080109cc g     O .rodata	00000100 CAN_F8R1_fields
0800bbf4  w    F .text	00000002 USART3_IRQHandler
0800efcc g     O .rodata	00000100 CAN_F21R1_fields
0801520c g     O .rodata	00000050 RCC_CSR_fields
0800b0dc g     F .text	00000040 USBD_VCP_SerialStrDescriptor
0801369c g     O .rodata	00000080 GPIOA_OTYPER_fields
08011f2c g     O .rodata	00000010 DAC_DHR12LD_fields
080164d4 g     O .rodata	00000030 TIM16_SR_fields
08016e44 g     O .rodata	000001a0 TIM1_registers
080003cc g     F .text	00000034 __libc_fini_array
0800d1dc g     O .rodata	00000038 ADC1_JSQR_fields
20001d1c g       .bss	00000000 _ebss
08007354 g     F .text	00000030 CmdTest
0800b654 g     F .text	00000040 COMPASSACCELERO_IO_Read
20000a94 g     O .data	0000002c L3gd20Drv
08012f0c g     O .rodata	00000050 FPU_CPACR_fields
0800bbf4  w    F .text	00000002 DMA1_Channel7_IRQHandler
08011434 g     O .rodata	00000020 CAN_TDL2R_fields
0800a0b4 g     F .text	0000013a HAL_I2C_Mem_Read
08013254 g     O .rodata	00000040 GPIOA_AFRL_fields
0800bba4  w    F .text	00000038 Reset_Handler
20000914 g     O .data	00000043 USBD_CDC_CfgFSDesc
080154d4 g     O .rodata	00000008 RTC_BKP29R_fields
0800b6d4 g     F .text	00000044 BSP_GYRO_Init
08014294 g     O .rodata	00000020 NVIC_IPR0_fields
0801359c g     O .rodata	00000080 GPIOA_ODR_fields
080045d0 g     F .text	0000003e __hi0bits
08014354 g     O .rodata	00000020 NVIC_IPR15_fields
08016b7c g     O .rodata	00000008 TIM1_CCR2_fields
08012c8c g     O .rodata	000000d0 EXTI_RTSR1_fields
08011f84 g     O .rodata	00000008 DAC_DOR2_fields
08011e2c g     O .rodata	00000008 CRC_DR_fields
08006e34 g     F .text	0000004e .hidden __fixdfsi
08013c54 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
0801c0ac g     O .parsetable	0000000c CmdLEDE
0800bbf4  w    F .text	00000002 UART5_IRQHandler
08007d08 g     F .text	0000004c DecodePeripheral
08015e14 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
0800dacc g     O .rodata	00000100 CAN_F11R2_fields
0800bbf4  w    F .text	00000002 ADC3_IRQHandler
080157cc g     O .rodata	00000038 RTC_TSTR_fields
080171cc g     O .rodata	00000048 TIM2_CR1_fields
08008a5c g     F .text	00000024 HAL_Init
0800eccc g     O .rodata	00000100 CAN_F1R2_fields
08004d48 g     F .text	00000042 _putc_r
0800abf0 g     F .text	0000001e USBD_CtlPrepareRx
0801546c g     O .rodata	00000008 RTC_BKP17R_fields
080112c4 g     O .rodata	00000020 CAN_RDL1R_fields
0800f3cc g     O .rodata	00000100 CAN_F23R1_fields
0800a3c4 g     F .text	0000002e HAL_SPI_DeInit
0800bbf4  w    F .text	00000002 TIM4_IRQHandler
0800e7cc g     O .rodata	00000100 CAN_F18R1_fields
08018a8c g     O .rodata	000000d0 USB_FS_registers
08006570 g     F .text	00000276 .hidden __aeabi_dadd
0801782c g     O .rodata	00000008 TIM8_CCR3_fields
08006d00 g     F .text	00000082 .hidden __ledf2
0800decc g     O .rodata	00000100 CAN_F13R2_fields
0800c424 g     O .rodata	00000008 LEDs
08017054 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08011f3c g     O .rodata	00000008 DAC_DHR12R1_fields
08014064 g     O .rodata	00000028 I2C1_OAR1_fields
0800b090 g     F .text	00000008 USBD_static_malloc
08011314 g     O .rodata	00000020 CAN_RF0R_fields
0800bbf4  w    F .text	00000002 CAN_RX1_IRQHandler
0800bbf4  w    F .text	00000002 DMA2_Channel1_IRQHandler
08015514 g     O .rodata	00000008 RTC_BKP7R_fields
080047a8 g     F .text	000000a0 __pow5mult
0800d38c g     O .rodata	00000010 ADC1_TR1_fields
080124ac g     O .rodata	00000008 DMA1_CNDTR7_fields
08006868 g     F .text	0000006a .hidden __aeabi_ul2d
0800ae28 g     F .text	0000002e USBD_CDC_TransmitPacket
20000a40 g     O .data	00000004 I2cxTimeout
08017f2c g     O .rodata	00000008 TSC_IOG5CR_fields
08011f44 g     O .rodata	00000008 DAC_DHR12R2_fields
08015474 g     O .rodata	00000008 RTC_BKP18R_fields
08000264 g     F .text	00000014 mytest
0801246c g     O .rodata	00000008 DMA1_CMAR6_fields
08015fcc g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08007264 g     F .text	0000002c CmdButton
08008d42  w    F .text	00000002 HAL_GPIO_EXTI_Callback
0800ac34 g     F .text	00000016 USBD_CtlReceiveStatus
080171a4 g     O .rodata	00000010 TIM2_CCR4_fields
20001d1c g       ._user_heap_stack	00000000 end
20000a24 g     O .data	00000008 LineCoding
08015b34 g     O .rodata	00000070 SPI1_CR1_fields
0800bbf4  w    F .text	00000002 I2C1_EV_IRQHandler
08015cd4 g     O .rodata	00000090 SPI1_registers
0800aff6 g     F .text	00000014 USBD_LL_OpenEP
08017934 g     O .rodata	00000010 TIM8_DCR_fields
08007da8 g     F .text	00000064 DecodePrintRegisters
080187a4 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
08018634 g     O .rodata	000000b0 USART1_registers
0800ba34 g     F .text	0000003c L3GD20_DisableIT
0801862c g     O .rodata	00000008 USART1_TDR_fields
08014eb4 g     O .rodata	00000078 RCC_APB1ENR_fields
0800a3c2  w    F .text	00000002 HAL_SPI_MspDeInit
08012484 g     O .rodata	00000008 DMA1_CNDTR2_fields
0801115c g     O .rodata	00000070 CAN_IER_fields
080121a4 g     O .rodata	00000060 DMA1_CCR1_fields
0801425c g     O .rodata	00000008 NVIC_ICER0_fields
0801c058 g     O .parsetable	0000000c a3E
0801453c g     O .rodata	00000008 NVIC_ISER1_fields
0800a798 g     F .text	0000008c USBD_LL_DataInStage
080154ec g     O .rodata	00000008 RTC_BKP31R_fields
08016d1c g     O .rodata	00000048 TIM1_EGR_fields
08017084 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08011f8c g     O .rodata	00000010 DAC_SR_fields
08017184 g     O .rodata	00000010 TIM2_CCR2_fields
0800af6c g     F .text	0000007c USBD_LL_Init
080154f4 g     O .rodata	00000008 RTC_BKP3R_fields
0800b3a4 g     F .text	0000001c BSP_LED_On
0800b91e g     F .text	00000032 L3GD20_Init
08006df4 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800bbf4  w    F .text	00000002 DMA1_Channel6_IRQHandler
200008dc g     O .data	00000038 USBD_CDC
0800a6cc g     F .text	0000000e USBD_ClrClassConfig
08015504 g     O .rodata	00000008 RTC_BKP5R_fields
0800bbf4  w    F .text	00000002 UART4_IRQHandler
0800bbf4  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800adfe g     F .text	0000000e USBD_CDC_RegisterInterface
080034a0 g     F .text	00000002 __sfp_lock_acquire
080041b0 g     F .text	00000000 memchr
08003578 g     F .text	000001cc _free_r
0800bbf4  w    F .text	00000002 TIM3_IRQHandler
0800bbf4  w    F .text	00000002 RCC_IRQHandler
0801552c g     O .rodata	00000020 RTC_CALR_fields
08003b1c g     F .text	0000000c __locale_mb_cur_max
08006de0 g     F .text	00000012 .hidden __aeabi_dcmpge
08011f1c g     O .rodata	00000008 DAC_DHR12L1_fields
080167d4 g     O .rodata	00000030 TIM17_SR_fields
00001000 g       *ABS*	00000000 _Min_Heap_Size
08013cd4 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800bbf4  w    F .text	00000002 DMA1_Channel1_IRQHandler
08015524 g     O .rodata	00000008 RTC_BKP9R_fields
0800e0cc g     O .rodata	00000100 CAN_F14R2_fields
0800656c g     F .text	0000027a .hidden __aeabi_dsub
0800af24 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800bbf4 g       .text	00000002 Default_Handler
200008bc g     O .data	00000004 __malloc_sbrk_base
0800b138 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
08013494 g     O .rodata	00000088 GPIOA_LCKR_fields
080156d4 g     O .rodata	00000090 RTC_TAFCR_fields
20000a2c g     O .data	00000010 USBD_CDC_fops
0801379c g     O .rodata	000000b0 GPIOA_registers
0801455c g     O .rodata	00000008 NVIC_ISPR2_fields
0800bbf4  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08017114 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
08013acc g     O .rodata	00000088 GPIOB_LCKR_fields
080178bc g     O .rodata	00000078 TIM8_CR2_fields
08009438 g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800d56c g     O .rodata	00000030 CAN_BTR_fields
08006868 g     F .text	0000006a .hidden __floatundidf
080122c4 g     O .rodata	00000060 DMA1_CCR4_fields
080142b4 g     O .rodata	00000020 NVIC_IPR10_fields
08016614 g     O .rodata	00000008 TIM17_ARR_fields
0800dccc g     O .rodata	00000100 CAN_F12R2_fields
08004848 g     F .text	000000a2 __lshift
080185f4 g     O .rodata	00000028 USART1_RQR_fields
0801674c g     O .rodata	00000048 TIM17_DIER_fields
0801549c g     O .rodata	00000008 RTC_BKP22R_fields
080113d4 g     O .rodata	00000020 CAN_TDH2R_fields
08016d7c g     O .rodata	00000008 TIM1_RCR_fields
0800b026 g     F .text	0000000e USBD_LL_ClearStallEP
08014494 g     O .rodata	00000020 NVIC_IPR5_fields
0801310c g     O .rodata	00000058 Flash_OBR_fields
0800bbf4  w    F .text	00000002 EXTI15_10_IRQHandler
0801146c g     O .rodata	00000018 CAN_TDT1R_fields
0800bacc g     F .text	000000d8 L3GD20_ReadXYZAngRate
08015764 g     O .rodata	00000038 RTC_TR_fields
08014394 g     O .rodata	00000020 NVIC_IPR17_fields
08002118 g     F .text	000000a4 __register_exitproc
080130ac g     O .rodata	00000058 Flash_CR_fields
08015c74 g     O .rodata	00000058 SPI1_SR_fields
080186ec g     O .rodata	00000040 USB_FS_DADDR_fields
08012e3c g     O .rodata	00000010 EXTI_SWIER2_fields
08008e02 g     F .text	0000002c HAL_PCD_SetAddress
080143d4 g     O .rodata	00000020 NVIC_IPR19_fields
08017524 g     O .rodata	00000008 TIM6_SR_fields
0800ebcc g     O .rodata	00000100 CAN_F1R1_fields
080167c4 g     O .rodata	00000008 TIM17_PSC_fields
08015e34 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
08004684 g     F .text	00000124 __multiply
08015c04 g     O .rodata	00000008 SPI1_CRCPR_fields
0800b776 g     F .text	0000001e LSM303DLHC_AccFilterConfig
080086d0 g     F .text	000002c0 HAL_RCC_ClockConfig
08008ab8 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
200008c8 g     O .data	00000004 Commands
0800d39c g     O .rodata	00000010 ADC1_TR2_fields
20000ae0 g     O .bss	00000028 __malloc_current_mallinfo
0800b880 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
080157c4 g     O .rodata	00000008 RTC_TSSSR_fields
0800752c g     F .text	0000012c TaskInput
080174fc g     O .rodata	00000008 TIM6_CR2_fields
080151bc g     O .rodata	00000050 RCC_CR_fields
08010f8c g     O .rodata	000000e0 CAN_FM1R_fields
08016bb4 g     O .rodata	00000008 TIM1_CCR6_fields
08004b44 g     F .text	000000ba __d2b
0801839c g     O .rodata	00000098 USART1_CR2_fields
0801690c g     O .rodata	00000060 TIM1_BDTR_fields
08000714 g     F .text	0000004c strcasecmp
080141ec g     O .rodata	00000008 IWDG_WINR_fields
0800d274 g     O .rodata	00000048 ADC1_SMPR1_fields
0800b528 g     F .text	00000048 GYRO_IO_Read
08000290 g     F .text	00000002 my_Init
0801408c g     O .rodata	00000018 I2C1_OAR2_fields
0800f9cc g     O .rodata	00000100 CAN_F26R1_fields
08000998 g     F .text	00000134 _strtoul_r
08011e44 g     O .rodata	00000008 CRC_POL_fields
0801245c g     O .rodata	00000008 DMA1_CMAR4_fields
0800bbf4  w    F .text	00000002 TIM7_IRQHandler
0800b998 g     F .text	0000005c L3GD20_INT1InterruptConfig
0800af68 g     F .text	00000002 HAL_PCD_SuspendCallback
080124c4 g     O .rodata	00000008 DMA1_CPAR3_fields
08015454 g     O .rodata	00000008 RTC_BKP14R_fields
0800aca8 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
080077dc g     F .text	00000006 _close_r
08015c0c g     O .rodata	00000008 SPI1_DR_fields
08015074 g     O .rodata	00000018 RCC_CFGR2_fields
08006808 g     F .text	00000022 .hidden __aeabi_i2d
080160e4 g     O .rodata	00000010 TIM15_DCR_fields
0801308c g     O .rodata	00000018 Flash_ACR_fields
08011e34 g     O .rodata	00000008 CRC_IDR_fields
20000a68 g     O .data	0000002c Lsm303dlhcDrv
080124d4 g     O .rodata	00000008 DMA1_CPAR5_fields
0800e8cc g     O .rodata	00000100 CAN_F18R2_fields
080141f4 g     O .rodata	00000050 IWDG_registers
0800091c g     F .text	00000010 strtok
0801c0a0 g     O .parsetable	0000000c CmdGyroE
080141c4 g     O .rodata	00000008 IWDG_PR_fields
080142d4 g     O .rodata	00000020 NVIC_IPR11_fields
08011d4c g     O .rodata	00000050 COMP_COMP7_CSR_fields
08011334 g     O .rodata	00000020 CAN_RF1R_fields
080078b8 g     F .text	0000007c TerminalInit
08002050 g     F .text	000000c8 __swsetup_r
080175ac g     O .rodata	00000008 TIM8_ARR_fields
08007190  w    F .text	00000002 .hidden __aeabi_ldiv0
0800bbf4  w    F .text	00000002 EXTI9_5_IRQHandler
0800a66e g     F .text	00000006 HAL_SPI_GetState
08006b28 g     F .text	000001d0 .hidden __divdf3
0800d104 g     O .rodata	00000008 ADC1_DR_fields
080033f8 g     F .text	0000008c __sfp
08004ca0 g     F .text	00000046 __copybits
0800bbf4  w    F .text	00000002 RTC_WKUP_IRQHandler
080182ec g     O .rodata	00000010 USART1_BRR_fields
08015ffc g     O .rodata	00000050 TIM15_CCMR1_Output_fields
200004b4 g     O .data	00000408 __malloc_av_
08015d64 g     O .rodata	00000088 SYSCFG_CFGR1_fields
080034ac g     F .text	00000002 __sinit_lock_release
0800798a g     F .text	00000010 TerminalReadNonBlock
080068d4 g     F .text	00000254 .hidden __muldf3
08011454 g     O .rodata	00000018 CAN_TDT0R_fields
08007758 g     F .text	00000054 CmdDump
08005124 g     F .text	00000022 __sread
0801639c g     O .rodata	00000028 TIM16_CCMR1_Output_fields
08018b5c g     O .rodata	00000018 WWDG_CFR_fields
08014a8c g     O .rodata	00000370 Peripherals
08013bd4 g     O .rodata	00000080 GPIOB_ODR_fields
08008a90  w    F .text	0000000c HAL_GetTick
0801899c g     O .rodata	00000050 USB_FS_USB_EP5R_fields
0800d9cc g     O .rodata	00000100 CAN_F11R1_fields
0800444c g     F .text	00000002 __malloc_lock
0801454c g     O .rodata	00000008 NVIC_ISPR0_fields
0800d164 g     O .rodata	00000058 ADC1_ISR_fields
08012f64 g     O .rodata	00000048 FPU_FPCCR_fields
08017cec g     O .rodata	00000010 TSC_ICR_fields
0800b7b2 g     F .text	000000ce LSM303DLHC_AccReadXYZ
08014254 g     O .rodata	00000008 NVIC_IABR2_fields
08003274 g     F .text	0000002c _fflush_r
0800799a g     F .text	00000012 TerminalReadAnyNonBlock
0800b11c g     F .text	0000001c USBD_VCP_ProductStrDescriptor
08006274 g     F .text	0000005e _calloc_r
0801371c g     O .rodata	00000080 GPIOA_PUPDR_fields
0800bbf4  w    F .text	00000002 SPI2_IRQHandler
08015494 g     O .rodata	00000008 RTC_BKP21R_fields
0801b4f9 g     O .rodata	00000012 hUSBDDeviceDesc
0801579c g     O .rodata	00000028 RTC_TSDR_fields
08007b38 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
0801508c g     O .rodata	00000048 RCC_CFGR3_fields
08000450 g     F .text	0000009a memset
0800bbf4  w    F .text	00000002 MemManage_Handler
0800729c g     F .text	00000098 main
080180cc g     O .rodata	00000100 TSC_IOSCR_fields
080126ac g     O .rodata	000001e0 DMA1_registers
0800b468 g     F .text	00000014 BSP_PB_GetState
08015e54 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000b0c g     O .bss	00000004 __malloc_max_total_mem
0800d1cc g     O .rodata	00000008 ADC1_JDR3_fields
08015ccc g     O .rodata	00000008 SPI1_TXCRCR_fields
08006264 g     F .text	00000010 __swbuf
0800a3f2 g     F .text	0000027c HAL_SPI_TransmitReceive
20000a64 g     O .data	00000004 SpixTimeout
0801c058 g       *ABS*	00000000 _siccmram
08011bfc g     O .rodata	00000050 COMP_COMP3_CSR_fields
08014514 g     O .rodata	00000020 NVIC_IPR9_fields
08012164 g     O .rodata	00000040 DBGMCU_registers
08014374 g     O .rodata	00000020 NVIC_IPR16_fields
0800fecc g     O .rodata	00000100 CAN_F2R2_fields
0800bbf4  w    F .text	00000002 SVC_Handler
080051a8 g     F .text	00000008 __sclose
0800bbf4  w    F .text	00000002 DMA2_Channel5_IRQHandler
080124ec g     O .rodata	000000e0 DMA1_IFCR_fields
08006354 g     F .text	00000010 fclose
08017f4c g     O .rodata	00000080 TSC_IOGCSR_fields
08007ad4 g     F .text	00000064 TerminalInputBufferWrite
080124b4 g     O .rodata	00000008 DMA1_CPAR1_fields
080022e8 g     F .text	00000e4c _dtoa_r
08003c58 g     F .text	00000552 _malloc_r
0801388c g     O .rodata	00000040 GPIOB_AFRL_fields
08006518 g     F .text	0000001a __ascii_wctomb
0800d10c g     O .rodata	00000058 ADC1_IER_fields
08006878 g     F .text	0000005a .hidden __aeabi_l2d
08011f5c g     O .rodata	00000008 DAC_DHR8R1_fields
08016a04 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
08017d0c g     O .rodata	00000100 TSC_IOASCR_fields
08014414 g     O .rodata	00000020 NVIC_IPR20_fields
08003a34 g     F .text	0000004a _fwalk
0800a824 g     F .text	0000003e USBD_LL_Reset
080112fc g     O .rodata	00000018 CAN_RDT1R_fields
08013294 g     O .rodata	00000080 GPIOA_BRR_fields
0800eecc g     O .rodata	00000100 CAN_F20R2_fields
080181cc g     O .rodata	00000010 TSC_ISR_fields
0800b084 g     F .text	0000000c USBD_LL_GetRxDataSize
0800bbf4  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800b728 g     F .text	00000020 LSM303DLHC_AccInit
0800bbf4  w    F .text	00000002 USB_LP_IRQHandler
200014e0 g     O .bss	00000800 UserRxBuffer
08015c14 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801b4a8 g     O .rodata	00000004 USBD_LangIDDesc
0800e2cc g     O .rodata	00000100 CAN_F15R2_fields
0800bbf4  w    F .text	00000002 EXTI4_IRQHandler
080188ac g     O .rodata	00000050 USB_FS_USB_EP2R_fields
08004d8c g     F .text	0000004c putc
20000a44 g     O .data	00000020 LED_PORT
0801785c g     O .rodata	00000008 TIM8_CCR6_fields
0800b8bc g     F .text	00000046 LSM303DLHC_AccClickITEnable
0800a734 g     F .text	00000064 USBD_LL_DataOutStage
080154fc g     O .rodata	00000008 RTC_BKP4R_fields
080034d8 g     F .text	000000a0 _malloc_trim_r
08017f3c g     O .rodata	00000008 TSC_IOG7CR_fields
08015464 g     O .rodata	00000008 RTC_BKP16R_fields
0801212c g     O .rodata	00000028 DBGMCU_CR_fields
080112e4 g     O .rodata	00000018 CAN_RDT0R_fields
0800cfec g     O .rodata	00000008 ADC1_AWD2CR_fields
08012464 g     O .rodata	00000008 DMA1_CMAR5_fields
080112a4 g     O .rodata	00000020 CAN_RDL0R_fields
080124cc g     O .rodata	00000008 DMA1_CPAR4_fields
080051c8 g     F .text	000002dc strcmp
0801752c g     O .rodata	00000080 TIM6_registers
080071f0 g     F .text	00000028 CmdAccel
08006130 g     F .text	00000018 vfiprintf
0801543c g     O .rodata	00000008 RTC_BKP11R_fields
0800a1ee g     F .text	00000006 HAL_I2C_GetState
08008078 g     F .text	00000068 SystemInit
0801631c g     O .rodata	00000048 TIM16_BDTR_fields
08006d08 g     F .text	0000007a .hidden __nedf2
080153ac g     O .rodata	00000070 RTC_ALRMBR_fields
0801722c g     O .rodata	00000010 TIM2_DCR_fields
0800d0a4 g     O .rodata	00000050 ADC1_CR_fields
0800bc18 g     F .text	00000000 _fini
080073e8 g     F .text	0000001c CmdW
08008df6 g     F .text	0000000c HAL_PCD_Start
0800bbf4  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0801298c g     O .rodata	00000020 EXTI_EMR2_fields
0800b748 g     F .text	00000012 LSM303DLHC_AccReadID
0801580c g     O .rodata	00000008 RTC_WUTR_fields
080124dc g     O .rodata	00000008 DMA1_CPAR6_fields
08011e3c g     O .rodata	00000008 CRC_INIT_fields
08015624 g     O .rodata	00000088 RTC_ISR_fields
08016c8c g     O .rodata	00000010 TIM1_DCR_fields
08014a0c g     O .rodata	00000038 PWR_CR_fields
080172a4 g     O .rodata	00000030 TIM2_EGR_fields
080003b4 g     F .text	0000000c atexit
080147cc g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
0801302c g     O .rodata	00000060 FPU_registers
08012a8c g     O .rodata	00000100 EXTI_IMR1_fields
08007a94 g     F .text	00000040 _write_r
0800d37c g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
0800d354 g     O .rodata	00000028 ADC1_SQR3_fields
0800bbf4  w    F .text	00000002 DMA1_Channel3_IRQHandler
0801208c g     O .rodata	00000080 DBGMCU_APB1FZ_fields
08003b3c g     F .text	00000010 setlocale
08015ba4 g     O .rodata	00000060 SPI1_CR2_fields
0800cffc g     O .rodata	00000010 ADC1_CALFACT_fields
080154cc g     O .rodata	00000008 RTC_BKP28R_fields
08008a36  w    F .text	00000024 HAL_InitTick
08016b94 g     O .rodata	00000020 TIM1_CCR5_fields
0800b05a g     F .text	0000000e USBD_LL_SetUSBAddress
080142f4 g     O .rodata	00000020 NVIC_IPR12_fields
0801b50c g     O .rodata	00000010 LED_PIN
20000008 g     O .data	00000004 _impure_ptr
08011484 g     O .rodata	00000018 CAN_TDT2R_fields
0800d1d4 g     O .rodata	00000008 ADC1_JDR4_fields
080160a4 g     O .rodata	00000040 TIM15_CR2_fields
08003134 g     F .text	00000140 __sflush_r
080150d4 g     O .rodata	00000060 RCC_CFGR_fields
08008a80  w    F .text	00000010 HAL_IncTick
0801679c g     O .rodata	00000028 TIM17_EGR_fields
0800b00a g     F .text	0000000e USBD_LL_CloseEP
0800bbf4  w    F .text	00000002 ADC4_IRQHandler
08003b30 g     F .text	00000004 __locale_cjk_lang
0801554c g     O .rodata	000000a0 RTC_CR_fields
0800abe0 g     F .text	00000010 USBD_CtlContinueSendData
080125cc g     O .rodata	000000e0 DMA1_ISR_fields
080105cc g     O .rodata	00000100 CAN_F6R1_fields
0800b950 g     F .text	0000001c L3GD20_ReadID
0800bbf4  w    F .text	00000002 WWDG_IRQHandler
08009ec0  w    F .text	00000002 HAL_I2C_MspInit
0801288c g     O .rodata	00000100 EXTI_EMR1_fields
080144b4 g     O .rodata	00000020 NVIC_IPR6_fields
08017194 g     O .rodata	00000010 TIM2_CCR3_fields
08012384 g     O .rodata	00000060 DMA1_CCR6_fields
0801351c g     O .rodata	00000080 GPIOA_MODER_fields
0801484c g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08004a2c g     F .text	00000054 __ulp
080034c4 g     F .text	00000014 __fp_unlock_all
08016c14 g     O .rodata	00000078 TIM1_CR2_fields
080156ac g     O .rodata	00000010 RTC_PRER_fields
0800b068 g     F .text	0000000e USBD_LL_Transmit
0800bbf4  w    F .text	00000002 TIM2_IRQHandler
0800028c g     F .text	00000004 my_Loop
08016364 g     O .rodata	00000020 TIM16_CCER_fields
08008d5c g     F .text	0000009a HAL_PCD_Init
20000958 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801c094 g     O .parsetable	0000000c CmdDecodeE
0800facc g     O .rodata	00000100 CAN_F26R2_fields
080106cc g     O .rodata	00000100 CAN_F6R2_fields
20000000 g     O .data	00000004 myTickCount
0800e3cc g     O .rodata	00000100 CAN_F16R1_fields
080154c4 g     O .rodata	00000008 RTC_BKP27R_fields
08012d5c g     O .rodata	00000010 EXTI_RTSR2_fields
08016414 g     O .rodata	00000028 TIM16_CR2_fields
0801532c g     O .rodata	00000070 RTC_ALRMAR_fields
08016904 g     O .rodata	00000008 TIM1_ARR_fields
0800ab8e g     F .text	00000038 USBD_GetString
0800b3dc g     F .text	00000018 BSP_LED_Toggle
0800f2cc g     O .rodata	00000100 CAN_F22R2_fields
0800f5cc g     O .rodata	00000100 CAN_F24R1_fields
08003b4c g     F .text	00000008 localeconv
0800af18 g     F .text	0000000c HAL_PCD_SetupStageCallback
080103cc g     O .rodata	00000100 CAN_F5R1_fields
0800bbf4  w    F .text	00000002 COMP7_IRQHandler
08003b54 g     F .text	0000005c __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
08007424 g     F .text	00000108 parse
080154dc g     O .rodata	00000008 RTC_BKP2R_fields
0800bbf4  w    F .text	00000002 COMP1_2_3_IRQHandler
0800e5cc g     O .rodata	00000100 CAN_F17R1_fields
0800bbf4  w    F .text	00000002 EXTI1_IRQHandler
080175b4 g     O .rodata	00000060 TIM8_BDTR_fields
08006da4 g     F .text	00000012 .hidden __aeabi_dcmpeq
0801885c g     O .rodata	00000050 USB_FS_USB_EP1R_fields
0800cf0c g     O .rodata	000000b0 ADC1_2_CSR_fields
08012f5c g     O .rodata	00000008 FPU_FPCAR_fields
20000ac0 g       .data	00000000 _edata
08017aec g     O .rodata	000001a0 TIM8_registers
080154e4 g     O .rodata	00000008 RTC_BKP30R_fields
08016684 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
080163dc g     O .rodata	00000038 TIM16_CR1_fields
0800e6cc g     O .rodata	00000100 CAN_F17R2_fields
0801606c g     O .rodata	00000038 TIM15_CR1_fields
08006364 g     F .text	0000009e __fputwc
08007e0c g     F .text	0000026c CmdDecode
0801618c g     O .rodata	00000008 TIM15_RCR_fields
08013a4c g     O .rodata	00000080 GPIOB_IDR_fields
08016b24 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
080179bc g     O .rodata	00000008 TIM8_DMAR_fields
08013194 g     O .rodata	00000080 Flash_registers
0801643c g     O .rodata	00000010 TIM16_DCR_fields
08014ffc g     O .rodata	00000040 RCC_APB2RSTR_fields
08007658 g     F .text	00000028 fetch_uint32_arg
0801541c g     O .rodata	00000010 RTC_ALRMBSSR_fields
08015e94 g     O .rodata	00000040 SYSCFG_RCR_fields
0800bbf4  w    F .text	00000002 USART2_IRQHandler
080166dc g     O .rodata	00000038 TIM17_CR1_fields
0801456c g     O .rodata	00000260 NVIC_registers
0800bbf4  w    F .text	00000002 COMP4_5_6_IRQHandler
0800514c g     F .text	0000003c __swrite
080080e0 g     F .text	000005f0 HAL_RCC_OscConfig
200008c0 g     O .data	00000004 __malloc_trim_threshold
080166c4 g     O .rodata	00000008 TIM17_CCR1_fields
080140dc g     O .rodata	00000028 I2C1_TIMINGR_fields
080186e4 g     O .rodata	00000008 USB_FS_BTABLE_fields
080113b4 g     O .rodata	00000020 CAN_TDH1R_fields
08003b28 g     F .text	00000008 __locale_msgcharset
08013e84 g     O .rodata	000000a8 I2C1_CR1_fields
08005530 g     F .text	00000c00 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800abc6 g     F .text	0000001a USBD_CtlSendData
0800e1cc g     O .rodata	00000100 CAN_F15R1_fields
0800cefc g     O .rodata	00000010 ADC1_2_CDR_fields
08003a80 g     F .text	00000052 _fwalk_reent
08004924 g     F .text	00000108 __mdiff
0801751c g     O .rodata	00000008 TIM6_PSC_fields
08006e34 g     F .text	0000004e .hidden __aeabi_d2iz
0801545c g     O .rodata	00000008 RTC_BKP15R_fields
08014a6c g     O .rodata	00000020 PWR_registers
0801316c g     O .rodata	00000020 Flash_SR_fields
0800d1c4 g     O .rodata	00000008 ADC1_JDR2_fields
0801548c g     O .rodata	00000008 RTC_BKP20R_fields
20000004 g     O .data	00000004 __ctype_ptr__
080124a4 g     O .rodata	00000008 DMA1_CNDTR6_fields
0800eacc g     O .rodata	00000100 CAN_F19R2_fields
0800bbf4  w    F .text	00000002 I2C2_ER_IRQHandler
0800cebc g     O .rodata	00000040 ADC1_2_CCR_fields
0800bbf4  w    F .text	00000002 DMA1_Channel2_IRQHandler
08011fac g     O .rodata	000000e0 DAC_registers
0801361c g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801773c g     O .rodata	00000030 TIM8_CCMR2_Input_fields
080034a4 g     F .text	00000002 __sfp_lock_release
0801661c g     O .rodata	00000048 TIM17_BDTR_fields
08011284 g     O .rodata	00000020 CAN_RDH1R_fields
08016ff4 g     O .rodata	00000060 TIM2_CCER_fields
08011f6c g     O .rodata	00000010 DAC_DHR8RD_fields
08007680 g     F .text	00000020 fetch_string_arg
0800b338 g     F .text	0000006c BSP_LED_Init
08013b54 g     O .rodata	00000080 GPIOB_MODER_fields
0801c088 g     O .parsetable	0000000c CmdDumpE
0801b488 g     O .rodata	00000010 PLLMULFactorTable
08018434 g     O .rodata	00000098 USART1_CR3_fields
08007c60 g     F .text	0000004c DecodeField
08011354 g     O .rodata	00000020 CAN_RI0R_fields
0800bbf4  w    F .text	00000002 TIM8_BRK_IRQHandler
0801210c g     O .rodata	00000020 DBGMCU_APB2FZ_fields
08016d74 g     O .rodata	00000008 TIM1_PSC_fields
08007d54 g     F .text	00000054 DecodePrintPeripherals
08015f94 g     O .rodata	00000038 TIM15_CCER_fields
0800c0bc g     O .rodata	00000101 _ctype_
08012474 g     O .rodata	00000008 DMA1_CMAR7_fields
08007190  w    F .text	00000002 .hidden __aeabi_idiv0
08006e08 g     F .text	0000002c .hidden __unorddf2
08011374 g     O .rodata	00000020 CAN_RI1R_fields
08015dec g     O .rodata	00000028 SYSCFG_CFGR2_fields
08015134 g     O .rodata	00000088 RCC_CIR_fields
0801c0c4 g     O .parsetable	0000000c CmdStatsE
0800bbf4  w    F .text	00000002 FLASH_IRQHandler
0801614c g     O .rodata	00000008 TIM15_DMAR_fields
08012a7c g     O .rodata	00000010 EXTI_FTSR2_fields
0800d8cc g     O .rodata	00000100 CAN_F10R2_fields
08014454 g     O .rodata	00000020 NVIC_IPR3_fields
0801247c g     O .rodata	00000008 DMA1_CNDTR1_fields
080140b4 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
08015f4c g     O .rodata	00000048 TIM15_BDTR_fields
0800b0a8 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001370 g     O .bss	00000100 USBD_StrDesc
080079ac g     F .text	000000e8 TerminalOutputBufferWrite
0800bbf4  w    F .text	00000002 BusFault_Handler
0800bbf4  w    F .text	00000002 USART1_IRQHandler
08011b54 g     O .rodata	00000050 COMP_COMP1_CSR_fields
080179c4 g     O .rodata	00000048 TIM8_EGR_fields
08003bb0 g     F .text	00000088 __smakebuf_r
080161b4 g     O .rodata	00000040 TIM15_SR_fields
08000840 g     F .text	000000dc strlen
08014fbc g     O .rodata	00000040 RCC_APB2ENR_fields
0800bbf4  w    F .text	00000002 SPI3_IRQHandler
08006d94 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08006cf8 g     F .text	0000008a .hidden __gedf2
20001ce0 g     O .bss	0000003c TimHandle
08012264 g     O .rodata	00000060 DMA1_CCR3_fields
08016bcc g     O .rodata	00000048 TIM1_CR1_fields
080141d4 g     O .rodata	00000018 IWDG_SR_fields
080189ec g     O .rodata	00000050 USB_FS_USB_EP6R_fields
08016504 g     O .rodata	00000110 TIM16_registers
08009c32  w    F .text	00000002 HAL_PCDEx_SetConnectionState
08016804 g     O .rodata	00000100 TIM17_registers
08009f82 g     F .text	00000132 HAL_I2C_Mem_Write
0801696c g     O .rodata	00000098 TIM1_CCER_fields
200008c4 g     O .data	00000004 __wctomb
080100cc g     O .rodata	00000100 CAN_F3R2_fields
08011e9c g     O .rodata	00000080 DAC_CR_fields
0800bbf4  w    F .text	00000002 I2C1_ER_IRQHandler
0800551c g     F .text	00000012 __sprint_r
08018a3c g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08013fdc g     O .rodata	00000088 I2C1_ISR_fields
08016ac4 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
080144f4 g     O .rodata	00000020 NVIC_IPR8_fields
0801b498 g     O .rodata	00000010 PredivFactorTable
08017f1c g     O .rodata	00000008 TSC_IOG3CR_fields
0800682c g     F .text	0000003a .hidden __aeabi_f2d
0800b076 g     F .text	0000000e USBD_LL_PrepareReceive
0801248c g     O .rodata	00000008 DMA1_CNDTR3_fields
0800b96c g     F .text	0000002c L3GD20_RebootCmd
0800fbcc g     O .rodata	00000100 CAN_F27R1_fields
08017cfc g     O .rodata	00000010 TSC_IER_fields
08010eac g     O .rodata	000000e0 CAN_FFA1R_fields
08017864 g     O .rodata	00000010 TIM8_CNT_fields
08006534 g     F .text	00000030 _wctomb_r
0800cff4 g     O .rodata	00000008 ADC1_AWD3CR_fields
080154b4 g     O .rodata	00000008 RTC_BKP25R_fields
08017e0c g     O .rodata	00000100 TSC_IOCCR_fields
080148cc g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800ae1c g     F .text	0000000c USBD_CDC_SetRxBuffer
08012d6c g     O .rodata	000000d0 EXTI_SWIER1_fields
0800656c g     F .text	0000027a .hidden __subdf3
08016314 g     O .rodata	00000008 TIM16_ARR_fields
08012154 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08000ae8 g     F .text	000014e4 _vfprintf_r
08004610 g     F .text	0000005e __lo0bits
08012b8c g     O .rodata	00000020 EXTI_IMR2_fields
08017514 g     O .rodata	00000008 TIM6_EGR_fields
08015c6c g     O .rodata	00000008 SPI1_RXCRCR_fields
080140a4 g     O .rodata	00000008 I2C1_PECR_fields
08009334 g     F .text	00000104 HAL_PCD_EP_Receive
0800d244 g     O .rodata	00000018 ADC1_OFR3_fields
08011cf4 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08015484 g     O .rodata	00000008 RTC_BKP1R_fields
080176dc g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08013dd4 g     O .rodata	000000b0 GPIOB_registers
08007cac g     F .text	0000005c DecodeRegister
08017a2c g     O .rodata	00000048 TIM8_SMCR_fields
08007bbc g     F .text	00000050 DecodeReadRegister
080111cc g     O .rodata	00000050 CAN_MCR_fields
080064c0 g     F .text	00000058 wcrtomb
08011f7c g     O .rodata	00000008 DAC_DOR1_fields
08007934 g     F .text	0000004c TerminalRead
08017c8c g     O .rodata	00000060 TSC_CR_fields
0801729c g     O .rodata	00000008 TIM2_DMAR_fields
080176ac g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800b89e g     F .text	0000001e LSM303DLHC_AccIT1Enable
0800dbcc g     O .rodata	00000100 CAN_F12R1_fields
0800bbf4  w    F .text	00000002 USBWakeUp_IRQHandler
080164c4 g     O .rodata	00000008 TIM16_PSC_fields
080185ec g     O .rodata	00000008 USART1_RDR_fields
0801503c g     O .rodata	00000038 RCC_BDCR_fields
08001fcc g     F .text	00000018 vfprintf
0801673c g     O .rodata	00000010 TIM17_DCR_fields
08014554 g     O .rodata	00000008 NVIC_ISPR1_fields
08014284 g     O .rodata	00000008 NVIC_ICPR2_fields
0801c064 g     O .parsetable	0000000c CmdAccelE
0800f0cc g     O .rodata	00000100 CAN_F21R2_fields
0800ae0c g     F .text	00000010 USBD_CDC_SetTxBuffer
0800642c g     F .text	00000040 fputwc
08015ed4 g     O .rodata	00000070 SYSCFG_registers
0801494c g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
08003c48 g     F .text	00000010 free
080034a8 g     F .text	00000002 __sinit_lock_acquire
0800bbf4  w    F .text	00000002 DMA2_Channel3_IRQHandler
080129ac g     O .rodata	000000d0 EXTI_FTSR1_fields
0800b170 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
080107cc g     O .rodata	00000100 CAN_F7R1_fields
080044b4 g     F .text	00000080 __multadd
0800a6da g     F .text	0000005a USBD_LL_SetupStage
080044a0 g     F .text	00000012 _Bfree
08007290 g     F .text	0000000a Error_Handler
08018b74 g     O .rodata	00000010 WWDG_CR_fields
0800bbf4  w    F .text	00000002 EXTI2_TSC_IRQHandler
08014564 g     O .rodata	00000008 NVIC_STIR_fields
0800bbf4  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
080177cc g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <deregister_tm_clones+0x18>)
 80001c4:	1a1b      	subs	r3, r3, r0
 80001c6:	2b06      	cmp	r3, #6
 80001c8:	d902      	bls.n	80001d0 <deregister_tm_clones+0x10>
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <deregister_tm_clones+0x1c>)
 80001cc:	b103      	cbz	r3, 80001d0 <deregister_tm_clones+0x10>
 80001ce:	4718      	bx	r3
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000ac3 	.word	0x20000ac3
 80001d8:	20000ac0 	.word	0x20000ac0
 80001dc:	00000000 	.word	0x00000000

080001e0 <register_tm_clones>:
 80001e0:	4905      	ldr	r1, [pc, #20]	; (80001f8 <register_tm_clones+0x18>)
 80001e2:	4806      	ldr	r0, [pc, #24]	; (80001fc <register_tm_clones+0x1c>)
 80001e4:	1a09      	subs	r1, r1, r0
 80001e6:	1089      	asrs	r1, r1, #2
 80001e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001ec:	1049      	asrs	r1, r1, #1
 80001ee:	d002      	beq.n	80001f6 <register_tm_clones+0x16>
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <register_tm_clones+0x20>)
 80001f2:	b103      	cbz	r3, 80001f6 <register_tm_clones+0x16>
 80001f4:	4718      	bx	r3
 80001f6:	4770      	bx	lr
 80001f8:	20000ac0 	.word	0x20000ac0
 80001fc:	20000ac0 	.word	0x20000ac0
 8000200:	00000000 	.word	0x00000000

08000204 <__do_global_dtors_aux>:
 8000204:	b510      	push	{r4, lr}
 8000206:	4c06      	ldr	r4, [pc, #24]	; (8000220 <__do_global_dtors_aux+0x1c>)
 8000208:	7823      	ldrb	r3, [r4, #0]
 800020a:	b943      	cbnz	r3, 800021e <__do_global_dtors_aux+0x1a>
 800020c:	f7ff ffd8 	bl	80001c0 <deregister_tm_clones>
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x20>)
 8000212:	b113      	cbz	r3, 800021a <__do_global_dtors_aux+0x16>
 8000214:	4804      	ldr	r0, [pc, #16]	; (8000228 <__do_global_dtors_aux+0x24>)
 8000216:	f3af 8000 	nop.w
 800021a:	2301      	movs	r3, #1
 800021c:	7023      	strb	r3, [r4, #0]
 800021e:	bd10      	pop	{r4, pc}
 8000220:	20000ac0 	.word	0x20000ac0
 8000224:	00000000 	.word	0x00000000
 8000228:	0800bc0c 	.word	0x0800bc0c

0800022c <frame_dummy>:
 800022c:	b508      	push	{r3, lr}
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <frame_dummy+0x24>)
 8000230:	b11b      	cbz	r3, 800023a <frame_dummy+0xe>
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <frame_dummy+0x28>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <frame_dummy+0x2c>)
 8000236:	f3af 8000 	nop.w
 800023a:	4808      	ldr	r0, [pc, #32]	; (800025c <frame_dummy+0x30>)
 800023c:	6803      	ldr	r3, [r0, #0]
 800023e:	b913      	cbnz	r3, 8000246 <frame_dummy+0x1a>
 8000240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000244:	e7cc      	b.n	80001e0 <register_tm_clones>
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <frame_dummy+0x34>)
 8000248:	2b00      	cmp	r3, #0
 800024a:	d0f9      	beq.n	8000240 <frame_dummy+0x14>
 800024c:	4798      	blx	r3
 800024e:	e7f7      	b.n	8000240 <frame_dummy+0x14>
 8000250:	00000000 	.word	0x00000000
 8000254:	20000ac4 	.word	0x20000ac4
 8000258:	0800bc0c 	.word	0x0800bc0c
 800025c:	20000ac0 	.word	0x20000ac0
 8000260:	00000000 	.word	0x00000000

08000264 <mytest>:
@ 

@ Here is the actual function
mytest:

    push {r4-r7, lr}                @ Put aside registers we want to restore later
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}

    mov  r0, #1                     @ r0 holds our argument for the LED toggle function
 8000266:	f04f 0001 	mov.w	r0, #1
                                    @ So pass it a value

    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
 800026a:	f00b f8b7 	bl	800b3dc <BSP_LED_Toggle>
    
    ldr  r1, =myTickCount
 800026e:	4909      	ldr	r1, [pc, #36]	; (8000294 <my_Init+0x4>)
    ldr  r0, [r1]
 8000270:	6808      	ldr	r0, [r1, #0]

    pop  {r4-r7, lr}                @ Bring all the register values back
 8000272:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    bx lr                           @ Return (Branch eXchange) to the address held in the link register (lr) 
 8000276:	4770      	bx	lr

08000278 <my_Tick>:
@@ Declaration : void my_Tick( void )
@@ Uses nothing

my_Tick:
    
    push {lr}
 8000278:	b500      	push	{lr}

    ldr  r1, =myTickCount   @@ Address of myTickCount stored in r1
 800027a:	4906      	ldr	r1, [pc, #24]	; (8000294 <my_Init+0x4>)
    ldr  r0, [r1]           @@ Load r0 with the address pointed at by r1 (myTickCount address)
 800027c:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1         @@ Increment r0
 800027e:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]           @@ Store the current r0 value back to the address pointed at by r1
 8000282:	6008      	str	r0, [r1, #0]

    pop {lr}
 8000284:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr                  @@ Return to the address stored in lr
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop

0800028c <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 800028c:	b500      	push	{lr}
    pop  {pc}
 800028e:	bd00      	pop	{pc}

08000290 <my_Init>:
    .type   my_Init, %function   @@ - symbol type (not req)

@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    bx lr
 8000290:	4770      	bx	lr
 8000292:	0000      	.short	0x0000
    ldr  r1, =myTickCount
 8000294:	20000000 	.word	0x20000000

08000298 <lzTilt>:
@
@ Input: r0, r1, r2 (i.e. r0 holds delay value, r1 holds the led pattern, r2 holds the target led index)
@ Returns: r0

lzTilt:
    push {r4-r7, lr}                  @ Put aside registers we want to restore later
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}

    mov   r6, r0                      @ r6 holds delay
 800029a:	4606      	mov	r6, r0
    mov   r7, r1                      @ r7 holds the target led index
 800029c:	460f      	mov	r7, r1

    mov   r0, #LOCATION               @ move the variables in r0 and r1 to get the accelerometer x-axis value
 800029e:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov   r1, #LSM303DLHC_OUT_X_H_A
 80002a2:	f04f 0129 	mov.w	r1, #41	; 0x29
    bl    COMPASSACCELERO_IO_Read
 80002a6:	f00b f9d5 	bl	800b654 <COMPASSACCELERO_IO_Read>

    sxtb  r4, r0                      @ extend the x-axis value
 80002aa:	b244      	sxtb	r4, r0


    mov   r0, #LOCATION               @ move the variables in r0 and r1 to get the accelerometer y-axis value
 80002ac:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov   r1, #LSM303DLHC_OUT_Y_H_A
 80002b0:	f04f 012b 	mov.w	r1, #43	; 0x2b
    bl    COMPASSACCELERO_IO_Read
 80002b4:	f00b f9ce 	bl	800b654 <COMPASSACCELERO_IO_Read>

    sxtb  r5, r0                      @ extend the x-axis value
 80002b8:	b245      	sxtb	r5, r0

    mov   r0, r4                      @ x value
 80002ba:	4620      	mov	r0, r4
    mov   r1, r5                      @ y value
 80002bc:	4629      	mov	r1, r5
    mov   r2, r6                      @ delay value
 80002be:	4632      	mov	r2, r6
    mov   r3, r7                      @ target led index
 80002c0:	463b      	mov	r3, r7
    bl    get_LED_index
 80002c2:	f000 f803 	bl	80002cc <get_LED_index>



    pop   {r4-r7, lr}                 @ Restore registers
 80002c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    bx    lr
 80002ca:	4770      	bx	lr

080002cc <get_LED_index>:
@
@ Input: r0, r1, r2, r3 (i.e. x value, y value, delay value, target led index)
@ Returns:

get_LED_index:
    push  {r4-r8, lr}
 80002cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    mov   r4, r0      @ move the arguments to registers r4-r8
 80002d0:	4604      	mov	r4, r0
    mov   r5, r1
 80002d2:	460d      	mov	r5, r1
    mov   r7, r2
 80002d4:	4617      	mov	r7, r2
    mov   r8, r3
 80002d6:	4698      	mov	r8, r3

    cmp   r4, #2      @ if x value is greater than 2, one of the northern leds should be turned on
 80002d8:	2c02      	cmp	r4, #2
    bgt   Top
 80002da:	dc0b      	bgt.n	80002f4 <Top>

    cmp   r4, #-2     @ if x value is less than -2, one of the southern leds should be turned on
 80002dc:	f114 0f02 	cmn.w	r4, #2
    blt   Bottom
 80002e0:	db17      	blt.n	8000312 <Bottom>

    cmp   r5, #2      @ if y value is greater than 2, one of the western leds should be turned on,
 80002e2:	2d02      	cmp	r5, #2
    bgt   W
 80002e4:	dc03      	bgt.n	80002ee <W>
    b     E           @ eastern otherwise
 80002e6:	e7ff      	b.n	80002e8 <E>

080002e8 <E>:

    E:
      mov   r6, #4    @ east = led 4
 80002e8:	f04f 0604 	mov.w	r6, #4
      b     Lights
 80002ec:	e020      	b.n	8000330 <Lights>

080002ee <W>:

    W:
      mov   r6, #3    @ west = led 3
 80002ee:	f04f 0603 	mov.w	r6, #3
      b     Lights
 80002f2:	e01d      	b.n	8000330 <Lights>

080002f4 <Top>:

    Top:
      cmp   r5, #10   @ if y value is greater than 10, while x value is greater than 2,
 80002f4:	2d0a      	cmp	r5, #10
      bgt   NW        @ northwestern led should be turned on
 80002f6:	dc03      	bgt.n	8000300 <NW>

      cmp   r5, #-10  @ northeastern otherwise
 80002f8:	f115 0f0a 	cmn.w	r5, #10
      blt   NE
 80002fc:	db03      	blt.n	8000306 <NE>
      b     N         @ northern led if y value is in the range between -10 and 10
 80002fe:	e005      	b.n	800030c <N>

08000300 <NW>:

      NW:
        mov   r6, #1  @ NW = led 1
 8000300:	f04f 0601 	mov.w	r6, #1
        b     Lights
 8000304:	e014      	b.n	8000330 <Lights>

08000306 <NE>:

      NE:
        mov   r6, #2  @ NE = led 2
 8000306:	f04f 0602 	mov.w	r6, #2
        b     Lights
 800030a:	e011      	b.n	8000330 <Lights>

0800030c <N>:

      N:
        mov   r6, #0  @ N = led 0
 800030c:	f04f 0600 	mov.w	r6, #0
        b     Lights
 8000310:	e00e      	b.n	8000330 <Lights>

08000312 <Bottom>:

    Bottom:
      cmp   r5, #10   @ if y value is greater than 10, while x value is less than 2,
 8000312:	2d0a      	cmp	r5, #10
      bgt   SW        @ southwestern led will be turned on
 8000314:	dc03      	bgt.n	800031e <SW>
      cmp   r5, #-10  @ southeastern otherwise
 8000316:	f115 0f0a 	cmn.w	r5, #10
      blt   SE
 800031a:	db03      	blt.n	8000324 <SE>
      b     S
 800031c:	e005      	b.n	800032a <S>

0800031e <SW>:

      SW:
        mov   r6, #5  @ SW = led 5
 800031e:	f04f 0605 	mov.w	r6, #5
        b     Lights
 8000322:	e005      	b.n	8000330 <Lights>

08000324 <SE>:

      SE:
        mov   r6, #6  @ SE = led 6
 8000324:	f04f 0606 	mov.w	r6, #6
        b     Lights
 8000328:	e002      	b.n	8000330 <Lights>

0800032a <S>:

      S:
        mov   r6, #7  @ S = led 7
 800032a:	f04f 0607 	mov.w	r6, #7
        b     Lights
 800032e:	e7ff      	b.n	8000330 <Lights>

08000330 <Lights>:

    Lights:
      mov   r0, r6            @ call the function to lit up the appropriate led
 8000330:	4630      	mov	r0, r6
      bl    BSP_LED_Toggle
 8000332:	f00b f853 	bl	800b3dc <BSP_LED_Toggle>

      mov   r0, r7            @ make a delay
 8000336:	4638      	mov	r0, r7
      bl    HAL_Delay
 8000338:	f008 fbb0 	bl	8008a9c <HAL_Delay>

      mov   r0, r6            @ turn off the led
 800033c:	4630      	mov	r0, r6
      bl    BSP_LED_Toggle
 800033e:	f00b f84d 	bl	800b3dc <BSP_LED_Toggle>


      cmp   r6, r8            @ if the led index matches the target led, call the win function
 8000342:	4546      	cmp	r6, r8
      bne   c
 8000344:	d103      	bne.n	800034e <c>
      bl    win
 8000346:	f000 f805 	bl	8000354 <win>
      mov   r0, #1            @ this function will return 1 if the user wins
 800034a:	f04f 0001 	mov.w	r0, #1

0800034e <c>:

    c:
    pop   {r4-r8, lr}
 800034e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bx    lr
 8000352:	4770      	bx	lr

08000354 <win>:
@
@ Input:    none
@ Returns:  none

win:
    push  {r4-r5, lr}             @ preserve the values
 8000354:	b530      	push	{r4, r5, lr}

    mov   r5, #4                  @ put the counter value into r5
 8000356:	f04f 0504 	mov.w	r5, #4

0800035a <counter>:

    counter:
        mov   r4, #0                  @ put the first led index into r4
 800035a:	f04f 0400 	mov.w	r4, #0

0800035e <blink_all_leds>:
        blink_all_leds:
            mov   r0, r4
 800035e:	4620      	mov	r0, r4
            bl    BSP_LED_Toggle      @ toggle every led
 8000360:	f00b f83c 	bl	800b3dc <BSP_LED_Toggle>
            add   r4, r4, #1
 8000364:	f104 0401 	add.w	r4, r4, #1
            cmp   r4, #8              @ if at index 8, exit the loop
 8000368:	2c08      	cmp	r4, #8
            blt   blink_all_leds
 800036a:	dbf8      	blt.n	800035e <blink_all_leds>

        ldr     r0, =#0x1f4
 800036c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
        bl      HAL_Delay
 8000370:	f008 fb94 	bl	8008a9c <HAL_Delay>

        subs    r5, r5, #1            @ loop 4 times
 8000374:	3d01      	subs	r5, #1
        bgt     counter
 8000376:	dcf0      	bgt.n	800035a <counter>


    mov   r0, #0
 8000378:	f04f 0000 	mov.w	r0, #0
    pop   {r4-r5, lr}             @ restore the preserved values
 800037c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    bx    lr                      @ return
 8000380:	4770      	bx	lr

08000382 <lose>:
@
@ Input: r0 (i.e. r0 contains the led index)
@ Returns: none

lose:
    push  {r4, lr}          @ preserve values
 8000382:	b510      	push	{r4, lr}
    mov   r4, r0            @ preserve target led index in r4
 8000384:	4604      	mov	r4, r0

    bl    BSP_LED_Toggle    @ toggle the target led
 8000386:	f00b f829 	bl	800b3dc <BSP_LED_Toggle>

    mov   r0, #0x1f4
 800038a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    bl    HAL_Delay
 800038e:	f008 fb85 	bl	8008a9c <HAL_Delay>

    mov   r0, r4
 8000392:	4620      	mov	r0, r4
    bl    BSP_LED_Toggle    @ toggle the target led to turn it off
 8000394:	f00b f822 	bl	800b3dc <BSP_LED_Toggle>

    mov   r0, #0
 8000398:	f04f 0000 	mov.w	r0, #0
    pop   {r4, lr}          @ restore the preserved values
 800039c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bx    lr                @ return
 80003a0:	4770      	bx	lr

080003a2 <busy_delay>:
@ Input: r0 (i.e. r0 holds number of cycles to delay)
@ Returns: r0

busy_delay:

  push {r4}
 80003a2:	b410      	push	{r4}

  mov r4, r0
 80003a4:	4604      	mov	r4, r0

080003a6 <delay_loop>:

  delay_loop:

    subs r4, r4, #1
 80003a6:	3c01      	subs	r4, #1

    bgt delay_loop
 80003a8:	dcfd      	bgt.n	80003a6 <delay_loop>

  mov r0, #0                      @ Return zero (always successful)
 80003aa:	f04f 0000 	mov.w	r0, #0

  pop {r4}
 80003ae:	bc10      	pop	{r4}

  bx lr                           @ Return (Branch eXchange) to the address in the link register (lr)
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <atexit>:
 80003b4:	2300      	movs	r3, #0
 80003b6:	4601      	mov	r1, r0
 80003b8:	461a      	mov	r2, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 beac 	b.w	8002118 <__register_exitproc>

080003c0 <__errno>:
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <__errno+0x8>)
 80003c2:	6818      	ldr	r0, [r3, #0]
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	20000008 	.word	0x20000008

080003cc <__libc_fini_array>:
 80003cc:	b538      	push	{r3, r4, r5, lr}
 80003ce:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <__libc_fini_array+0x2c>)
 80003d0:	4d0a      	ldr	r5, [pc, #40]	; (80003fc <__libc_fini_array+0x30>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	d00a      	beq.n	80003ee <__libc_fini_array+0x22>
 80003d8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80003dc:	3b01      	subs	r3, #1
 80003de:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80003e2:	3c01      	subs	r4, #1
 80003e4:	f855 3904 	ldr.w	r3, [r5], #-4
 80003e8:	4798      	blx	r3
 80003ea:	2c00      	cmp	r4, #0
 80003ec:	d1f9      	bne.n	80003e2 <__libc_fini_array+0x16>
 80003ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80003f2:	f00b bc11 	b.w	800bc18 <_fini>
 80003f6:	bf00      	nop
 80003f8:	0801b598 	.word	0x0801b598
 80003fc:	0801b594 	.word	0x0801b594

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4e0f      	ldr	r6, [pc, #60]	; (8000440 <__libc_init_array+0x40>)
 8000404:	4d0f      	ldr	r5, [pc, #60]	; (8000444 <__libc_init_array+0x44>)
 8000406:	1b76      	subs	r6, r6, r5
 8000408:	10b6      	asrs	r6, r6, #2
 800040a:	bf18      	it	ne
 800040c:	2400      	movne	r4, #0
 800040e:	d005      	beq.n	800041c <__libc_init_array+0x1c>
 8000410:	3401      	adds	r4, #1
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	42a6      	cmp	r6, r4
 800041a:	d1f9      	bne.n	8000410 <__libc_init_array+0x10>
 800041c:	4e0a      	ldr	r6, [pc, #40]	; (8000448 <__libc_init_array+0x48>)
 800041e:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x4c>)
 8000420:	1b76      	subs	r6, r6, r5
 8000422:	f00b fbf3 	bl	800bc0c <_init>
 8000426:	10b6      	asrs	r6, r6, #2
 8000428:	bf18      	it	ne
 800042a:	2400      	movne	r4, #0
 800042c:	d006      	beq.n	800043c <__libc_init_array+0x3c>
 800042e:	3401      	adds	r4, #1
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	42a6      	cmp	r6, r4
 8000438:	d1f9      	bne.n	800042e <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	bd70      	pop	{r4, r5, r6, pc}
 800043e:	bf00      	nop
 8000440:	0801b58c 	.word	0x0801b58c
 8000444:	0801b58c 	.word	0x0801b58c
 8000448:	0801b594 	.word	0x0801b594
 800044c:	0801b58c 	.word	0x0801b58c

08000450 <memset>:
 8000450:	b470      	push	{r4, r5, r6}
 8000452:	0786      	lsls	r6, r0, #30
 8000454:	d046      	beq.n	80004e4 <memset+0x94>
 8000456:	1e54      	subs	r4, r2, #1
 8000458:	2a00      	cmp	r2, #0
 800045a:	d041      	beq.n	80004e0 <memset+0x90>
 800045c:	b2ca      	uxtb	r2, r1
 800045e:	4603      	mov	r3, r0
 8000460:	e002      	b.n	8000468 <memset+0x18>
 8000462:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000466:	d33b      	bcc.n	80004e0 <memset+0x90>
 8000468:	f803 2b01 	strb.w	r2, [r3], #1
 800046c:	079d      	lsls	r5, r3, #30
 800046e:	d1f8      	bne.n	8000462 <memset+0x12>
 8000470:	2c03      	cmp	r4, #3
 8000472:	d92e      	bls.n	80004d2 <memset+0x82>
 8000474:	b2cd      	uxtb	r5, r1
 8000476:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800047a:	2c0f      	cmp	r4, #15
 800047c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000480:	d919      	bls.n	80004b6 <memset+0x66>
 8000482:	f103 0210 	add.w	r2, r3, #16
 8000486:	4626      	mov	r6, r4
 8000488:	3e10      	subs	r6, #16
 800048a:	2e0f      	cmp	r6, #15
 800048c:	f842 5c10 	str.w	r5, [r2, #-16]
 8000490:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000494:	f842 5c08 	str.w	r5, [r2, #-8]
 8000498:	f842 5c04 	str.w	r5, [r2, #-4]
 800049c:	f102 0210 	add.w	r2, r2, #16
 80004a0:	d8f2      	bhi.n	8000488 <memset+0x38>
 80004a2:	f1a4 0210 	sub.w	r2, r4, #16
 80004a6:	f022 020f 	bic.w	r2, r2, #15
 80004aa:	f004 040f 	and.w	r4, r4, #15
 80004ae:	3210      	adds	r2, #16
 80004b0:	2c03      	cmp	r4, #3
 80004b2:	4413      	add	r3, r2
 80004b4:	d90d      	bls.n	80004d2 <memset+0x82>
 80004b6:	461e      	mov	r6, r3
 80004b8:	4622      	mov	r2, r4
 80004ba:	3a04      	subs	r2, #4
 80004bc:	2a03      	cmp	r2, #3
 80004be:	f846 5b04 	str.w	r5, [r6], #4
 80004c2:	d8fa      	bhi.n	80004ba <memset+0x6a>
 80004c4:	1f22      	subs	r2, r4, #4
 80004c6:	f022 0203 	bic.w	r2, r2, #3
 80004ca:	3204      	adds	r2, #4
 80004cc:	4413      	add	r3, r2
 80004ce:	f004 0403 	and.w	r4, r4, #3
 80004d2:	b12c      	cbz	r4, 80004e0 <memset+0x90>
 80004d4:	b2c9      	uxtb	r1, r1
 80004d6:	441c      	add	r4, r3
 80004d8:	f803 1b01 	strb.w	r1, [r3], #1
 80004dc:	429c      	cmp	r4, r3
 80004de:	d1fb      	bne.n	80004d8 <memset+0x88>
 80004e0:	bc70      	pop	{r4, r5, r6}
 80004e2:	4770      	bx	lr
 80004e4:	4614      	mov	r4, r2
 80004e6:	4603      	mov	r3, r0
 80004e8:	e7c2      	b.n	8000470 <memset+0x20>
 80004ea:	bf00      	nop

080004ec <_printf_r>:
 80004ec:	b40e      	push	{r1, r2, r3}
 80004ee:	b500      	push	{lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	ab03      	add	r3, sp, #12
 80004f4:	6881      	ldr	r1, [r0, #8]
 80004f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	f000 faf4 	bl	8000ae8 <_vfprintf_r>
 8000500:	b002      	add	sp, #8
 8000502:	f85d eb04 	ldr.w	lr, [sp], #4
 8000506:	b003      	add	sp, #12
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <printf>:
 800050c:	b40f      	push	{r0, r1, r2, r3}
 800050e:	b500      	push	{lr}
 8000510:	4907      	ldr	r1, [pc, #28]	; (8000530 <printf+0x24>)
 8000512:	b083      	sub	sp, #12
 8000514:	ab04      	add	r3, sp, #16
 8000516:	6808      	ldr	r0, [r1, #0]
 8000518:	f853 2b04 	ldr.w	r2, [r3], #4
 800051c:	6881      	ldr	r1, [r0, #8]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	f000 fae2 	bl	8000ae8 <_vfprintf_r>
 8000524:	b003      	add	sp, #12
 8000526:	f85d eb04 	ldr.w	lr, [sp], #4
 800052a:	b004      	add	sp, #16
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000008 	.word	0x20000008

08000534 <_putchar_r>:
 8000534:	6882      	ldr	r2, [r0, #8]
 8000536:	f004 bc07 	b.w	8004d48 <_putc_r>
 800053a:	bf00      	nop

0800053c <putchar>:
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <putchar+0x10>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4601      	mov	r1, r0
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	4618      	mov	r0, r3
 8000546:	f004 bbff 	b.w	8004d48 <_putc_r>
 800054a:	bf00      	nop
 800054c:	20000008 	.word	0x20000008

08000550 <_puts_r>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	4605      	mov	r5, r0
 8000554:	b089      	sub	sp, #36	; 0x24
 8000556:	4608      	mov	r0, r1
 8000558:	460c      	mov	r4, r1
 800055a:	f000 f971 	bl	8000840 <strlen>
 800055e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000560:	4f14      	ldr	r7, [pc, #80]	; (80005b4 <_puts_r+0x64>)
 8000562:	9404      	str	r4, [sp, #16]
 8000564:	2601      	movs	r6, #1
 8000566:	1c44      	adds	r4, r0, #1
 8000568:	a904      	add	r1, sp, #16
 800056a:	2202      	movs	r2, #2
 800056c:	9403      	str	r4, [sp, #12]
 800056e:	9005      	str	r0, [sp, #20]
 8000570:	68ac      	ldr	r4, [r5, #8]
 8000572:	9706      	str	r7, [sp, #24]
 8000574:	9607      	str	r6, [sp, #28]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	9202      	str	r2, [sp, #8]
 800057a:	b1b3      	cbz	r3, 80005aa <_puts_r+0x5a>
 800057c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000580:	049a      	lsls	r2, r3, #18
 8000582:	d406      	bmi.n	8000592 <_puts_r+0x42>
 8000584:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000586:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800058a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800058e:	81a3      	strh	r3, [r4, #12]
 8000590:	6662      	str	r2, [r4, #100]	; 0x64
 8000592:	4621      	mov	r1, r4
 8000594:	4628      	mov	r0, r5
 8000596:	aa01      	add	r2, sp, #4
 8000598:	f003 f8d4 	bl	8003744 <__sfvwrite_r>
 800059c:	2800      	cmp	r0, #0
 800059e:	bf14      	ite	ne
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005a4:	200a      	moveq	r0, #10
 80005a6:	b009      	add	sp, #36	; 0x24
 80005a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005aa:	4628      	mov	r0, r5
 80005ac:	f002 ff74 	bl	8003498 <__sinit>
 80005b0:	e7e4      	b.n	800057c <_puts_r+0x2c>
 80005b2:	bf00      	nop
 80005b4:	0801b520 	.word	0x0801b520

080005b8 <puts>:
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <puts+0xc>)
 80005ba:	4601      	mov	r1, r0
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	f7ff bfc7 	b.w	8000550 <_puts_r>
 80005c2:	bf00      	nop
 80005c4:	20000008 	.word	0x20000008

080005c8 <setvbuf>:
 80005c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005cc:	4c50      	ldr	r4, [pc, #320]	; (8000710 <setvbuf+0x148>)
 80005ce:	6825      	ldr	r5, [r4, #0]
 80005d0:	b083      	sub	sp, #12
 80005d2:	4604      	mov	r4, r0
 80005d4:	460f      	mov	r7, r1
 80005d6:	4690      	mov	r8, r2
 80005d8:	461e      	mov	r6, r3
 80005da:	b115      	cbz	r5, 80005e2 <setvbuf+0x1a>
 80005dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d077      	beq.n	80006d2 <setvbuf+0x10a>
 80005e2:	f1b8 0f02 	cmp.w	r8, #2
 80005e6:	d004      	beq.n	80005f2 <setvbuf+0x2a>
 80005e8:	f1b8 0f01 	cmp.w	r8, #1
 80005ec:	d87d      	bhi.n	80006ea <setvbuf+0x122>
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	db7b      	blt.n	80006ea <setvbuf+0x122>
 80005f2:	4621      	mov	r1, r4
 80005f4:	4628      	mov	r0, r5
 80005f6:	f002 fe3d 	bl	8003274 <_fflush_r>
 80005fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80005fc:	b141      	cbz	r1, 8000610 <setvbuf+0x48>
 80005fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8000602:	4299      	cmp	r1, r3
 8000604:	d002      	beq.n	800060c <setvbuf+0x44>
 8000606:	4628      	mov	r0, r5
 8000608:	f002 ffb6 	bl	8003578 <_free_r>
 800060c:	2300      	movs	r3, #0
 800060e:	6323      	str	r3, [r4, #48]	; 0x30
 8000610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000614:	2200      	movs	r2, #0
 8000616:	61a2      	str	r2, [r4, #24]
 8000618:	6062      	str	r2, [r4, #4]
 800061a:	061a      	lsls	r2, r3, #24
 800061c:	d452      	bmi.n	80006c4 <setvbuf+0xfc>
 800061e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000622:	f023 0303 	bic.w	r3, r3, #3
 8000626:	f1b8 0f02 	cmp.w	r8, #2
 800062a:	81a3      	strh	r3, [r4, #12]
 800062c:	d037      	beq.n	800069e <setvbuf+0xd6>
 800062e:	ab01      	add	r3, sp, #4
 8000630:	466a      	mov	r2, sp
 8000632:	4621      	mov	r1, r4
 8000634:	4628      	mov	r0, r5
 8000636:	f003 fa8d 	bl	8003b54 <__swhatbuf_r>
 800063a:	89a3      	ldrh	r3, [r4, #12]
 800063c:	4318      	orrs	r0, r3
 800063e:	81a0      	strh	r0, [r4, #12]
 8000640:	b316      	cbz	r6, 8000688 <setvbuf+0xc0>
 8000642:	b317      	cbz	r7, 800068a <setvbuf+0xc2>
 8000644:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000646:	2b00      	cmp	r3, #0
 8000648:	d04b      	beq.n	80006e2 <setvbuf+0x11a>
 800064a:	9b00      	ldr	r3, [sp, #0]
 800064c:	6027      	str	r7, [r4, #0]
 800064e:	429e      	cmp	r6, r3
 8000650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000654:	6127      	str	r7, [r4, #16]
 8000656:	bf1c      	itt	ne
 8000658:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800065c:	81a3      	strhne	r3, [r4, #12]
 800065e:	f1b8 0f01 	cmp.w	r8, #1
 8000662:	bf04      	itt	eq
 8000664:	f043 0301 	orreq.w	r3, r3, #1
 8000668:	81a3      	strheq	r3, [r4, #12]
 800066a:	b29b      	uxth	r3, r3
 800066c:	f013 0008 	ands.w	r0, r3, #8
 8000670:	6166      	str	r6, [r4, #20]
 8000672:	d023      	beq.n	80006bc <setvbuf+0xf4>
 8000674:	f013 0001 	ands.w	r0, r3, #1
 8000678:	d02f      	beq.n	80006da <setvbuf+0x112>
 800067a:	2000      	movs	r0, #0
 800067c:	4276      	negs	r6, r6
 800067e:	61a6      	str	r6, [r4, #24]
 8000680:	60a0      	str	r0, [r4, #8]
 8000682:	b003      	add	sp, #12
 8000684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000688:	9e00      	ldr	r6, [sp, #0]
 800068a:	4630      	mov	r0, r6
 800068c:	f003 fad4 	bl	8003c38 <malloc>
 8000690:	4607      	mov	r7, r0
 8000692:	b368      	cbz	r0, 80006f0 <setvbuf+0x128>
 8000694:	89a3      	ldrh	r3, [r4, #12]
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	81a3      	strh	r3, [r4, #12]
 800069c:	e7d2      	b.n	8000644 <setvbuf+0x7c>
 800069e:	2000      	movs	r0, #0
 80006a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	2500      	movs	r5, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	81a3      	strh	r3, [r4, #12]
 80006ae:	60a5      	str	r5, [r4, #8]
 80006b0:	6022      	str	r2, [r4, #0]
 80006b2:	6122      	str	r2, [r4, #16]
 80006b4:	6161      	str	r1, [r4, #20]
 80006b6:	b003      	add	sp, #12
 80006b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006bc:	60a0      	str	r0, [r4, #8]
 80006be:	b003      	add	sp, #12
 80006c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006c4:	6921      	ldr	r1, [r4, #16]
 80006c6:	4628      	mov	r0, r5
 80006c8:	f002 ff56 	bl	8003578 <_free_r>
 80006cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80006d0:	e7a5      	b.n	800061e <setvbuf+0x56>
 80006d2:	4628      	mov	r0, r5
 80006d4:	f002 fee0 	bl	8003498 <__sinit>
 80006d8:	e783      	b.n	80005e2 <setvbuf+0x1a>
 80006da:	60a6      	str	r6, [r4, #8]
 80006dc:	b003      	add	sp, #12
 80006de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006e2:	4628      	mov	r0, r5
 80006e4:	f002 fed8 	bl	8003498 <__sinit>
 80006e8:	e7af      	b.n	800064a <setvbuf+0x82>
 80006ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006ee:	e7e2      	b.n	80006b6 <setvbuf+0xee>
 80006f0:	f8dd 9000 	ldr.w	r9, [sp]
 80006f4:	45b1      	cmp	r9, r6
 80006f6:	d006      	beq.n	8000706 <setvbuf+0x13e>
 80006f8:	4648      	mov	r0, r9
 80006fa:	f003 fa9d 	bl	8003c38 <malloc>
 80006fe:	4607      	mov	r7, r0
 8000700:	b108      	cbz	r0, 8000706 <setvbuf+0x13e>
 8000702:	464e      	mov	r6, r9
 8000704:	e7c6      	b.n	8000694 <setvbuf+0xcc>
 8000706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800070a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800070e:	e7c7      	b.n	80006a0 <setvbuf+0xd8>
 8000710:	20000008 	.word	0x20000008

08000714 <strcasecmp>:
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <strcasecmp+0x48>)
 8000716:	b430      	push	{r4, r5}
 8000718:	681d      	ldr	r5, [r3, #0]
 800071a:	f810 4b01 	ldrb.w	r4, [r0], #1
 800071e:	192b      	adds	r3, r5, r4
 8000720:	4622      	mov	r2, r4
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	f003 0303 	and.w	r3, r3, #3
 8000728:	2b01      	cmp	r3, #1
 800072a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800072e:	bf08      	it	eq
 8000730:	f104 0220 	addeq.w	r2, r4, #32
 8000734:	18ec      	adds	r4, r5, r3
 8000736:	7864      	ldrb	r4, [r4, #1]
 8000738:	f004 0403 	and.w	r4, r4, #3
 800073c:	2c01      	cmp	r4, #1
 800073e:	d006      	beq.n	800074e <strcasecmp+0x3a>
 8000740:	1ad2      	subs	r2, r2, r3
 8000742:	d101      	bne.n	8000748 <strcasecmp+0x34>
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1e8      	bne.n	800071a <strcasecmp+0x6>
 8000748:	4610      	mov	r0, r2
 800074a:	bc30      	pop	{r4, r5}
 800074c:	4770      	bx	lr
 800074e:	3320      	adds	r3, #32
 8000750:	1ad2      	subs	r2, r2, r3
 8000752:	d0e2      	beq.n	800071a <strcasecmp+0x6>
 8000754:	4610      	mov	r0, r2
 8000756:	bc30      	pop	{r4, r5}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004

08000760 <strcpy>:
 8000760:	ea80 0201 	eor.w	r2, r0, r1
 8000764:	4684      	mov	ip, r0
 8000766:	f012 0f03 	tst.w	r2, #3
 800076a:	d14f      	bne.n	800080c <strcpy+0xac>
 800076c:	f011 0f03 	tst.w	r1, #3
 8000770:	d132      	bne.n	80007d8 <strcpy+0x78>
 8000772:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8000776:	f011 0f04 	tst.w	r1, #4
 800077a:	f851 3b04 	ldr.w	r3, [r1], #4
 800077e:	d00b      	beq.n	8000798 <strcpy+0x38>
 8000780:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000784:	439a      	bics	r2, r3
 8000786:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800078a:	bf04      	itt	eq
 800078c:	f84c 3b04 	streq.w	r3, [ip], #4
 8000790:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000794:	d116      	bne.n	80007c4 <strcpy+0x64>
 8000796:	bf00      	nop
 8000798:	f851 4b04 	ldr.w	r4, [r1], #4
 800079c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80007a0:	439a      	bics	r2, r3
 80007a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80007a6:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80007aa:	d10b      	bne.n	80007c4 <strcpy+0x64>
 80007ac:	f84c 3b04 	str.w	r3, [ip], #4
 80007b0:	43a2      	bics	r2, r4
 80007b2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80007b6:	bf04      	itt	eq
 80007b8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80007bc:	f84c 4b04 	streq.w	r4, [ip], #4
 80007c0:	d0ea      	beq.n	8000798 <strcpy+0x38>
 80007c2:	4623      	mov	r3, r4
 80007c4:	f80c 3b01 	strb.w	r3, [ip], #1
 80007c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80007cc:	ea4f 2333 	mov.w	r3, r3, ror #8
 80007d0:	d1f8      	bne.n	80007c4 <strcpy+0x64>
 80007d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	f011 0f01 	tst.w	r1, #1
 80007dc:	d006      	beq.n	80007ec <strcpy+0x8c>
 80007de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80007e2:	f80c 2b01 	strb.w	r2, [ip], #1
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f011 0f02 	tst.w	r1, #2
 80007f0:	d0bf      	beq.n	8000772 <strcpy+0x12>
 80007f2:	f831 2b02 	ldrh.w	r2, [r1], #2
 80007f6:	f012 0fff 	tst.w	r2, #255	; 0xff
 80007fa:	bf16      	itet	ne
 80007fc:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000800:	f88c 2000 	strbeq.w	r2, [ip]
 8000804:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000808:	d1b3      	bne.n	8000772 <strcpy+0x12>
 800080a:	4770      	bx	lr
 800080c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000810:	f80c 2b01 	strb.w	r2, [ip], #1
 8000814:	2a00      	cmp	r2, #0
 8000816:	d1f9      	bne.n	800080c <strcpy+0xac>
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
	...

08000840 <strlen>:
 8000840:	f890 f000 	pld	[r0]
 8000844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000848:	f020 0107 	bic.w	r1, r0, #7
 800084c:	f06f 0c00 	mvn.w	ip, #0
 8000850:	f010 0407 	ands.w	r4, r0, #7
 8000854:	f891 f020 	pld	[r1, #32]
 8000858:	f040 8049 	bne.w	80008ee <strlen+0xae>
 800085c:	f04f 0400 	mov.w	r4, #0
 8000860:	f06f 0007 	mvn.w	r0, #7
 8000864:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000868:	f891 f040 	pld	[r1, #64]	; 0x40
 800086c:	f100 0008 	add.w	r0, r0, #8
 8000870:	fa82 f24c 	uadd8	r2, r2, ip
 8000874:	faa4 f28c 	sel	r2, r4, ip
 8000878:	fa83 f34c 	uadd8	r3, r3, ip
 800087c:	faa2 f38c 	sel	r3, r2, ip
 8000880:	bb4b      	cbnz	r3, 80008d6 <strlen+0x96>
 8000882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000886:	fa82 f24c 	uadd8	r2, r2, ip
 800088a:	f100 0008 	add.w	r0, r0, #8
 800088e:	faa4 f28c 	sel	r2, r4, ip
 8000892:	fa83 f34c 	uadd8	r3, r3, ip
 8000896:	faa2 f38c 	sel	r3, r2, ip
 800089a:	b9e3      	cbnz	r3, 80008d6 <strlen+0x96>
 800089c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80008a0:	fa82 f24c 	uadd8	r2, r2, ip
 80008a4:	f100 0008 	add.w	r0, r0, #8
 80008a8:	faa4 f28c 	sel	r2, r4, ip
 80008ac:	fa83 f34c 	uadd8	r3, r3, ip
 80008b0:	faa2 f38c 	sel	r3, r2, ip
 80008b4:	b97b      	cbnz	r3, 80008d6 <strlen+0x96>
 80008b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80008ba:	f101 0120 	add.w	r1, r1, #32
 80008be:	fa82 f24c 	uadd8	r2, r2, ip
 80008c2:	f100 0008 	add.w	r0, r0, #8
 80008c6:	faa4 f28c 	sel	r2, r4, ip
 80008ca:	fa83 f34c 	uadd8	r3, r3, ip
 80008ce:	faa2 f38c 	sel	r3, r2, ip
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0c6      	beq.n	8000864 <strlen+0x24>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	bf04      	itt	eq
 80008da:	3004      	addeq	r0, #4
 80008dc:	461a      	moveq	r2, r3
 80008de:	ba12      	rev	r2, r2
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80008e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80008ec:	4770      	bx	lr
 80008ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80008f2:	f004 0503 	and.w	r5, r4, #3
 80008f6:	f1c4 0000 	rsb	r0, r4, #0
 80008fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80008fe:	f014 0f04 	tst.w	r4, #4
 8000902:	f891 f040 	pld	[r1, #64]	; 0x40
 8000906:	fa0c f505 	lsl.w	r5, ip, r5
 800090a:	ea62 0205 	orn	r2, r2, r5
 800090e:	bf1c      	itt	ne
 8000910:	ea63 0305 	ornne	r3, r3, r5
 8000914:	4662      	movne	r2, ip
 8000916:	f04f 0400 	mov.w	r4, #0
 800091a:	e7a9      	b.n	8000870 <strlen+0x30>

0800091c <strtok>:
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <strtok+0xc>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2301      	movs	r3, #1
 8000922:	325c      	adds	r2, #92	; 0x5c
 8000924:	f000 b802 	b.w	800092c <__strtok_r>
 8000928:	20000008 	.word	0x20000008

0800092c <__strtok_r>:
 800092c:	b4f0      	push	{r4, r5, r6, r7}
 800092e:	b318      	cbz	r0, 8000978 <__strtok_r+0x4c>
 8000930:	4607      	mov	r7, r0
 8000932:	460d      	mov	r5, r1
 8000934:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000938:	e001      	b.n	800093e <__strtok_r+0x12>
 800093a:	42a6      	cmp	r6, r4
 800093c:	d017      	beq.n	800096e <__strtok_r+0x42>
 800093e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000942:	2c00      	cmp	r4, #0
 8000944:	d1f9      	bne.n	800093a <__strtok_r+0xe>
 8000946:	b1e6      	cbz	r6, 8000982 <__strtok_r+0x56>
 8000948:	f817 5b01 	ldrb.w	r5, [r7], #1
 800094c:	460c      	mov	r4, r1
 800094e:	e001      	b.n	8000954 <__strtok_r+0x28>
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f9      	beq.n	8000948 <__strtok_r+0x1c>
 8000954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000958:	429d      	cmp	r5, r3
 800095a:	d1f9      	bne.n	8000950 <__strtok_r+0x24>
 800095c:	b155      	cbz	r5, 8000974 <__strtok_r+0x48>
 800095e:	2300      	movs	r3, #0
 8000960:	f807 3c01 	strb.w	r3, [r7, #-1]
 8000964:	6017      	str	r7, [r2, #0]
 8000966:	4606      	mov	r6, r0
 8000968:	4630      	mov	r0, r6
 800096a:	bcf0      	pop	{r4, r5, r6, r7}
 800096c:	4770      	bx	lr
 800096e:	b153      	cbz	r3, 8000986 <__strtok_r+0x5a>
 8000970:	4638      	mov	r0, r7
 8000972:	e7dd      	b.n	8000930 <__strtok_r+0x4>
 8000974:	462f      	mov	r7, r5
 8000976:	e7f5      	b.n	8000964 <__strtok_r+0x38>
 8000978:	6810      	ldr	r0, [r2, #0]
 800097a:	2800      	cmp	r0, #0
 800097c:	d1d8      	bne.n	8000930 <__strtok_r+0x4>
 800097e:	4606      	mov	r6, r0
 8000980:	e7f2      	b.n	8000968 <__strtok_r+0x3c>
 8000982:	6016      	str	r6, [r2, #0]
 8000984:	e7f0      	b.n	8000968 <__strtok_r+0x3c>
 8000986:	6017      	str	r7, [r2, #0]
 8000988:	4606      	mov	r6, r0
 800098a:	7003      	strb	r3, [r0, #0]
 800098c:	e7ec      	b.n	8000968 <__strtok_r+0x3c>
 800098e:	bf00      	nop

08000990 <strtok_r>:
 8000990:	2301      	movs	r3, #1
 8000992:	f7ff bfcb 	b.w	800092c <__strtok_r>
 8000996:	bf00      	nop

08000998 <_strtoul_r>:
 8000998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800099c:	4c49      	ldr	r4, [pc, #292]	; (8000ac4 <_strtoul_r+0x12c>)
 800099e:	4682      	mov	sl, r0
 80009a0:	f8d4 c000 	ldr.w	ip, [r4]
 80009a4:	4608      	mov	r0, r1
 80009a6:	e000      	b.n	80009aa <_strtoul_r+0x12>
 80009a8:	4620      	mov	r0, r4
 80009aa:	4604      	mov	r4, r0
 80009ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80009b0:	eb0c 0605 	add.w	r6, ip, r5
 80009b4:	7877      	ldrb	r7, [r6, #1]
 80009b6:	f017 0708 	ands.w	r7, r7, #8
 80009ba:	d1f5      	bne.n	80009a8 <_strtoul_r+0x10>
 80009bc:	2d2d      	cmp	r5, #45	; 0x2d
 80009be:	d058      	beq.n	8000a72 <_strtoul_r+0xda>
 80009c0:	2d2b      	cmp	r5, #43	; 0x2b
 80009c2:	bf04      	itt	eq
 80009c4:	7825      	ldrbeq	r5, [r4, #0]
 80009c6:	1c84      	addeq	r4, r0, #2
 80009c8:	b15b      	cbz	r3, 80009e2 <_strtoul_r+0x4a>
 80009ca:	2b10      	cmp	r3, #16
 80009cc:	d055      	beq.n	8000a7a <_strtoul_r+0xe2>
 80009ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80009d2:	fbb8 f8f3 	udiv	r8, r8, r3
 80009d6:	fb03 fb08 	mul.w	fp, r3, r8
 80009da:	ea6f 0b0b 	mvn.w	fp, fp
 80009de:	4699      	mov	r9, r3
 80009e0:	e007      	b.n	80009f2 <_strtoul_r+0x5a>
 80009e2:	2d30      	cmp	r5, #48	; 0x30
 80009e4:	d05a      	beq.n	8000a9c <_strtoul_r+0x104>
 80009e6:	230a      	movs	r3, #10
 80009e8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8000ac8 <_strtoul_r+0x130>
 80009ec:	4699      	mov	r9, r3
 80009ee:	f04f 0b05 	mov.w	fp, #5
 80009f2:	f04f 0e00 	mov.w	lr, #0
 80009f6:	4670      	mov	r0, lr
 80009f8:	e00e      	b.n	8000a18 <_strtoul_r+0x80>
 80009fa:	3d30      	subs	r5, #48	; 0x30
 80009fc:	42ab      	cmp	r3, r5
 80009fe:	dd1b      	ble.n	8000a38 <_strtoul_r+0xa0>
 8000a00:	f1be 0f00 	cmp.w	lr, #0
 8000a04:	db26      	blt.n	8000a54 <_strtoul_r+0xbc>
 8000a06:	4540      	cmp	r0, r8
 8000a08:	d824      	bhi.n	8000a54 <_strtoul_r+0xbc>
 8000a0a:	d021      	beq.n	8000a50 <_strtoul_r+0xb8>
 8000a0c:	fb09 5000 	mla	r0, r9, r0, r5
 8000a10:	f04f 0e01 	mov.w	lr, #1
 8000a14:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000a18:	eb0c 0605 	add.w	r6, ip, r5
 8000a1c:	7876      	ldrb	r6, [r6, #1]
 8000a1e:	f016 0f04 	tst.w	r6, #4
 8000a22:	d1ea      	bne.n	80009fa <_strtoul_r+0x62>
 8000a24:	f016 0603 	ands.w	r6, r6, #3
 8000a28:	d006      	beq.n	8000a38 <_strtoul_r+0xa0>
 8000a2a:	2e01      	cmp	r6, #1
 8000a2c:	bf14      	ite	ne
 8000a2e:	2657      	movne	r6, #87	; 0x57
 8000a30:	2637      	moveq	r6, #55	; 0x37
 8000a32:	1bad      	subs	r5, r5, r6
 8000a34:	42ab      	cmp	r3, r5
 8000a36:	dce3      	bgt.n	8000a00 <_strtoul_r+0x68>
 8000a38:	f1be 0f00 	cmp.w	lr, #0
 8000a3c:	db0f      	blt.n	8000a5e <_strtoul_r+0xc6>
 8000a3e:	b107      	cbz	r7, 8000a42 <_strtoul_r+0xaa>
 8000a40:	4240      	negs	r0, r0
 8000a42:	b152      	cbz	r2, 8000a5a <_strtoul_r+0xc2>
 8000a44:	f1be 0f00 	cmp.w	lr, #0
 8000a48:	d10f      	bne.n	8000a6a <_strtoul_r+0xd2>
 8000a4a:	6011      	str	r1, [r2, #0]
 8000a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a50:	455d      	cmp	r5, fp
 8000a52:	dddb      	ble.n	8000a0c <_strtoul_r+0x74>
 8000a54:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000a58:	e7dc      	b.n	8000a14 <_strtoul_r+0x7c>
 8000a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5e:	2322      	movs	r3, #34	; 0x22
 8000a60:	f8ca 3000 	str.w	r3, [sl]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	b352      	cbz	r2, 8000ac0 <_strtoul_r+0x128>
 8000a6a:	1e61      	subs	r1, r4, #1
 8000a6c:	6011      	str	r1, [r2, #0]
 8000a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a72:	7825      	ldrb	r5, [r4, #0]
 8000a74:	2701      	movs	r7, #1
 8000a76:	1c84      	adds	r4, r0, #2
 8000a78:	e7a6      	b.n	80009c8 <_strtoul_r+0x30>
 8000a7a:	2d30      	cmp	r5, #48	; 0x30
 8000a7c:	d11a      	bne.n	8000ab4 <_strtoul_r+0x11c>
 8000a7e:	7820      	ldrb	r0, [r4, #0]
 8000a80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000a84:	2858      	cmp	r0, #88	; 0x58
 8000a86:	d115      	bne.n	8000ab4 <_strtoul_r+0x11c>
 8000a88:	f04f 0910 	mov.w	r9, #16
 8000a8c:	7865      	ldrb	r5, [r4, #1]
 8000a8e:	464b      	mov	r3, r9
 8000a90:	f04f 0b0f 	mov.w	fp, #15
 8000a94:	3402      	adds	r4, #2
 8000a96:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000a9a:	e7aa      	b.n	80009f2 <_strtoul_r+0x5a>
 8000a9c:	7823      	ldrb	r3, [r4, #0]
 8000a9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8000aa2:	2b58      	cmp	r3, #88	; 0x58
 8000aa4:	d0f0      	beq.n	8000a88 <_strtoul_r+0xf0>
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	4699      	mov	r9, r3
 8000aaa:	f04f 0b07 	mov.w	fp, #7
 8000aae:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8000ab2:	e79e      	b.n	80009f2 <_strtoul_r+0x5a>
 8000ab4:	f04f 0b0f 	mov.w	fp, #15
 8000ab8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8000abc:	4699      	mov	r9, r3
 8000abe:	e798      	b.n	80009f2 <_strtoul_r+0x5a>
 8000ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	19999999 	.word	0x19999999

08000acc <strtoul>:
 8000acc:	b410      	push	{r4}
 8000ace:	4c04      	ldr	r4, [pc, #16]	; (8000ae0 <strtoul+0x14>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	460a      	mov	r2, r1
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000adc:	f7ff bf5c 	b.w	8000998 <_strtoul_r>
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	00000000 	.word	0x00000000

08000ae8 <_vfprintf_r>:
 8000ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	b0bf      	sub	sp, #252	; 0xfc
 8000aee:	461d      	mov	r5, r3
 8000af0:	468a      	mov	sl, r1
 8000af2:	4691      	mov	r9, r2
 8000af4:	4604      	mov	r4, r0
 8000af6:	9006      	str	r0, [sp, #24]
 8000af8:	f003 f81c 	bl	8003b34 <_localeconv_r>
 8000afc:	6803      	ldr	r3, [r0, #0]
 8000afe:	9312      	str	r3, [sp, #72]	; 0x48
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fe9d 	bl	8000840 <strlen>
 8000b06:	950a      	str	r5, [sp, #40]	; 0x28
 8000b08:	9010      	str	r0, [sp, #64]	; 0x40
 8000b0a:	b11c      	cbz	r4, 8000b14 <_vfprintf_r+0x2c>
 8000b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 8120 	beq.w	8000d54 <_vfprintf_r+0x26c>
 8000b14:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 8000b18:	b293      	uxth	r3, r2
 8000b1a:	0498      	lsls	r0, r3, #18
 8000b1c:	d40a      	bmi.n	8000b34 <_vfprintf_r+0x4c>
 8000b1e:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8000b22:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8000b26:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8000b2a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8000b2e:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	0719      	lsls	r1, r3, #28
 8000b36:	f140 80e4 	bpl.w	8000d02 <_vfprintf_r+0x21a>
 8000b3a:	f8da 2010 	ldr.w	r2, [sl, #16]
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	f000 80df 	beq.w	8000d02 <_vfprintf_r+0x21a>
 8000b44:	f003 031a 	and.w	r3, r3, #26
 8000b48:	2b0a      	cmp	r3, #10
 8000b4a:	f000 80e8 	beq.w	8000d1e <_vfprintf_r+0x236>
 8000b4e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 8000d60 <_vfprintf_r+0x278>
 8000b52:	2300      	movs	r3, #0
 8000b54:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8000b58:	930d      	str	r3, [sp, #52]	; 0x34
 8000b5a:	9323      	str	r3, [sp, #140]	; 0x8c
 8000b5c:	9322      	str	r3, [sp, #136]	; 0x88
 8000b5e:	9311      	str	r3, [sp, #68]	; 0x44
 8000b60:	9313      	str	r3, [sp, #76]	; 0x4c
 8000b62:	9307      	str	r3, [sp, #28]
 8000b64:	ab2e      	add	r3, sp, #184	; 0xb8
 8000b66:	9321      	str	r3, [sp, #132]	; 0x84
 8000b68:	4698      	mov	r8, r3
 8000b6a:	f8cd a014 	str.w	sl, [sp, #20]
 8000b6e:	f899 3000 	ldrb.w	r3, [r9]
 8000b72:	464c      	mov	r4, r9
 8000b74:	b1eb      	cbz	r3, 8000bb2 <_vfprintf_r+0xca>
 8000b76:	2b25      	cmp	r3, #37	; 0x25
 8000b78:	d102      	bne.n	8000b80 <_vfprintf_r+0x98>
 8000b7a:	e01a      	b.n	8000bb2 <_vfprintf_r+0xca>
 8000b7c:	2b25      	cmp	r3, #37	; 0x25
 8000b7e:	d003      	beq.n	8000b88 <_vfprintf_r+0xa0>
 8000b80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1f9      	bne.n	8000b7c <_vfprintf_r+0x94>
 8000b88:	eba4 0509 	sub.w	r5, r4, r9
 8000b8c:	b18d      	cbz	r5, 8000bb2 <_vfprintf_r+0xca>
 8000b8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000b90:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000b92:	f8c8 9000 	str.w	r9, [r8]
 8000b96:	3301      	adds	r3, #1
 8000b98:	442a      	add	r2, r5
 8000b9a:	2b07      	cmp	r3, #7
 8000b9c:	f8c8 5004 	str.w	r5, [r8, #4]
 8000ba0:	9223      	str	r2, [sp, #140]	; 0x8c
 8000ba2:	9322      	str	r3, [sp, #136]	; 0x88
 8000ba4:	f300 80cb 	bgt.w	8000d3e <_vfprintf_r+0x256>
 8000ba8:	f108 0808 	add.w	r8, r8, #8
 8000bac:	9b07      	ldr	r3, [sp, #28]
 8000bae:	442b      	add	r3, r5
 8000bb0:	9307      	str	r3, [sp, #28]
 8000bb2:	7823      	ldrb	r3, [r4, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 83d5 	beq.w	8001364 <_vfprintf_r+0x87c>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	9308      	str	r3, [sp, #32]
 8000bc6:	469b      	mov	fp, r3
 8000bc8:	7866      	ldrb	r6, [r4, #1]
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	f104 0901 	add.w	r9, r4, #1
 8000bd2:	9304      	str	r3, [sp, #16]
 8000bd4:	f109 0901 	add.w	r9, r9, #1
 8000bd8:	f1a6 0320 	sub.w	r3, r6, #32
 8000bdc:	2b58      	cmp	r3, #88	; 0x58
 8000bde:	f200 8398 	bhi.w	8001312 <_vfprintf_r+0x82a>
 8000be2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000be6:	029a      	.short	0x029a
 8000be8:	03960396 	.word	0x03960396
 8000bec:	03960391 	.word	0x03960391
 8000bf0:	03960396 	.word	0x03960396
 8000bf4:	03960396 	.word	0x03960396
 8000bf8:	037e0396 	.word	0x037e0396
 8000bfc:	0396038c 	.word	0x0396038c
 8000c00:	02b60089 	.word	0x02b60089
 8000c04:	02a20396 	.word	0x02a20396
 8000c08:	02a702a7 	.word	0x02a702a7
 8000c0c:	02a702a7 	.word	0x02a702a7
 8000c10:	02a702a7 	.word	0x02a702a7
 8000c14:	02a702a7 	.word	0x02a702a7
 8000c18:	039602a7 	.word	0x039602a7
 8000c1c:	03960396 	.word	0x03960396
 8000c20:	03960396 	.word	0x03960396
 8000c24:	03960396 	.word	0x03960396
 8000c28:	03960396 	.word	0x03960396
 8000c2c:	02550396 	.word	0x02550396
 8000c30:	039602e2 	.word	0x039602e2
 8000c34:	039602e2 	.word	0x039602e2
 8000c38:	03960396 	.word	0x03960396
 8000c3c:	032b0396 	.word	0x032b0396
 8000c40:	03960396 	.word	0x03960396
 8000c44:	0396006f 	.word	0x0396006f
 8000c48:	03960396 	.word	0x03960396
 8000c4c:	03960396 	.word	0x03960396
 8000c50:	03960059 	.word	0x03960059
 8000c54:	03780396 	.word	0x03780396
 8000c58:	03960396 	.word	0x03960396
 8000c5c:	03960396 	.word	0x03960396
 8000c60:	03960396 	.word	0x03960396
 8000c64:	03960396 	.word	0x03960396
 8000c68:	03960396 	.word	0x03960396
 8000c6c:	0372035c 	.word	0x0372035c
 8000c70:	02e202e2 	.word	0x02e202e2
 8000c74:	033002e2 	.word	0x033002e2
 8000c78:	03960372 	.word	0x03960372
 8000c7c:	03350396 	.word	0x03350396
 8000c80:	03420396 	.word	0x03420396
 8000c84:	02d10071 	.word	0x02d10071
 8000c88:	03960357 	.word	0x03960357
 8000c8c:	039600c1 	.word	0x039600c1
 8000c90:	0396005b 	.word	0x0396005b
 8000c94:	02030396 	.word	0x02030396
 8000c98:	f04b 0b10 	orr.w	fp, fp, #16
 8000c9c:	f01b 0f20 	tst.w	fp, #32
 8000ca0:	f040 8665 	bne.w	800196e <_vfprintf_r+0xe86>
 8000ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ca6:	f01b 0f10 	tst.w	fp, #16
 8000caa:	4613      	mov	r3, r2
 8000cac:	f040 8344 	bne.w	8001338 <_vfprintf_r+0x850>
 8000cb0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8000cb4:	f000 8340 	beq.w	8001338 <_vfprintf_r+0x850>
 8000cb8:	8814      	ldrh	r4, [r2, #0]
 8000cba:	3204      	adds	r2, #4
 8000cbc:	2500      	movs	r5, #0
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	920a      	str	r2, [sp, #40]	; 0x28
 8000cc2:	e1ba      	b.n	800103a <_vfprintf_r+0x552>
 8000cc4:	f04b 0b10 	orr.w	fp, fp, #16
 8000cc8:	f01b 0320 	ands.w	r3, fp, #32
 8000ccc:	f040 865b 	bne.w	8001986 <_vfprintf_r+0xe9e>
 8000cd0:	f01b 0210 	ands.w	r2, fp, #16
 8000cd4:	f040 8336 	bne.w	8001344 <_vfprintf_r+0x85c>
 8000cd8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8000cdc:	f000 8332 	beq.w	8001344 <_vfprintf_r+0x85c>
 8000ce0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	3204      	adds	r2, #4
 8000ce8:	880c      	ldrh	r4, [r1, #0]
 8000cea:	920a      	str	r2, [sp, #40]	; 0x28
 8000cec:	2500      	movs	r5, #0
 8000cee:	e1a4      	b.n	800103a <_vfprintf_r+0x552>
 8000cf0:	9808      	ldr	r0, [sp, #32]
 8000cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8000cf4:	4240      	negs	r0, r0
 8000cf6:	9008      	str	r0, [sp, #32]
 8000cf8:	f04b 0b04 	orr.w	fp, fp, #4
 8000cfc:	f899 6000 	ldrb.w	r6, [r9]
 8000d00:	e768      	b.n	8000bd4 <_vfprintf_r+0xec>
 8000d02:	4651      	mov	r1, sl
 8000d04:	9806      	ldr	r0, [sp, #24]
 8000d06:	f001 f9a3 	bl	8002050 <__swsetup_r>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	f040 8338 	bne.w	8001380 <_vfprintf_r+0x898>
 8000d10:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8000d14:	f003 031a 	and.w	r3, r3, #26
 8000d18:	2b0a      	cmp	r3, #10
 8000d1a:	f47f af18 	bne.w	8000b4e <_vfprintf_r+0x66>
 8000d1e:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f6ff af13 	blt.w	8000b4e <_vfprintf_r+0x66>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	4651      	mov	r1, sl
 8000d2e:	9806      	ldr	r0, [sp, #24]
 8000d30:	f001 f958 	bl	8001fe4 <__sbprintf>
 8000d34:	9007      	str	r0, [sp, #28]
 8000d36:	9807      	ldr	r0, [sp, #28]
 8000d38:	b03f      	add	sp, #252	; 0xfc
 8000d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d3e:	aa21      	add	r2, sp, #132	; 0x84
 8000d40:	9905      	ldr	r1, [sp, #20]
 8000d42:	9806      	ldr	r0, [sp, #24]
 8000d44:	f004 fbea 	bl	800551c <__sprint_r>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	f040 8431 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8000d4e:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8000d52:	e72b      	b.n	8000bac <_vfprintf_r+0xc4>
 8000d54:	9806      	ldr	r0, [sp, #24]
 8000d56:	f002 fb9f 	bl	8003498 <__sinit>
 8000d5a:	e6db      	b.n	8000b14 <_vfprintf_r+0x2c>
 8000d5c:	f3af 8000 	nop.w
	...
 8000d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d6a:	6817      	ldr	r7, [r2, #0]
 8000d6c:	2400      	movs	r4, #0
 8000d6e:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
 8000d72:	1d15      	adds	r5, r2, #4
 8000d74:	2f00      	cmp	r7, #0
 8000d76:	f000 87e7 	beq.w	8001d48 <_vfprintf_r+0x1260>
 8000d7a:	9a04      	ldr	r2, [sp, #16]
 8000d7c:	1c53      	adds	r3, r2, #1
 8000d7e:	f000 8749 	beq.w	8001c14 <_vfprintf_r+0x112c>
 8000d82:	4621      	mov	r1, r4
 8000d84:	4638      	mov	r0, r7
 8000d86:	f003 fa13 	bl	80041b0 <memchr>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	f001 8046 	beq.w	8001e1c <_vfprintf_r+0x1334>
 8000d90:	1bc3      	subs	r3, r0, r7
 8000d92:	9309      	str	r3, [sp, #36]	; 0x24
 8000d94:	9404      	str	r4, [sp, #16]
 8000d96:	950a      	str	r5, [sp, #40]	; 0x28
 8000d98:	f8cd b008 	str.w	fp, [sp, #8]
 8000d9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000da0:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	940c      	str	r4, [sp, #48]	; 0x30
 8000da8:	f1ba 0f00 	cmp.w	sl, #0
 8000dac:	d002      	beq.n	8000db4 <_vfprintf_r+0x2cc>
 8000dae:	9b03      	ldr	r3, [sp, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	9b02      	ldr	r3, [sp, #8]
 8000db6:	f013 0302 	ands.w	r3, r3, #2
 8000dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8000dbc:	d002      	beq.n	8000dc4 <_vfprintf_r+0x2dc>
 8000dbe:	9b03      	ldr	r3, [sp, #12]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	9b02      	ldr	r3, [sp, #8]
 8000dc6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
 8000dca:	f040 82c9 	bne.w	8001360 <_vfprintf_r+0x878>
 8000dce:	9b08      	ldr	r3, [sp, #32]
 8000dd0:	9a03      	ldr	r2, [sp, #12]
 8000dd2:	eba3 0b02 	sub.w	fp, r3, r2
 8000dd6:	f1bb 0f00 	cmp.w	fp, #0
 8000dda:	f340 82c1 	ble.w	8001360 <_vfprintf_r+0x878>
 8000dde:	f1bb 0f10 	cmp.w	fp, #16
 8000de2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8000de4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000de6:	dd28      	ble.n	8000e3a <_vfprintf_r+0x352>
 8000de8:	4643      	mov	r3, r8
 8000dea:	2410      	movs	r4, #16
 8000dec:	46a8      	mov	r8, r5
 8000dee:	f8dd a018 	ldr.w	sl, [sp, #24]
 8000df2:	9d05      	ldr	r5, [sp, #20]
 8000df4:	e006      	b.n	8000e04 <_vfprintf_r+0x31c>
 8000df6:	f1ab 0b10 	sub.w	fp, fp, #16
 8000dfa:	f1bb 0f10 	cmp.w	fp, #16
 8000dfe:	f103 0308 	add.w	r3, r3, #8
 8000e02:	dd18      	ble.n	8000e36 <_vfprintf_r+0x34e>
 8000e04:	3201      	adds	r2, #1
 8000e06:	489f      	ldr	r0, [pc, #636]	; (8001084 <_vfprintf_r+0x59c>)
 8000e08:	9222      	str	r2, [sp, #136]	; 0x88
 8000e0a:	3110      	adds	r1, #16
 8000e0c:	2a07      	cmp	r2, #7
 8000e0e:	9123      	str	r1, [sp, #140]	; 0x8c
 8000e10:	e883 0011 	stmia.w	r3, {r0, r4}
 8000e14:	ddef      	ble.n	8000df6 <_vfprintf_r+0x30e>
 8000e16:	aa21      	add	r2, sp, #132	; 0x84
 8000e18:	4629      	mov	r1, r5
 8000e1a:	4650      	mov	r0, sl
 8000e1c:	f004 fb7e 	bl	800551c <__sprint_r>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	f040 8311 	bne.w	8001448 <_vfprintf_r+0x960>
 8000e26:	f1ab 0b10 	sub.w	fp, fp, #16
 8000e2a:	f1bb 0f10 	cmp.w	fp, #16
 8000e2e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8000e30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000e32:	ab2e      	add	r3, sp, #184	; 0xb8
 8000e34:	dce6      	bgt.n	8000e04 <_vfprintf_r+0x31c>
 8000e36:	4645      	mov	r5, r8
 8000e38:	4698      	mov	r8, r3
 8000e3a:	3201      	adds	r2, #1
 8000e3c:	4b91      	ldr	r3, [pc, #580]	; (8001084 <_vfprintf_r+0x59c>)
 8000e3e:	9222      	str	r2, [sp, #136]	; 0x88
 8000e40:	eb0b 0401 	add.w	r4, fp, r1
 8000e44:	2a07      	cmp	r2, #7
 8000e46:	9423      	str	r4, [sp, #140]	; 0x8c
 8000e48:	e888 0808 	stmia.w	r8, {r3, fp}
 8000e4c:	f300 8473 	bgt.w	8001736 <_vfprintf_r+0xc4e>
 8000e50:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 8000e54:	f108 0808 	add.w	r8, r8, #8
 8000e58:	f1ba 0f00 	cmp.w	sl, #0
 8000e5c:	d00e      	beq.n	8000e7c <_vfprintf_r+0x394>
 8000e5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000e60:	3301      	adds	r3, #1
 8000e62:	3401      	adds	r4, #1
 8000e64:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	9423      	str	r4, [sp, #140]	; 0x8c
 8000e6e:	9322      	str	r3, [sp, #136]	; 0x88
 8000e70:	e888 0006 	stmia.w	r8, {r1, r2}
 8000e74:	f300 83b6 	bgt.w	80015e4 <_vfprintf_r+0xafc>
 8000e78:	f108 0808 	add.w	r8, r8, #8
 8000e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000e7e:	b16b      	cbz	r3, 8000e9c <_vfprintf_r+0x3b4>
 8000e80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000e82:	3301      	adds	r3, #1
 8000e84:	3402      	adds	r4, #2
 8000e86:	a91a      	add	r1, sp, #104	; 0x68
 8000e88:	2202      	movs	r2, #2
 8000e8a:	2b07      	cmp	r3, #7
 8000e8c:	9423      	str	r4, [sp, #140]	; 0x8c
 8000e8e:	9322      	str	r3, [sp, #136]	; 0x88
 8000e90:	e888 0006 	stmia.w	r8, {r1, r2}
 8000e94:	f300 83b1 	bgt.w	80015fa <_vfprintf_r+0xb12>
 8000e98:	f108 0808 	add.w	r8, r8, #8
 8000e9c:	2d80      	cmp	r5, #128	; 0x80
 8000e9e:	f000 82e9 	beq.w	8001474 <_vfprintf_r+0x98c>
 8000ea2:	9b04      	ldr	r3, [sp, #16]
 8000ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ea6:	eba3 0a02 	sub.w	sl, r3, r2
 8000eaa:	f1ba 0f00 	cmp.w	sl, #0
 8000eae:	dd3b      	ble.n	8000f28 <_vfprintf_r+0x440>
 8000eb0:	f1ba 0f10 	cmp.w	sl, #16
 8000eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000eb6:	4d74      	ldr	r5, [pc, #464]	; (8001088 <_vfprintf_r+0x5a0>)
 8000eb8:	dd2b      	ble.n	8000f12 <_vfprintf_r+0x42a>
 8000eba:	4642      	mov	r2, r8
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	46b0      	mov	r8, r6
 8000ec0:	f04f 0b10 	mov.w	fp, #16
 8000ec4:	462e      	mov	r6, r5
 8000ec6:	9c06      	ldr	r4, [sp, #24]
 8000ec8:	9d05      	ldr	r5, [sp, #20]
 8000eca:	e006      	b.n	8000eda <_vfprintf_r+0x3f2>
 8000ecc:	f1aa 0a10 	sub.w	sl, sl, #16
 8000ed0:	f1ba 0f10 	cmp.w	sl, #16
 8000ed4:	f102 0208 	add.w	r2, r2, #8
 8000ed8:	dd17      	ble.n	8000f0a <_vfprintf_r+0x422>
 8000eda:	3301      	adds	r3, #1
 8000edc:	3110      	adds	r1, #16
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	9123      	str	r1, [sp, #140]	; 0x8c
 8000ee2:	9322      	str	r3, [sp, #136]	; 0x88
 8000ee4:	e882 0840 	stmia.w	r2, {r6, fp}
 8000ee8:	ddf0      	ble.n	8000ecc <_vfprintf_r+0x3e4>
 8000eea:	aa21      	add	r2, sp, #132	; 0x84
 8000eec:	4629      	mov	r1, r5
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f004 fb14 	bl	800551c <__sprint_r>
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	f040 82a7 	bne.w	8001448 <_vfprintf_r+0x960>
 8000efa:	f1aa 0a10 	sub.w	sl, sl, #16
 8000efe:	f1ba 0f10 	cmp.w	sl, #16
 8000f02:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8000f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f06:	aa2e      	add	r2, sp, #184	; 0xb8
 8000f08:	dce7      	bgt.n	8000eda <_vfprintf_r+0x3f2>
 8000f0a:	4635      	mov	r5, r6
 8000f0c:	460c      	mov	r4, r1
 8000f0e:	4646      	mov	r6, r8
 8000f10:	4690      	mov	r8, r2
 8000f12:	3301      	adds	r3, #1
 8000f14:	4454      	add	r4, sl
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	9423      	str	r4, [sp, #140]	; 0x8c
 8000f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8000f1c:	e888 0420 	stmia.w	r8, {r5, sl}
 8000f20:	f300 8355 	bgt.w	80015ce <_vfprintf_r+0xae6>
 8000f24:	f108 0808 	add.w	r8, r8, #8
 8000f28:	9b02      	ldr	r3, [sp, #8]
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	f100 822c 	bmi.w	8001388 <_vfprintf_r+0x8a0>
 8000f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000f34:	f8c8 7000 	str.w	r7, [r8]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	440c      	add	r4, r1
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	9423      	str	r4, [sp, #140]	; 0x8c
 8000f40:	f8c8 1004 	str.w	r1, [r8, #4]
 8000f44:	9322      	str	r3, [sp, #136]	; 0x88
 8000f46:	f300 8321 	bgt.w	800158c <_vfprintf_r+0xaa4>
 8000f4a:	f108 0808 	add.w	r8, r8, #8
 8000f4e:	9b02      	ldr	r3, [sp, #8]
 8000f50:	075a      	lsls	r2, r3, #29
 8000f52:	d53b      	bpl.n	8000fcc <_vfprintf_r+0x4e4>
 8000f54:	9b08      	ldr	r3, [sp, #32]
 8000f56:	9a03      	ldr	r2, [sp, #12]
 8000f58:	1a9d      	subs	r5, r3, r2
 8000f5a:	2d00      	cmp	r5, #0
 8000f5c:	dd36      	ble.n	8000fcc <_vfprintf_r+0x4e4>
 8000f5e:	2d10      	cmp	r5, #16
 8000f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000f62:	dd21      	ble.n	8000fa8 <_vfprintf_r+0x4c0>
 8000f64:	2610      	movs	r6, #16
 8000f66:	9f06      	ldr	r7, [sp, #24]
 8000f68:	f8dd a014 	ldr.w	sl, [sp, #20]
 8000f6c:	e004      	b.n	8000f78 <_vfprintf_r+0x490>
 8000f6e:	3d10      	subs	r5, #16
 8000f70:	2d10      	cmp	r5, #16
 8000f72:	f108 0808 	add.w	r8, r8, #8
 8000f76:	dd17      	ble.n	8000fa8 <_vfprintf_r+0x4c0>
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a42      	ldr	r2, [pc, #264]	; (8001084 <_vfprintf_r+0x59c>)
 8000f7c:	9322      	str	r3, [sp, #136]	; 0x88
 8000f7e:	3410      	adds	r4, #16
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	9423      	str	r4, [sp, #140]	; 0x8c
 8000f84:	e888 0044 	stmia.w	r8, {r2, r6}
 8000f88:	ddf1      	ble.n	8000f6e <_vfprintf_r+0x486>
 8000f8a:	aa21      	add	r2, sp, #132	; 0x84
 8000f8c:	4651      	mov	r1, sl
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f004 fac4 	bl	800551c <__sprint_r>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f040 81ee 	bne.w	8001376 <_vfprintf_r+0x88e>
 8000f9a:	3d10      	subs	r5, #16
 8000f9c:	2d10      	cmp	r5, #16
 8000f9e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000fa2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8000fa6:	dce7      	bgt.n	8000f78 <_vfprintf_r+0x490>
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a36      	ldr	r2, [pc, #216]	; (8001084 <_vfprintf_r+0x59c>)
 8000fac:	9322      	str	r3, [sp, #136]	; 0x88
 8000fae:	442c      	add	r4, r5
 8000fb0:	2b07      	cmp	r3, #7
 8000fb2:	9423      	str	r4, [sp, #140]	; 0x8c
 8000fb4:	e888 0024 	stmia.w	r8, {r2, r5}
 8000fb8:	dd08      	ble.n	8000fcc <_vfprintf_r+0x4e4>
 8000fba:	aa21      	add	r2, sp, #132	; 0x84
 8000fbc:	9905      	ldr	r1, [sp, #20]
 8000fbe:	9806      	ldr	r0, [sp, #24]
 8000fc0:	f004 faac 	bl	800551c <__sprint_r>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	f040 82f3 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8000fca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000fcc:	9b07      	ldr	r3, [sp, #28]
 8000fce:	9a08      	ldr	r2, [sp, #32]
 8000fd0:	9903      	ldr	r1, [sp, #12]
 8000fd2:	428a      	cmp	r2, r1
 8000fd4:	bfac      	ite	ge
 8000fd6:	189b      	addge	r3, r3, r2
 8000fd8:	185b      	addlt	r3, r3, r1
 8000fda:	9307      	str	r3, [sp, #28]
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	f040 82df 	bne.w	80015a0 <_vfprintf_r+0xab8>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9322      	str	r3, [sp, #136]	; 0x88
 8000fe6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8000fea:	e5c0      	b.n	8000b6e <_vfprintf_r+0x86>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	f040 87e2 	bne.w	8001fb6 <_vfprintf_r+0x14ce>
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <_vfprintf_r+0x5a4>)
 8000ff4:	9311      	str	r3, [sp, #68]	; 0x44
 8000ff6:	f01b 0f20 	tst.w	fp, #32
 8000ffa:	f040 84a0 	bne.w	800193e <_vfprintf_r+0xe56>
 8000ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001000:	f01b 0f10 	tst.w	fp, #16
 8001004:	4613      	mov	r3, r2
 8001006:	f040 83d0 	bne.w	80017aa <_vfprintf_r+0xcc2>
 800100a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800100e:	f000 83cc 	beq.w	80017aa <_vfprintf_r+0xcc2>
 8001012:	3304      	adds	r3, #4
 8001014:	8814      	ldrh	r4, [r2, #0]
 8001016:	930a      	str	r3, [sp, #40]	; 0x28
 8001018:	2500      	movs	r5, #0
 800101a:	f01b 0f01 	tst.w	fp, #1
 800101e:	f000 831e 	beq.w	800165e <_vfprintf_r+0xb76>
 8001022:	ea54 0305 	orrs.w	r3, r4, r5
 8001026:	f000 831a 	beq.w	800165e <_vfprintf_r+0xb76>
 800102a:	2330      	movs	r3, #48	; 0x30
 800102c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8001030:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
 8001034:	f04b 0b02 	orr.w	fp, fp, #2
 8001038:	2302      	movs	r3, #2
 800103a:	f04f 0a00 	mov.w	sl, #0
 800103e:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
 8001042:	9904      	ldr	r1, [sp, #16]
 8001044:	1c4a      	adds	r2, r1, #1
 8001046:	d048      	beq.n	80010da <_vfprintf_r+0x5f2>
 8001048:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800104c:	9202      	str	r2, [sp, #8]
 800104e:	ea54 0205 	orrs.w	r2, r4, r5
 8001052:	d148      	bne.n	80010e6 <_vfprintf_r+0x5fe>
 8001054:	2900      	cmp	r1, #0
 8001056:	f040 82ae 	bne.w	80015b6 <_vfprintf_r+0xace>
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 8367 	bne.w	800172e <_vfprintf_r+0xc46>
 8001060:	f01b 0301 	ands.w	r3, fp, #1
 8001064:	9309      	str	r3, [sp, #36]	; 0x24
 8001066:	f000 849a 	beq.w	800199e <_vfprintf_r+0xeb6>
 800106a:	af3e      	add	r7, sp, #248	; 0xf8
 800106c:	2330      	movs	r3, #48	; 0x30
 800106e:	f807 3d41 	strb.w	r3, [r7, #-65]!
 8001072:	9b04      	ldr	r3, [sp, #16]
 8001074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001076:	4293      	cmp	r3, r2
 8001078:	bfb8      	it	lt
 800107a:	4613      	movlt	r3, r2
 800107c:	9303      	str	r3, [sp, #12]
 800107e:	2300      	movs	r3, #0
 8001080:	930c      	str	r3, [sp, #48]	; 0x30
 8001082:	e691      	b.n	8000da8 <_vfprintf_r+0x2c0>
 8001084:	0800c1c4 	.word	0x0800c1c4
 8001088:	0800c1d4 	.word	0x0800c1d4
 800108c:	0801b548 	.word	0x0801b548
 8001090:	2a00      	cmp	r2, #0
 8001092:	f040 877d 	bne.w	8001f90 <_vfprintf_r+0x14a8>
 8001096:	f04b 0b10 	orr.w	fp, fp, #16
 800109a:	f01b 0f20 	tst.w	fp, #32
 800109e:	f040 8459 	bne.w	8001954 <_vfprintf_r+0xe6c>
 80010a2:	f01b 0f10 	tst.w	fp, #16
 80010a6:	f040 838f 	bne.w	80017c8 <_vfprintf_r+0xce0>
 80010aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80010ae:	f000 838b 	beq.w	80017c8 <_vfprintf_r+0xce0>
 80010b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80010b4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80010b8:	3104      	adds	r1, #4
 80010ba:	17e5      	asrs	r5, r4, #31
 80010bc:	4622      	mov	r2, r4
 80010be:	462b      	mov	r3, r5
 80010c0:	910a      	str	r1, [sp, #40]	; 0x28
 80010c2:	2a00      	cmp	r2, #0
 80010c4:	f173 0300 	sbcs.w	r3, r3, #0
 80010c8:	f2c0 8479 	blt.w	80019be <_vfprintf_r+0xed6>
 80010cc:	9904      	ldr	r1, [sp, #16]
 80010ce:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 80010d2:	1c4a      	adds	r2, r1, #1
 80010d4:	f04f 0301 	mov.w	r3, #1
 80010d8:	d1b6      	bne.n	8001048 <_vfprintf_r+0x560>
 80010da:	ea54 0205 	orrs.w	r2, r4, r5
 80010de:	f000 826c 	beq.w	80015ba <_vfprintf_r+0xad2>
 80010e2:	f8cd b008 	str.w	fp, [sp, #8]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	f000 8304 	beq.w	80016f4 <_vfprintf_r+0xc0c>
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	f040 8293 	bne.w	8001618 <_vfprintf_r+0xb30>
 80010f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80010f4:	af2e      	add	r7, sp, #184	; 0xb8
 80010f6:	0923      	lsrs	r3, r4, #4
 80010f8:	f004 010f 	and.w	r1, r4, #15
 80010fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8001100:	092a      	lsrs	r2, r5, #4
 8001102:	461c      	mov	r4, r3
 8001104:	4615      	mov	r5, r2
 8001106:	5c43      	ldrb	r3, [r0, r1]
 8001108:	f807 3d01 	strb.w	r3, [r7, #-1]!
 800110c:	ea54 0305 	orrs.w	r3, r4, r5
 8001110:	d1f1      	bne.n	80010f6 <_vfprintf_r+0x60e>
 8001112:	ab2e      	add	r3, sp, #184	; 0xb8
 8001114:	1bdb      	subs	r3, r3, r7
 8001116:	9309      	str	r3, [sp, #36]	; 0x24
 8001118:	e7ab      	b.n	8001072 <_vfprintf_r+0x58a>
 800111a:	f899 6000 	ldrb.w	r6, [r9]
 800111e:	2900      	cmp	r1, #0
 8001120:	f47f ad58 	bne.w	8000bd4 <_vfprintf_r+0xec>
 8001124:	2201      	movs	r2, #1
 8001126:	2120      	movs	r1, #32
 8001128:	e554      	b.n	8000bd4 <_vfprintf_r+0xec>
 800112a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800112e:	f899 6000 	ldrb.w	r6, [r9]
 8001132:	e54f      	b.n	8000bd4 <_vfprintf_r+0xec>
 8001134:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8001138:	2000      	movs	r0, #0
 800113a:	f819 6b01 	ldrb.w	r6, [r9], #1
 800113e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001142:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001146:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800114a:	2b09      	cmp	r3, #9
 800114c:	d9f5      	bls.n	800113a <_vfprintf_r+0x652>
 800114e:	9008      	str	r0, [sp, #32]
 8001150:	e542      	b.n	8000bd8 <_vfprintf_r+0xf0>
 8001152:	f899 6000 	ldrb.w	r6, [r9]
 8001156:	2e2a      	cmp	r6, #42	; 0x2a
 8001158:	f109 0001 	add.w	r0, r9, #1
 800115c:	f000 8707 	beq.w	8001f6e <_vfprintf_r+0x1486>
 8001160:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8001164:	2b09      	cmp	r3, #9
 8001166:	4681      	mov	r9, r0
 8001168:	bf98      	it	ls
 800116a:	2000      	movls	r0, #0
 800116c:	f200 8696 	bhi.w	8001e9c <_vfprintf_r+0x13b4>
 8001170:	f819 6b01 	ldrb.w	r6, [r9], #1
 8001174:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001178:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800117c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8001180:	2b09      	cmp	r3, #9
 8001182:	d9f5      	bls.n	8001170 <_vfprintf_r+0x688>
 8001184:	9004      	str	r0, [sp, #16]
 8001186:	e527      	b.n	8000bd8 <_vfprintf_r+0xf0>
 8001188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800118a:	4bb3      	ldr	r3, [pc, #716]	; (8001458 <_vfprintf_r+0x970>)
 800118c:	6814      	ldr	r4, [r2, #0]
 800118e:	9311      	str	r3, [sp, #68]	; 0x44
 8001190:	2678      	movs	r6, #120	; 0x78
 8001192:	2330      	movs	r3, #48	; 0x30
 8001194:	3204      	adds	r2, #4
 8001196:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800119a:	f04b 0b02 	orr.w	fp, fp, #2
 800119e:	920a      	str	r2, [sp, #40]	; 0x28
 80011a0:	2500      	movs	r5, #0
 80011a2:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
 80011a6:	2302      	movs	r3, #2
 80011a8:	e747      	b.n	800103a <_vfprintf_r+0x552>
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	f040 86ff 	bne.w	8001fae <_vfprintf_r+0x14c6>
 80011b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80011b2:	f01b 0f08 	tst.w	fp, #8
 80011b6:	f105 0507 	add.w	r5, r5, #7
 80011ba:	f000 8485 	beq.w	8001ac8 <_vfprintf_r+0xfe0>
 80011be:	f025 0307 	bic.w	r3, r5, #7
 80011c2:	ed93 7b00 	vldr	d7, [r3]
 80011c6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80011ca:	f103 0208 	add.w	r2, r3, #8
 80011ce:	920a      	str	r2, [sp, #40]	; 0x28
 80011d0:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80011d4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80011d8:	9114      	str	r1, [sp, #80]	; 0x50
 80011da:	9315      	str	r3, [sp, #84]	; 0x54
 80011dc:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	4b9c      	ldr	r3, [pc, #624]	; (800145c <_vfprintf_r+0x974>)
 80011ea:	f005 fe0d 	bl	8006e08 <__aeabi_dcmpun>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	f040 83ef 	bne.w	80019d2 <_vfprintf_r+0xeea>
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	4b98      	ldr	r3, [pc, #608]	; (800145c <_vfprintf_r+0x974>)
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f005 fde5 	bl	8006dcc <__aeabi_dcmple>
 8001202:	2800      	cmp	r0, #0
 8001204:	f040 83e5 	bne.w	80019d2 <_vfprintf_r+0xeea>
 8001208:	2200      	movs	r2, #0
 800120a:	2300      	movs	r3, #0
 800120c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8001210:	f005 fdd2 	bl	8006db8 <__aeabi_dcmplt>
 8001214:	2800      	cmp	r0, #0
 8001216:	f040 85be 	bne.w	8001d96 <_vfprintf_r+0x12ae>
 800121a:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 800121e:	4f90      	ldr	r7, [pc, #576]	; (8001460 <_vfprintf_r+0x978>)
 8001220:	4b90      	ldr	r3, [pc, #576]	; (8001464 <_vfprintf_r+0x97c>)
 8001222:	2203      	movs	r2, #3
 8001224:	2100      	movs	r1, #0
 8001226:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
 800122a:	9203      	str	r2, [sp, #12]
 800122c:	9104      	str	r1, [sp, #16]
 800122e:	9002      	str	r0, [sp, #8]
 8001230:	2e47      	cmp	r6, #71	; 0x47
 8001232:	bfd8      	it	le
 8001234:	461f      	movle	r7, r3
 8001236:	9209      	str	r2, [sp, #36]	; 0x24
 8001238:	910c      	str	r1, [sp, #48]	; 0x30
 800123a:	e5b5      	b.n	8000da8 <_vfprintf_r+0x2c0>
 800123c:	f04b 0b08 	orr.w	fp, fp, #8
 8001240:	f899 6000 	ldrb.w	r6, [r9]
 8001244:	e4c6      	b.n	8000bd4 <_vfprintf_r+0xec>
 8001246:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800124a:	f899 6000 	ldrb.w	r6, [r9]
 800124e:	e4c1      	b.n	8000bd4 <_vfprintf_r+0xec>
 8001250:	f899 6000 	ldrb.w	r6, [r9]
 8001254:	2e6c      	cmp	r6, #108	; 0x6c
 8001256:	bf03      	ittte	eq
 8001258:	f899 6001 	ldrbeq.w	r6, [r9, #1]
 800125c:	f04b 0b20 	orreq.w	fp, fp, #32
 8001260:	f109 0901 	addeq.w	r9, r9, #1
 8001264:	f04b 0b10 	orrne.w	fp, fp, #16
 8001268:	e4b4      	b.n	8000bd4 <_vfprintf_r+0xec>
 800126a:	2a00      	cmp	r2, #0
 800126c:	f040 8697 	bne.w	8001f9e <_vfprintf_r+0x14b6>
 8001270:	f01b 0f20 	tst.w	fp, #32
 8001274:	f040 8485 	bne.w	8001b82 <_vfprintf_r+0x109a>
 8001278:	f01b 0f10 	tst.w	fp, #16
 800127c:	d169      	bne.n	8001352 <_vfprintf_r+0x86a>
 800127e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8001282:	d066      	beq.n	8001352 <_vfprintf_r+0x86a>
 8001284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	3204      	adds	r2, #4
 800128a:	920a      	str	r2, [sp, #40]	; 0x28
 800128c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	e46c      	b.n	8000b6e <_vfprintf_r+0x86>
 8001294:	f04b 0b20 	orr.w	fp, fp, #32
 8001298:	f899 6000 	ldrb.w	r6, [r9]
 800129c:	e49a      	b.n	8000bd4 <_vfprintf_r+0xec>
 800129e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80012a0:	f8cd b008 	str.w	fp, [sp, #8]
 80012a4:	680a      	ldr	r2, [r1, #0]
 80012a6:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80012aa:	2300      	movs	r3, #0
 80012ac:	460a      	mov	r2, r1
 80012ae:	469a      	mov	sl, r3
 80012b0:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80012b4:	3204      	adds	r2, #4
 80012b6:	2301      	movs	r3, #1
 80012b8:	9303      	str	r3, [sp, #12]
 80012ba:	f8cd a010 	str.w	sl, [sp, #16]
 80012be:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80012c2:	920a      	str	r2, [sp, #40]	; 0x28
 80012c4:	9309      	str	r3, [sp, #36]	; 0x24
 80012c6:	af24      	add	r7, sp, #144	; 0x90
 80012c8:	e574      	b.n	8000db4 <_vfprintf_r+0x2cc>
 80012ca:	2a00      	cmp	r2, #0
 80012cc:	f43f aee5 	beq.w	800109a <_vfprintf_r+0x5b2>
 80012d0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 80012d4:	e6e1      	b.n	800109a <_vfprintf_r+0x5b2>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	f040 8665 	bne.w	8001fa6 <_vfprintf_r+0x14be>
 80012dc:	4b62      	ldr	r3, [pc, #392]	; (8001468 <_vfprintf_r+0x980>)
 80012de:	9311      	str	r3, [sp, #68]	; 0x44
 80012e0:	e689      	b.n	8000ff6 <_vfprintf_r+0x50e>
 80012e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	9308      	str	r3, [sp, #32]
 80012e8:	4618      	mov	r0, r3
 80012ea:	2800      	cmp	r0, #0
 80012ec:	4623      	mov	r3, r4
 80012ee:	f103 0304 	add.w	r3, r3, #4
 80012f2:	f6ff acfd 	blt.w	8000cf0 <_vfprintf_r+0x208>
 80012f6:	930a      	str	r3, [sp, #40]	; 0x28
 80012f8:	f899 6000 	ldrb.w	r6, [r9]
 80012fc:	e46a      	b.n	8000bd4 <_vfprintf_r+0xec>
 80012fe:	f899 6000 	ldrb.w	r6, [r9]
 8001302:	2201      	movs	r2, #1
 8001304:	212b      	movs	r1, #43	; 0x2b
 8001306:	e465      	b.n	8000bd4 <_vfprintf_r+0xec>
 8001308:	f04b 0b01 	orr.w	fp, fp, #1
 800130c:	f899 6000 	ldrb.w	r6, [r9]
 8001310:	e460      	b.n	8000bd4 <_vfprintf_r+0xec>
 8001312:	2a00      	cmp	r2, #0
 8001314:	f040 8638 	bne.w	8001f88 <_vfprintf_r+0x14a0>
 8001318:	b326      	cbz	r6, 8001364 <_vfprintf_r+0x87c>
 800131a:	2300      	movs	r3, #0
 800131c:	2201      	movs	r2, #1
 800131e:	469a      	mov	sl, r3
 8001320:	9203      	str	r2, [sp, #12]
 8001322:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
 8001326:	f8cd b008 	str.w	fp, [sp, #8]
 800132a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800132e:	9304      	str	r3, [sp, #16]
 8001330:	930c      	str	r3, [sp, #48]	; 0x30
 8001332:	9209      	str	r2, [sp, #36]	; 0x24
 8001334:	af24      	add	r7, sp, #144	; 0x90
 8001336:	e53d      	b.n	8000db4 <_vfprintf_r+0x2cc>
 8001338:	3204      	adds	r2, #4
 800133a:	681c      	ldr	r4, [r3, #0]
 800133c:	920a      	str	r2, [sp, #40]	; 0x28
 800133e:	2301      	movs	r3, #1
 8001340:	2500      	movs	r5, #0
 8001342:	e67a      	b.n	800103a <_vfprintf_r+0x552>
 8001344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001346:	460a      	mov	r2, r1
 8001348:	3204      	adds	r2, #4
 800134a:	680c      	ldr	r4, [r1, #0]
 800134c:	920a      	str	r2, [sp, #40]	; 0x28
 800134e:	2500      	movs	r5, #0
 8001350:	e673      	b.n	800103a <_vfprintf_r+0x552>
 8001352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001354:	6813      	ldr	r3, [r2, #0]
 8001356:	3204      	adds	r2, #4
 8001358:	920a      	str	r2, [sp, #40]	; 0x28
 800135a:	9a07      	ldr	r2, [sp, #28]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e406      	b.n	8000b6e <_vfprintf_r+0x86>
 8001360:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001362:	e579      	b.n	8000e58 <_vfprintf_r+0x370>
 8001364:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001366:	f8dd a014 	ldr.w	sl, [sp, #20]
 800136a:	b123      	cbz	r3, 8001376 <_vfprintf_r+0x88e>
 800136c:	9806      	ldr	r0, [sp, #24]
 800136e:	aa21      	add	r2, sp, #132	; 0x84
 8001370:	4651      	mov	r1, sl
 8001372:	f004 f8d3 	bl	800551c <__sprint_r>
 8001376:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800137a:	065b      	lsls	r3, r3, #25
 800137c:	f57f acdb 	bpl.w	8000d36 <_vfprintf_r+0x24e>
 8001380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001384:	9307      	str	r3, [sp, #28]
 8001386:	e4d6      	b.n	8000d36 <_vfprintf_r+0x24e>
 8001388:	2e65      	cmp	r6, #101	; 0x65
 800138a:	f340 80b7 	ble.w	80014fc <_vfprintf_r+0xa14>
 800138e:	2200      	movs	r2, #0
 8001390:	2300      	movs	r3, #0
 8001392:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8001396:	f005 fd05 	bl	8006da4 <__aeabi_dcmpeq>
 800139a:	2800      	cmp	r0, #0
 800139c:	f000 8161 	beq.w	8001662 <_vfprintf_r+0xb7a>
 80013a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <_vfprintf_r+0x984>)
 80013a4:	f8c8 2000 	str.w	r2, [r8]
 80013a8:	3301      	adds	r3, #1
 80013aa:	3401      	adds	r4, #1
 80013ac:	2201      	movs	r2, #1
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	9423      	str	r4, [sp, #140]	; 0x8c
 80013b2:	9322      	str	r3, [sp, #136]	; 0x88
 80013b4:	f8c8 2004 	str.w	r2, [r8, #4]
 80013b8:	f300 839e 	bgt.w	8001af8 <_vfprintf_r+0x1010>
 80013bc:	f108 0808 	add.w	r8, r8, #8
 80013c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80013c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80013c4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80013c6:	4293      	cmp	r3, r2
 80013c8:	db03      	blt.n	80013d2 <_vfprintf_r+0x8ea>
 80013ca:	9b02      	ldr	r3, [sp, #8]
 80013cc:	07de      	lsls	r6, r3, #31
 80013ce:	f57f adbe 	bpl.w	8000f4e <_vfprintf_r+0x466>
 80013d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80013d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80013d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80013d8:	f8c8 2000 	str.w	r2, [r8]
 80013dc:	3301      	adds	r3, #1
 80013de:	440c      	add	r4, r1
 80013e0:	2b07      	cmp	r3, #7
 80013e2:	f8c8 1004 	str.w	r1, [r8, #4]
 80013e6:	9423      	str	r4, [sp, #140]	; 0x8c
 80013e8:	9322      	str	r3, [sp, #136]	; 0x88
 80013ea:	f300 8406 	bgt.w	8001bfa <_vfprintf_r+0x1112>
 80013ee:	f108 0808 	add.w	r8, r8, #8
 80013f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80013f4:	1e5e      	subs	r6, r3, #1
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	f77f ada9 	ble.w	8000f4e <_vfprintf_r+0x466>
 80013fc:	2e10      	cmp	r6, #16
 80013fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001400:	4d1b      	ldr	r5, [pc, #108]	; (8001470 <_vfprintf_r+0x988>)
 8001402:	f340 81d7 	ble.w	80017b4 <_vfprintf_r+0xccc>
 8001406:	2710      	movs	r7, #16
 8001408:	f8dd a018 	ldr.w	sl, [sp, #24]
 800140c:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001410:	e005      	b.n	800141e <_vfprintf_r+0x936>
 8001412:	f108 0808 	add.w	r8, r8, #8
 8001416:	3e10      	subs	r6, #16
 8001418:	2e10      	cmp	r6, #16
 800141a:	f340 81cb 	ble.w	80017b4 <_vfprintf_r+0xccc>
 800141e:	3301      	adds	r3, #1
 8001420:	3410      	adds	r4, #16
 8001422:	2b07      	cmp	r3, #7
 8001424:	9423      	str	r4, [sp, #140]	; 0x8c
 8001426:	9322      	str	r3, [sp, #136]	; 0x88
 8001428:	e888 00a0 	stmia.w	r8, {r5, r7}
 800142c:	ddf1      	ble.n	8001412 <_vfprintf_r+0x92a>
 800142e:	aa21      	add	r2, sp, #132	; 0x84
 8001430:	4659      	mov	r1, fp
 8001432:	4650      	mov	r0, sl
 8001434:	f004 f872 	bl	800551c <__sprint_r>
 8001438:	2800      	cmp	r0, #0
 800143a:	f040 83db 	bne.w	8001bf4 <_vfprintf_r+0x110c>
 800143e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001440:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001442:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001446:	e7e6      	b.n	8001416 <_vfprintf_r+0x92e>
 8001448:	46aa      	mov	sl, r5
 800144a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800144e:	065b      	lsls	r3, r3, #25
 8001450:	f57f ac71 	bpl.w	8000d36 <_vfprintf_r+0x24e>
 8001454:	e794      	b.n	8001380 <_vfprintf_r+0x898>
 8001456:	bf00      	nop
 8001458:	0801b548 	.word	0x0801b548
 800145c:	7fefffff 	.word	0x7fefffff
 8001460:	0801b528 	.word	0x0801b528
 8001464:	0801b524 	.word	0x0801b524
 8001468:	0801b534 	.word	0x0801b534
 800146c:	0801b564 	.word	0x0801b564
 8001470:	0800c1d4 	.word	0x0800c1d4
 8001474:	9b08      	ldr	r3, [sp, #32]
 8001476:	9a03      	ldr	r2, [sp, #12]
 8001478:	eba3 0a02 	sub.w	sl, r3, r2
 800147c:	f1ba 0f00 	cmp.w	sl, #0
 8001480:	f77f ad0f 	ble.w	8000ea2 <_vfprintf_r+0x3ba>
 8001484:	f1ba 0f10 	cmp.w	sl, #16
 8001488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800148a:	4db9      	ldr	r5, [pc, #740]	; (8001770 <_vfprintf_r+0xc88>)
 800148c:	dd2a      	ble.n	80014e4 <_vfprintf_r+0x9fc>
 800148e:	4642      	mov	r2, r8
 8001490:	4621      	mov	r1, r4
 8001492:	46b0      	mov	r8, r6
 8001494:	f04f 0b10 	mov.w	fp, #16
 8001498:	462e      	mov	r6, r5
 800149a:	9c06      	ldr	r4, [sp, #24]
 800149c:	9d05      	ldr	r5, [sp, #20]
 800149e:	e006      	b.n	80014ae <_vfprintf_r+0x9c6>
 80014a0:	f1aa 0a10 	sub.w	sl, sl, #16
 80014a4:	f1ba 0f10 	cmp.w	sl, #16
 80014a8:	f102 0208 	add.w	r2, r2, #8
 80014ac:	dd16      	ble.n	80014dc <_vfprintf_r+0x9f4>
 80014ae:	3301      	adds	r3, #1
 80014b0:	3110      	adds	r1, #16
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	9123      	str	r1, [sp, #140]	; 0x8c
 80014b6:	9322      	str	r3, [sp, #136]	; 0x88
 80014b8:	e882 0840 	stmia.w	r2, {r6, fp}
 80014bc:	ddf0      	ble.n	80014a0 <_vfprintf_r+0x9b8>
 80014be:	aa21      	add	r2, sp, #132	; 0x84
 80014c0:	4629      	mov	r1, r5
 80014c2:	4620      	mov	r0, r4
 80014c4:	f004 f82a 	bl	800551c <__sprint_r>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d1bd      	bne.n	8001448 <_vfprintf_r+0x960>
 80014cc:	f1aa 0a10 	sub.w	sl, sl, #16
 80014d0:	f1ba 0f10 	cmp.w	sl, #16
 80014d4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80014d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014d8:	aa2e      	add	r2, sp, #184	; 0xb8
 80014da:	dce8      	bgt.n	80014ae <_vfprintf_r+0x9c6>
 80014dc:	4635      	mov	r5, r6
 80014de:	460c      	mov	r4, r1
 80014e0:	4646      	mov	r6, r8
 80014e2:	4690      	mov	r8, r2
 80014e4:	3301      	adds	r3, #1
 80014e6:	4454      	add	r4, sl
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	9423      	str	r4, [sp, #140]	; 0x8c
 80014ec:	9322      	str	r3, [sp, #136]	; 0x88
 80014ee:	e888 0420 	stmia.w	r8, {r5, sl}
 80014f2:	f300 8257 	bgt.w	80019a4 <_vfprintf_r+0xebc>
 80014f6:	f108 0808 	add.w	r8, r8, #8
 80014fa:	e4d2      	b.n	8000ea2 <_vfprintf_r+0x3ba>
 80014fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80014fe:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001500:	2b01      	cmp	r3, #1
 8001502:	f340 81db 	ble.w	80018bc <_vfprintf_r+0xdd4>
 8001506:	3601      	adds	r6, #1
 8001508:	3401      	adds	r4, #1
 800150a:	2301      	movs	r3, #1
 800150c:	2e07      	cmp	r6, #7
 800150e:	9423      	str	r4, [sp, #140]	; 0x8c
 8001510:	9622      	str	r6, [sp, #136]	; 0x88
 8001512:	f8c8 7000 	str.w	r7, [r8]
 8001516:	f8c8 3004 	str.w	r3, [r8, #4]
 800151a:	f300 81ec 	bgt.w	80018f6 <_vfprintf_r+0xe0e>
 800151e:	f108 0808 	add.w	r8, r8, #8
 8001522:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001524:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001526:	f8c8 3000 	str.w	r3, [r8]
 800152a:	3601      	adds	r6, #1
 800152c:	4414      	add	r4, r2
 800152e:	2e07      	cmp	r6, #7
 8001530:	9423      	str	r4, [sp, #140]	; 0x8c
 8001532:	9622      	str	r6, [sp, #136]	; 0x88
 8001534:	f8c8 2004 	str.w	r2, [r8, #4]
 8001538:	f300 81f4 	bgt.w	8001924 <_vfprintf_r+0xe3c>
 800153c:	f108 0808 	add.w	r8, r8, #8
 8001540:	2300      	movs	r3, #0
 8001542:	2200      	movs	r2, #0
 8001544:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8001548:	f005 fc2c 	bl	8006da4 <__aeabi_dcmpeq>
 800154c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800154e:	2800      	cmp	r0, #0
 8001550:	f040 8100 	bne.w	8001754 <_vfprintf_r+0xc6c>
 8001554:	3b01      	subs	r3, #1
 8001556:	3601      	adds	r6, #1
 8001558:	3701      	adds	r7, #1
 800155a:	441c      	add	r4, r3
 800155c:	2e07      	cmp	r6, #7
 800155e:	9622      	str	r6, [sp, #136]	; 0x88
 8001560:	9423      	str	r4, [sp, #140]	; 0x8c
 8001562:	f8c8 7000 	str.w	r7, [r8]
 8001566:	f8c8 3004 	str.w	r3, [r8, #4]
 800156a:	f300 81b7 	bgt.w	80018dc <_vfprintf_r+0xdf4>
 800156e:	f108 0808 	add.w	r8, r8, #8
 8001572:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001574:	f8c8 2004 	str.w	r2, [r8, #4]
 8001578:	3601      	adds	r6, #1
 800157a:	4414      	add	r4, r2
 800157c:	ab1d      	add	r3, sp, #116	; 0x74
 800157e:	2e07      	cmp	r6, #7
 8001580:	9423      	str	r4, [sp, #140]	; 0x8c
 8001582:	9622      	str	r6, [sp, #136]	; 0x88
 8001584:	f8c8 3000 	str.w	r3, [r8]
 8001588:	f77f acdf 	ble.w	8000f4a <_vfprintf_r+0x462>
 800158c:	aa21      	add	r2, sp, #132	; 0x84
 800158e:	9905      	ldr	r1, [sp, #20]
 8001590:	9806      	ldr	r0, [sp, #24]
 8001592:	f003 ffc3 	bl	800551c <__sprint_r>
 8001596:	b958      	cbnz	r0, 80015b0 <_vfprintf_r+0xac8>
 8001598:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800159a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800159e:	e4d6      	b.n	8000f4e <_vfprintf_r+0x466>
 80015a0:	aa21      	add	r2, sp, #132	; 0x84
 80015a2:	9905      	ldr	r1, [sp, #20]
 80015a4:	9806      	ldr	r0, [sp, #24]
 80015a6:	f003 ffb9 	bl	800551c <__sprint_r>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	f43f ad19 	beq.w	8000fe2 <_vfprintf_r+0x4fa>
 80015b0:	f8dd a014 	ldr.w	sl, [sp, #20]
 80015b4:	e6df      	b.n	8001376 <_vfprintf_r+0x88e>
 80015b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f000 810f 	beq.w	80017de <_vfprintf_r+0xcf6>
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d125      	bne.n	8001610 <_vfprintf_r+0xb28>
 80015c4:	f8cd b008 	str.w	fp, [sp, #8]
 80015c8:	2400      	movs	r4, #0
 80015ca:	2500      	movs	r5, #0
 80015cc:	e591      	b.n	80010f2 <_vfprintf_r+0x60a>
 80015ce:	aa21      	add	r2, sp, #132	; 0x84
 80015d0:	9905      	ldr	r1, [sp, #20]
 80015d2:	9806      	ldr	r0, [sp, #24]
 80015d4:	f003 ffa2 	bl	800551c <__sprint_r>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1e9      	bne.n	80015b0 <_vfprintf_r+0xac8>
 80015dc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80015de:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80015e2:	e4a1      	b.n	8000f28 <_vfprintf_r+0x440>
 80015e4:	aa21      	add	r2, sp, #132	; 0x84
 80015e6:	9905      	ldr	r1, [sp, #20]
 80015e8:	9806      	ldr	r0, [sp, #24]
 80015ea:	f003 ff97 	bl	800551c <__sprint_r>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	d1de      	bne.n	80015b0 <_vfprintf_r+0xac8>
 80015f2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80015f4:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80015f8:	e440      	b.n	8000e7c <_vfprintf_r+0x394>
 80015fa:	aa21      	add	r2, sp, #132	; 0x84
 80015fc:	9905      	ldr	r1, [sp, #20]
 80015fe:	9806      	ldr	r0, [sp, #24]
 8001600:	f003 ff8c 	bl	800551c <__sprint_r>
 8001604:	2800      	cmp	r0, #0
 8001606:	d1d3      	bne.n	80015b0 <_vfprintf_r+0xac8>
 8001608:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800160a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800160e:	e445      	b.n	8000e9c <_vfprintf_r+0x3b4>
 8001610:	f8cd b008 	str.w	fp, [sp, #8]
 8001614:	2400      	movs	r4, #0
 8001616:	2500      	movs	r5, #0
 8001618:	a92e      	add	r1, sp, #184	; 0xb8
 800161a:	e000      	b.n	800161e <_vfprintf_r+0xb36>
 800161c:	4639      	mov	r1, r7
 800161e:	08e2      	lsrs	r2, r4, #3
 8001620:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8001624:	08e8      	lsrs	r0, r5, #3
 8001626:	f004 0307 	and.w	r3, r4, #7
 800162a:	4605      	mov	r5, r0
 800162c:	4614      	mov	r4, r2
 800162e:	3330      	adds	r3, #48	; 0x30
 8001630:	ea54 0205 	orrs.w	r2, r4, r5
 8001634:	f801 3c01 	strb.w	r3, [r1, #-1]
 8001638:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800163c:	d1ee      	bne.n	800161c <_vfprintf_r+0xb34>
 800163e:	9a02      	ldr	r2, [sp, #8]
 8001640:	07d2      	lsls	r2, r2, #31
 8001642:	f57f ad66 	bpl.w	8001112 <_vfprintf_r+0x62a>
 8001646:	2b30      	cmp	r3, #48	; 0x30
 8001648:	f43f ad63 	beq.w	8001112 <_vfprintf_r+0x62a>
 800164c:	2330      	movs	r3, #48	; 0x30
 800164e:	3902      	subs	r1, #2
 8001650:	f807 3c01 	strb.w	r3, [r7, #-1]
 8001654:	ab2e      	add	r3, sp, #184	; 0xb8
 8001656:	1a5b      	subs	r3, r3, r1
 8001658:	9309      	str	r3, [sp, #36]	; 0x24
 800165a:	460f      	mov	r7, r1
 800165c:	e509      	b.n	8001072 <_vfprintf_r+0x58a>
 800165e:	2302      	movs	r3, #2
 8001660:	e4eb      	b.n	800103a <_vfprintf_r+0x552>
 8001662:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001664:	2900      	cmp	r1, #0
 8001666:	f340 8255 	ble.w	8001b14 <_vfprintf_r+0x102c>
 800166a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800166c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800166e:	4293      	cmp	r3, r2
 8001670:	bfa8      	it	ge
 8001672:	4613      	movge	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	461e      	mov	r6, r3
 8001678:	dd0d      	ble.n	8001696 <_vfprintf_r+0xbae>
 800167a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800167c:	f8c8 7000 	str.w	r7, [r8]
 8001680:	3301      	adds	r3, #1
 8001682:	4434      	add	r4, r6
 8001684:	2b07      	cmp	r3, #7
 8001686:	9423      	str	r4, [sp, #140]	; 0x8c
 8001688:	f8c8 6004 	str.w	r6, [r8, #4]
 800168c:	9322      	str	r3, [sp, #136]	; 0x88
 800168e:	f300 8331 	bgt.w	8001cf4 <_vfprintf_r+0x120c>
 8001692:	f108 0808 	add.w	r8, r8, #8
 8001696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001698:	2e00      	cmp	r6, #0
 800169a:	bfa8      	it	ge
 800169c:	1b9b      	subge	r3, r3, r6
 800169e:	2b00      	cmp	r3, #0
 80016a0:	461e      	mov	r6, r3
 80016a2:	f340 80b0 	ble.w	8001806 <_vfprintf_r+0xd1e>
 80016a6:	2e10      	cmp	r6, #16
 80016a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016aa:	4d31      	ldr	r5, [pc, #196]	; (8001770 <_vfprintf_r+0xc88>)
 80016ac:	f340 8218 	ble.w	8001ae0 <_vfprintf_r+0xff8>
 80016b0:	4622      	mov	r2, r4
 80016b2:	f04f 0a10 	mov.w	sl, #16
 80016b6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80016ba:	9c05      	ldr	r4, [sp, #20]
 80016bc:	e005      	b.n	80016ca <_vfprintf_r+0xbe2>
 80016be:	f108 0808 	add.w	r8, r8, #8
 80016c2:	3e10      	subs	r6, #16
 80016c4:	2e10      	cmp	r6, #16
 80016c6:	f340 820a 	ble.w	8001ade <_vfprintf_r+0xff6>
 80016ca:	3301      	adds	r3, #1
 80016cc:	3210      	adds	r2, #16
 80016ce:	2b07      	cmp	r3, #7
 80016d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80016d2:	9322      	str	r3, [sp, #136]	; 0x88
 80016d4:	e888 0420 	stmia.w	r8, {r5, sl}
 80016d8:	ddf1      	ble.n	80016be <_vfprintf_r+0xbd6>
 80016da:	aa21      	add	r2, sp, #132	; 0x84
 80016dc:	4621      	mov	r1, r4
 80016de:	4658      	mov	r0, fp
 80016e0:	f003 ff1c 	bl	800551c <__sprint_r>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	f040 8353 	bne.w	8001d90 <_vfprintf_r+0x12a8>
 80016ea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80016ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80016ee:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80016f2:	e7e6      	b.n	80016c2 <_vfprintf_r+0xbda>
 80016f4:	2d00      	cmp	r5, #0
 80016f6:	bf08      	it	eq
 80016f8:	2c0a      	cmpeq	r4, #10
 80016fa:	d36e      	bcc.n	80017da <_vfprintf_r+0xcf2>
 80016fc:	af2e      	add	r7, sp, #184	; 0xb8
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	220a      	movs	r2, #10
 8001704:	2300      	movs	r3, #0
 8001706:	f005 fbbd 	bl	8006e84 <__aeabi_uldivmod>
 800170a:	3230      	adds	r2, #48	; 0x30
 800170c:	f807 2d01 	strb.w	r2, [r7, #-1]!
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	2300      	movs	r3, #0
 8001716:	220a      	movs	r2, #10
 8001718:	f005 fbb4 	bl	8006e84 <__aeabi_uldivmod>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	ea54 0305 	orrs.w	r3, r4, r5
 8001724:	d1eb      	bne.n	80016fe <_vfprintf_r+0xc16>
 8001726:	ab2e      	add	r3, sp, #184	; 0xb8
 8001728:	1bdb      	subs	r3, r3, r7
 800172a:	9309      	str	r3, [sp, #36]	; 0x24
 800172c:	e4a1      	b.n	8001072 <_vfprintf_r+0x58a>
 800172e:	9b04      	ldr	r3, [sp, #16]
 8001730:	9309      	str	r3, [sp, #36]	; 0x24
 8001732:	af2e      	add	r7, sp, #184	; 0xb8
 8001734:	e49d      	b.n	8001072 <_vfprintf_r+0x58a>
 8001736:	aa21      	add	r2, sp, #132	; 0x84
 8001738:	9905      	ldr	r1, [sp, #20]
 800173a:	9806      	ldr	r0, [sp, #24]
 800173c:	f003 feee 	bl	800551c <__sprint_r>
 8001740:	2800      	cmp	r0, #0
 8001742:	f47f af35 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001746:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 800174a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800174c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001750:	f7ff bb82 	b.w	8000e58 <_vfprintf_r+0x370>
 8001754:	1e5f      	subs	r7, r3, #1
 8001756:	2f00      	cmp	r7, #0
 8001758:	f77f af0b 	ble.w	8001572 <_vfprintf_r+0xa8a>
 800175c:	2f10      	cmp	r7, #16
 800175e:	4d04      	ldr	r5, [pc, #16]	; (8001770 <_vfprintf_r+0xc88>)
 8001760:	f340 80d6 	ble.w	8001910 <_vfprintf_r+0xe28>
 8001764:	f04f 0a10 	mov.w	sl, #16
 8001768:	f8dd b018 	ldr.w	fp, [sp, #24]
 800176c:	e008      	b.n	8001780 <_vfprintf_r+0xc98>
 800176e:	bf00      	nop
 8001770:	0800c1d4 	.word	0x0800c1d4
 8001774:	f108 0808 	add.w	r8, r8, #8
 8001778:	3f10      	subs	r7, #16
 800177a:	2f10      	cmp	r7, #16
 800177c:	f340 80c8 	ble.w	8001910 <_vfprintf_r+0xe28>
 8001780:	3601      	adds	r6, #1
 8001782:	3410      	adds	r4, #16
 8001784:	2e07      	cmp	r6, #7
 8001786:	9423      	str	r4, [sp, #140]	; 0x8c
 8001788:	9622      	str	r6, [sp, #136]	; 0x88
 800178a:	e888 0420 	stmia.w	r8, {r5, sl}
 800178e:	ddf1      	ble.n	8001774 <_vfprintf_r+0xc8c>
 8001790:	aa21      	add	r2, sp, #132	; 0x84
 8001792:	9905      	ldr	r1, [sp, #20]
 8001794:	4658      	mov	r0, fp
 8001796:	f003 fec1 	bl	800551c <__sprint_r>
 800179a:	2800      	cmp	r0, #0
 800179c:	f47f af08 	bne.w	80015b0 <_vfprintf_r+0xac8>
 80017a0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80017a2:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80017a4:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80017a8:	e7e6      	b.n	8001778 <_vfprintf_r+0xc90>
 80017aa:	681c      	ldr	r4, [r3, #0]
 80017ac:	3304      	adds	r3, #4
 80017ae:	930a      	str	r3, [sp, #40]	; 0x28
 80017b0:	2500      	movs	r5, #0
 80017b2:	e432      	b.n	800101a <_vfprintf_r+0x532>
 80017b4:	3301      	adds	r3, #1
 80017b6:	4434      	add	r4, r6
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	9423      	str	r4, [sp, #140]	; 0x8c
 80017bc:	9322      	str	r3, [sp, #136]	; 0x88
 80017be:	e888 0060 	stmia.w	r8, {r5, r6}
 80017c2:	f77f abc2 	ble.w	8000f4a <_vfprintf_r+0x462>
 80017c6:	e6e1      	b.n	800158c <_vfprintf_r+0xaa4>
 80017c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80017ca:	6814      	ldr	r4, [r2, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	3304      	adds	r3, #4
 80017d0:	17e5      	asrs	r5, r4, #31
 80017d2:	930a      	str	r3, [sp, #40]	; 0x28
 80017d4:	4622      	mov	r2, r4
 80017d6:	462b      	mov	r3, r5
 80017d8:	e473      	b.n	80010c2 <_vfprintf_r+0x5da>
 80017da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80017de:	f8cd b008 	str.w	fp, [sp, #8]
 80017e2:	af3e      	add	r7, sp, #248	; 0xf8
 80017e4:	3430      	adds	r4, #48	; 0x30
 80017e6:	2301      	movs	r3, #1
 80017e8:	f807 4d41 	strb.w	r4, [r7, #-65]!
 80017ec:	9309      	str	r3, [sp, #36]	; 0x24
 80017ee:	e440      	b.n	8001072 <_vfprintf_r+0x58a>
 80017f0:	aa21      	add	r2, sp, #132	; 0x84
 80017f2:	9905      	ldr	r1, [sp, #20]
 80017f4:	9806      	ldr	r0, [sp, #24]
 80017f6:	f003 fe91 	bl	800551c <__sprint_r>
 80017fa:	2800      	cmp	r0, #0
 80017fc:	f47f aed8 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001800:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001802:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001806:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800180a:	4293      	cmp	r3, r2
 800180c:	db45      	blt.n	800189a <_vfprintf_r+0xdb2>
 800180e:	9a02      	ldr	r2, [sp, #8]
 8001810:	07d0      	lsls	r0, r2, #31
 8001812:	d442      	bmi.n	800189a <_vfprintf_r+0xdb2>
 8001814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001816:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	1a56      	subs	r6, r2, r1
 800181c:	429e      	cmp	r6, r3
 800181e:	bfa8      	it	ge
 8001820:	461e      	movge	r6, r3
 8001822:	2e00      	cmp	r6, #0
 8001824:	dd0e      	ble.n	8001844 <_vfprintf_r+0xd5c>
 8001826:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001828:	f8c8 6004 	str.w	r6, [r8, #4]
 800182c:	3201      	adds	r2, #1
 800182e:	440f      	add	r7, r1
 8001830:	4434      	add	r4, r6
 8001832:	2a07      	cmp	r2, #7
 8001834:	f8c8 7000 	str.w	r7, [r8]
 8001838:	9423      	str	r4, [sp, #140]	; 0x8c
 800183a:	9222      	str	r2, [sp, #136]	; 0x88
 800183c:	f300 8275 	bgt.w	8001d2a <_vfprintf_r+0x1242>
 8001840:	f108 0808 	add.w	r8, r8, #8
 8001844:	2e00      	cmp	r6, #0
 8001846:	bfac      	ite	ge
 8001848:	1b9e      	subge	r6, r3, r6
 800184a:	461e      	movlt	r6, r3
 800184c:	2e00      	cmp	r6, #0
 800184e:	f77f ab7e 	ble.w	8000f4e <_vfprintf_r+0x466>
 8001852:	2e10      	cmp	r6, #16
 8001854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001856:	4dae      	ldr	r5, [pc, #696]	; (8001b10 <_vfprintf_r+0x1028>)
 8001858:	ddac      	ble.n	80017b4 <_vfprintf_r+0xccc>
 800185a:	2710      	movs	r7, #16
 800185c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001860:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001864:	e004      	b.n	8001870 <_vfprintf_r+0xd88>
 8001866:	f108 0808 	add.w	r8, r8, #8
 800186a:	3e10      	subs	r6, #16
 800186c:	2e10      	cmp	r6, #16
 800186e:	dda1      	ble.n	80017b4 <_vfprintf_r+0xccc>
 8001870:	3301      	adds	r3, #1
 8001872:	3410      	adds	r4, #16
 8001874:	2b07      	cmp	r3, #7
 8001876:	9423      	str	r4, [sp, #140]	; 0x8c
 8001878:	9322      	str	r3, [sp, #136]	; 0x88
 800187a:	e888 00a0 	stmia.w	r8, {r5, r7}
 800187e:	ddf2      	ble.n	8001866 <_vfprintf_r+0xd7e>
 8001880:	aa21      	add	r2, sp, #132	; 0x84
 8001882:	4659      	mov	r1, fp
 8001884:	4650      	mov	r0, sl
 8001886:	f003 fe49 	bl	800551c <__sprint_r>
 800188a:	2800      	cmp	r0, #0
 800188c:	f040 81b2 	bne.w	8001bf4 <_vfprintf_r+0x110c>
 8001890:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001894:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001898:	e7e7      	b.n	800186a <_vfprintf_r+0xd82>
 800189a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800189c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800189e:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018a0:	f8c8 1000 	str.w	r1, [r8]
 80018a4:	3201      	adds	r2, #1
 80018a6:	4404      	add	r4, r0
 80018a8:	2a07      	cmp	r2, #7
 80018aa:	9423      	str	r4, [sp, #140]	; 0x8c
 80018ac:	f8c8 0004 	str.w	r0, [r8, #4]
 80018b0:	9222      	str	r2, [sp, #136]	; 0x88
 80018b2:	f300 822d 	bgt.w	8001d10 <_vfprintf_r+0x1228>
 80018b6:	f108 0808 	add.w	r8, r8, #8
 80018ba:	e7ab      	b.n	8001814 <_vfprintf_r+0xd2c>
 80018bc:	9b02      	ldr	r3, [sp, #8]
 80018be:	07d9      	lsls	r1, r3, #31
 80018c0:	f53f ae21 	bmi.w	8001506 <_vfprintf_r+0xa1e>
 80018c4:	3601      	adds	r6, #1
 80018c6:	3401      	adds	r4, #1
 80018c8:	2301      	movs	r3, #1
 80018ca:	2e07      	cmp	r6, #7
 80018cc:	9423      	str	r4, [sp, #140]	; 0x8c
 80018ce:	9622      	str	r6, [sp, #136]	; 0x88
 80018d0:	f8c8 7000 	str.w	r7, [r8]
 80018d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80018d8:	f77f ae49 	ble.w	800156e <_vfprintf_r+0xa86>
 80018dc:	aa21      	add	r2, sp, #132	; 0x84
 80018de:	9905      	ldr	r1, [sp, #20]
 80018e0:	9806      	ldr	r0, [sp, #24]
 80018e2:	f003 fe1b 	bl	800551c <__sprint_r>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	f47f ae62 	bne.w	80015b0 <_vfprintf_r+0xac8>
 80018ec:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80018ee:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80018f0:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80018f4:	e63d      	b.n	8001572 <_vfprintf_r+0xa8a>
 80018f6:	aa21      	add	r2, sp, #132	; 0x84
 80018f8:	9905      	ldr	r1, [sp, #20]
 80018fa:	9806      	ldr	r0, [sp, #24]
 80018fc:	f003 fe0e 	bl	800551c <__sprint_r>
 8001900:	2800      	cmp	r0, #0
 8001902:	f47f ae55 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001906:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001908:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800190a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800190e:	e608      	b.n	8001522 <_vfprintf_r+0xa3a>
 8001910:	3601      	adds	r6, #1
 8001912:	443c      	add	r4, r7
 8001914:	2e07      	cmp	r6, #7
 8001916:	9423      	str	r4, [sp, #140]	; 0x8c
 8001918:	9622      	str	r6, [sp, #136]	; 0x88
 800191a:	e888 00a0 	stmia.w	r8, {r5, r7}
 800191e:	f77f ae26 	ble.w	800156e <_vfprintf_r+0xa86>
 8001922:	e7db      	b.n	80018dc <_vfprintf_r+0xdf4>
 8001924:	aa21      	add	r2, sp, #132	; 0x84
 8001926:	9905      	ldr	r1, [sp, #20]
 8001928:	9806      	ldr	r0, [sp, #24]
 800192a:	f003 fdf7 	bl	800551c <__sprint_r>
 800192e:	2800      	cmp	r0, #0
 8001930:	f47f ae3e 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001934:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001936:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001938:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800193c:	e600      	b.n	8001540 <_vfprintf_r+0xa58>
 800193e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001940:	3507      	adds	r5, #7
 8001942:	f025 0307 	bic.w	r3, r5, #7
 8001946:	f103 0208 	add.w	r2, r3, #8
 800194a:	920a      	str	r2, [sp, #40]	; 0x28
 800194c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001950:	f7ff bb63 	b.w	800101a <_vfprintf_r+0x532>
 8001954:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001956:	3507      	adds	r5, #7
 8001958:	f025 0507 	bic.w	r5, r5, #7
 800195c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001960:	f105 0108 	add.w	r1, r5, #8
 8001964:	910a      	str	r1, [sp, #40]	; 0x28
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
 800196a:	f7ff bbaa 	b.w	80010c2 <_vfprintf_r+0x5da>
 800196e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001970:	3507      	adds	r5, #7
 8001972:	f025 0307 	bic.w	r3, r5, #7
 8001976:	f103 0208 	add.w	r2, r3, #8
 800197a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800197e:	920a      	str	r2, [sp, #40]	; 0x28
 8001980:	2301      	movs	r3, #1
 8001982:	f7ff bb5a 	b.w	800103a <_vfprintf_r+0x552>
 8001986:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001988:	3507      	adds	r5, #7
 800198a:	f025 0307 	bic.w	r3, r5, #7
 800198e:	f103 0208 	add.w	r2, r3, #8
 8001992:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001996:	920a      	str	r2, [sp, #40]	; 0x28
 8001998:	2300      	movs	r3, #0
 800199a:	f7ff bb4e 	b.w	800103a <_vfprintf_r+0x552>
 800199e:	af2e      	add	r7, sp, #184	; 0xb8
 80019a0:	f7ff bb67 	b.w	8001072 <_vfprintf_r+0x58a>
 80019a4:	aa21      	add	r2, sp, #132	; 0x84
 80019a6:	9905      	ldr	r1, [sp, #20]
 80019a8:	9806      	ldr	r0, [sp, #24]
 80019aa:	f003 fdb7 	bl	800551c <__sprint_r>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	f47f adfe 	bne.w	80015b0 <_vfprintf_r+0xac8>
 80019b4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80019b6:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80019ba:	f7ff ba72 	b.w	8000ea2 <_vfprintf_r+0x3ba>
 80019be:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 80019c2:	4264      	negs	r4, r4
 80019c4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80019c8:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
 80019cc:	2301      	movs	r3, #1
 80019ce:	f7ff bb38 	b.w	8001042 <_vfprintf_r+0x55a>
 80019d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	f005 fa15 	bl	8006e08 <__aeabi_dcmpun>
 80019de:	2800      	cmp	r0, #0
 80019e0:	f040 828b 	bne.w	8001efa <_vfprintf_r+0x1412>
 80019e4:	9b04      	ldr	r3, [sp, #16]
 80019e6:	3301      	adds	r3, #1
 80019e8:	f026 0a20 	bic.w	sl, r6, #32
 80019ec:	f000 81bb 	beq.w	8001d66 <_vfprintf_r+0x127e>
 80019f0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80019f4:	f000 80f8 	beq.w	8001be8 <_vfprintf_r+0x1100>
 80019f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80019fa:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	9202      	str	r2, [sp, #8]
 8001a02:	f2c0 81ce 	blt.w	8001da2 <_vfprintf_r+0x12ba>
 8001a06:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8001a0a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001a0e:	2300      	movs	r3, #0
 8001a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a12:	2e66      	cmp	r6, #102	; 0x66
 8001a14:	f000 81aa 	beq.w	8001d6c <_vfprintf_r+0x1284>
 8001a18:	2e46      	cmp	r6, #70	; 0x46
 8001a1a:	f000 80be 	beq.w	8001b9a <_vfprintf_r+0x10b2>
 8001a1e:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
 8001a22:	bf0c      	ite	eq
 8001a24:	9b04      	ldreq	r3, [sp, #16]
 8001a26:	9d04      	ldrne	r5, [sp, #16]
 8001a28:	9806      	ldr	r0, [sp, #24]
 8001a2a:	bf08      	it	eq
 8001a2c:	1c5d      	addeq	r5, r3, #1
 8001a2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8001a30:	ab1c      	add	r3, sp, #112	; 0x70
 8001a32:	9201      	str	r2, [sp, #4]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	462a      	mov	r2, r5
 8001a38:	ab1b      	add	r3, sp, #108	; 0x6c
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8001a40:	f000 fc52 	bl	80022e8 <_dtoa_r>
 8001a44:	2e67      	cmp	r6, #103	; 0x67
 8001a46:	4607      	mov	r7, r0
 8001a48:	f040 81c8 	bne.w	8001ddc <_vfprintf_r+0x12f4>
 8001a4c:	f01b 0f01 	tst.w	fp, #1
 8001a50:	f000 8240 	beq.w	8001ed4 <_vfprintf_r+0x13ec>
 8001a54:	197c      	adds	r4, r7, r5
 8001a56:	2200      	movs	r2, #0
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001a5e:	f005 f9a1 	bl	8006da4 <__aeabi_dcmpeq>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	f040 8152 	bne.w	8001d0c <_vfprintf_r+0x1224>
 8001a68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001a6a:	42a3      	cmp	r3, r4
 8001a6c:	d206      	bcs.n	8001a7c <_vfprintf_r+0xf94>
 8001a6e:	2130      	movs	r1, #48	; 0x30
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	921f      	str	r2, [sp, #124]	; 0x7c
 8001a74:	7019      	strb	r1, [r3, #0]
 8001a76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001a78:	429c      	cmp	r4, r3
 8001a7a:	d8f9      	bhi.n	8001a70 <_vfprintf_r+0xf88>
 8001a7c:	1bdb      	subs	r3, r3, r7
 8001a7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8001a82:	930d      	str	r3, [sp, #52]	; 0x34
 8001a84:	f000 80d9 	beq.w	8001c3a <_vfprintf_r+0x1152>
 8001a88:	2e65      	cmp	r6, #101	; 0x65
 8001a8a:	f340 81b6 	ble.w	8001dfa <_vfprintf_r+0x1312>
 8001a8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001a90:	930c      	str	r3, [sp, #48]	; 0x30
 8001a92:	2e66      	cmp	r6, #102	; 0x66
 8001a94:	f000 81b4 	beq.w	8001e00 <_vfprintf_r+0x1318>
 8001a98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4291      	cmp	r1, r2
 8001aa0:	f300 8188 	bgt.w	8001db4 <_vfprintf_r+0x12cc>
 8001aa4:	f01b 0f01 	tst.w	fp, #1
 8001aa8:	f040 821e 	bne.w	8001ee8 <_vfprintf_r+0x1400>
 8001aac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001ab0:	9303      	str	r3, [sp, #12]
 8001ab2:	9209      	str	r2, [sp, #36]	; 0x24
 8001ab4:	2667      	movs	r6, #103	; 0x67
 8001ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 80b6 	bne.w	8001c2a <_vfprintf_r+0x1142>
 8001abe:	9304      	str	r3, [sp, #16]
 8001ac0:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 8001ac4:	f7ff b970 	b.w	8000da8 <_vfprintf_r+0x2c0>
 8001ac8:	f025 0507 	bic.w	r5, r5, #7
 8001acc:	ed95 7b00 	vldr	d7, [r5]
 8001ad0:	f105 0308 	add.w	r3, r5, #8
 8001ad4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8001ada:	f7ff bb79 	b.w	80011d0 <_vfprintf_r+0x6e8>
 8001ade:	4614      	mov	r4, r2
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4434      	add	r4, r6
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	9423      	str	r4, [sp, #140]	; 0x8c
 8001ae8:	9322      	str	r3, [sp, #136]	; 0x88
 8001aea:	e888 0060 	stmia.w	r8, {r5, r6}
 8001aee:	f73f ae7f 	bgt.w	80017f0 <_vfprintf_r+0xd08>
 8001af2:	f108 0808 	add.w	r8, r8, #8
 8001af6:	e686      	b.n	8001806 <_vfprintf_r+0xd1e>
 8001af8:	aa21      	add	r2, sp, #132	; 0x84
 8001afa:	9905      	ldr	r1, [sp, #20]
 8001afc:	9806      	ldr	r0, [sp, #24]
 8001afe:	f003 fd0d 	bl	800551c <__sprint_r>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	f47f ad54 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001b08:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001b0c:	e458      	b.n	80013c0 <_vfprintf_r+0x8d8>
 8001b0e:	bf00      	nop
 8001b10:	0800c1d4 	.word	0x0800c1d4
 8001b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001b16:	4aae      	ldr	r2, [pc, #696]	; (8001dd0 <_vfprintf_r+0x12e8>)
 8001b18:	f8c8 2000 	str.w	r2, [r8]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	3401      	adds	r4, #1
 8001b20:	2201      	movs	r2, #1
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	9423      	str	r4, [sp, #140]	; 0x8c
 8001b26:	9322      	str	r3, [sp, #136]	; 0x88
 8001b28:	f8c8 2004 	str.w	r2, [r8, #4]
 8001b2c:	dc4f      	bgt.n	8001bce <_vfprintf_r+0x10e6>
 8001b2e:	f108 0808 	add.w	r8, r8, #8
 8001b32:	b929      	cbnz	r1, 8001b40 <_vfprintf_r+0x1058>
 8001b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b36:	b91b      	cbnz	r3, 8001b40 <_vfprintf_r+0x1058>
 8001b38:	9b02      	ldr	r3, [sp, #8]
 8001b3a:	07dd      	lsls	r5, r3, #31
 8001b3c:	f57f aa07 	bpl.w	8000f4e <_vfprintf_r+0x466>
 8001b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001b42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001b46:	f8c8 2000 	str.w	r2, [r8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4422      	add	r2, r4
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	9223      	str	r2, [sp, #140]	; 0x8c
 8001b54:	f8c8 0004 	str.w	r0, [r8, #4]
 8001b58:	9322      	str	r3, [sp, #136]	; 0x88
 8001b5a:	f300 8191 	bgt.w	8001e80 <_vfprintf_r+0x1398>
 8001b5e:	f108 0808 	add.w	r8, r8, #8
 8001b62:	2900      	cmp	r1, #0
 8001b64:	f2c0 8166 	blt.w	8001e34 <_vfprintf_r+0x134c>
 8001b68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001b6a:	f8c8 7000 	str.w	r7, [r8]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	188c      	adds	r4, r1, r2
 8001b72:	2b07      	cmp	r3, #7
 8001b74:	9423      	str	r4, [sp, #140]	; 0x8c
 8001b76:	9322      	str	r3, [sp, #136]	; 0x88
 8001b78:	f8c8 1004 	str.w	r1, [r8, #4]
 8001b7c:	f77f a9e5 	ble.w	8000f4a <_vfprintf_r+0x462>
 8001b80:	e504      	b.n	800158c <_vfprintf_r+0xaa4>
 8001b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b84:	9907      	ldr	r1, [sp, #28]
 8001b86:	6813      	ldr	r3, [r2, #0]
 8001b88:	17cd      	asrs	r5, r1, #31
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	3204      	adds	r2, #4
 8001b8e:	4629      	mov	r1, r5
 8001b90:	920a      	str	r2, [sp, #40]	; 0x28
 8001b92:	e9c3 0100 	strd	r0, r1, [r3]
 8001b96:	f7fe bfea 	b.w	8000b6e <_vfprintf_r+0x86>
 8001b9a:	9d04      	ldr	r5, [sp, #16]
 8001b9c:	9806      	ldr	r0, [sp, #24]
 8001b9e:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ba0:	ab1c      	add	r3, sp, #112	; 0x70
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	462a      	mov	r2, r5
 8001ba8:	ab1b      	add	r3, sp, #108	; 0x6c
 8001baa:	2103      	movs	r1, #3
 8001bac:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8001bb0:	f000 fb9a 	bl	80022e8 <_dtoa_r>
 8001bb4:	4607      	mov	r7, r0
 8001bb6:	2e46      	cmp	r6, #70	; 0x46
 8001bb8:	eb07 0405 	add.w	r4, r7, r5
 8001bbc:	f47f af4b 	bne.w	8001a56 <_vfprintf_r+0xf6e>
 8001bc0:	783b      	ldrb	r3, [r7, #0]
 8001bc2:	2b30      	cmp	r3, #48	; 0x30
 8001bc4:	f000 819f 	beq.w	8001f06 <_vfprintf_r+0x141e>
 8001bc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001bca:	442c      	add	r4, r5
 8001bcc:	e743      	b.n	8001a56 <_vfprintf_r+0xf6e>
 8001bce:	aa21      	add	r2, sp, #132	; 0x84
 8001bd0:	9905      	ldr	r1, [sp, #20]
 8001bd2:	9806      	ldr	r0, [sp, #24]
 8001bd4:	f003 fca2 	bl	800551c <__sprint_r>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f47f ace9 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001bde:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001be0:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001be2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001be6:	e7a4      	b.n	8001b32 <_vfprintf_r+0x104a>
 8001be8:	9b04      	ldr	r3, [sp, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf08      	it	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	9304      	str	r3, [sp, #16]
 8001bf2:	e701      	b.n	80019f8 <_vfprintf_r+0xf10>
 8001bf4:	46da      	mov	sl, fp
 8001bf6:	f7ff bbbe 	b.w	8001376 <_vfprintf_r+0x88e>
 8001bfa:	aa21      	add	r2, sp, #132	; 0x84
 8001bfc:	9905      	ldr	r1, [sp, #20]
 8001bfe:	9806      	ldr	r0, [sp, #24]
 8001c00:	f003 fc8c 	bl	800551c <__sprint_r>
 8001c04:	2800      	cmp	r0, #0
 8001c06:	f47f acd3 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001c0a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001c0c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001c10:	f7ff bbef 	b.w	80013f2 <_vfprintf_r+0x90a>
 8001c14:	4638      	mov	r0, r7
 8001c16:	9404      	str	r4, [sp, #16]
 8001c18:	f7fe fe12 	bl	8000840 <strlen>
 8001c1c:	950a      	str	r5, [sp, #40]	; 0x28
 8001c1e:	9009      	str	r0, [sp, #36]	; 0x24
 8001c20:	f8cd b008 	str.w	fp, [sp, #8]
 8001c24:	4603      	mov	r3, r0
 8001c26:	f7ff b8b9 	b.w	8000d9c <_vfprintf_r+0x2b4>
 8001c2a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
 8001c34:	9304      	str	r3, [sp, #16]
 8001c36:	f7ff b8ba 	b.w	8000dae <_vfprintf_r+0x2c6>
 8001c3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001c3c:	930c      	str	r3, [sp, #48]	; 0x30
 8001c3e:	461a      	mov	r2, r3
 8001c40:	3303      	adds	r3, #3
 8001c42:	db04      	blt.n	8001c4e <_vfprintf_r+0x1166>
 8001c44:	9b04      	ldr	r3, [sp, #16]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4291      	cmp	r1, r2
 8001c4a:	f6bf af25 	bge.w	8001a98 <_vfprintf_r+0xfb0>
 8001c4e:	3e02      	subs	r6, #2
 8001c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c52:	f88d 6074 	strb.w	r6, [sp, #116]	; 0x74
 8001c56:	3b01      	subs	r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001c5c:	bfbd      	ittte	lt
 8001c5e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8001c60:	f1c3 0301 	rsblt	r3, r3, #1
 8001c64:	222d      	movlt	r2, #45	; 0x2d
 8001c66:	222b      	movge	r2, #43	; 0x2b
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8001c6e:	f340 8133 	ble.w	8001ed8 <_vfprintf_r+0x13f0>
 8001c72:	f10d 0483 	add.w	r4, sp, #131	; 0x83
 8001c76:	4620      	mov	r0, r4
 8001c78:	4d56      	ldr	r5, [pc, #344]	; (8001dd4 <_vfprintf_r+0x12ec>)
 8001c7a:	e000      	b.n	8001c7e <_vfprintf_r+0x1196>
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	fb85 1203 	smull	r1, r2, r5, r3
 8001c82:	17d9      	asrs	r1, r3, #31
 8001c84:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
 8001c88:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c8c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 8001c90:	3230      	adds	r2, #48	; 0x30
 8001c92:	2909      	cmp	r1, #9
 8001c94:	f800 2c01 	strb.w	r2, [r0, #-1]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001c9e:	dced      	bgt.n	8001c7c <_vfprintf_r+0x1194>
 8001ca0:	3330      	adds	r3, #48	; 0x30
 8001ca2:	3802      	subs	r0, #2
 8001ca4:	b2d9      	uxtb	r1, r3
 8001ca6:	4284      	cmp	r4, r0
 8001ca8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001cac:	f240 8174 	bls.w	8001f98 <_vfprintf_r+0x14b0>
 8001cb0:	f10d 0076 	add.w	r0, sp, #118	; 0x76
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	e001      	b.n	8001cbc <_vfprintf_r+0x11d4>
 8001cb8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001cbc:	f800 1b01 	strb.w	r1, [r0], #1
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d1f9      	bne.n	8001cb8 <_vfprintf_r+0x11d0>
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8001ccc:	4413      	add	r3, r2
 8001cce:	aa1d      	add	r2, sp, #116	; 0x74
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001cd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8001cd6:	2a01      	cmp	r2, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	9309      	str	r3, [sp, #36]	; 0x24
 8001cdc:	f340 8133 	ble.w	8001f46 <_vfprintf_r+0x145e>
 8001ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ce2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001ce4:	4413      	add	r3, r2
 8001ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cec:	9303      	str	r3, [sp, #12]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8001cf2:	e6e0      	b.n	8001ab6 <_vfprintf_r+0xfce>
 8001cf4:	aa21      	add	r2, sp, #132	; 0x84
 8001cf6:	9905      	ldr	r1, [sp, #20]
 8001cf8:	9806      	ldr	r0, [sp, #24]
 8001cfa:	f003 fc0f 	bl	800551c <__sprint_r>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	f47f ac56 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001d04:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001d06:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001d0a:	e4c4      	b.n	8001696 <_vfprintf_r+0xbae>
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	e6b5      	b.n	8001a7c <_vfprintf_r+0xf94>
 8001d10:	aa21      	add	r2, sp, #132	; 0x84
 8001d12:	9905      	ldr	r1, [sp, #20]
 8001d14:	9806      	ldr	r0, [sp, #24]
 8001d16:	f003 fc01 	bl	800551c <__sprint_r>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	f47f ac48 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d22:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001d24:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001d28:	e574      	b.n	8001814 <_vfprintf_r+0xd2c>
 8001d2a:	aa21      	add	r2, sp, #132	; 0x84
 8001d2c:	9905      	ldr	r1, [sp, #20]
 8001d2e:	9806      	ldr	r0, [sp, #24]
 8001d30:	f003 fbf4 	bl	800551c <__sprint_r>
 8001d34:	2800      	cmp	r0, #0
 8001d36:	f47f ac3b 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001d3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d3e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001d46:	e57d      	b.n	8001844 <_vfprintf_r+0xd5c>
 8001d48:	9b04      	ldr	r3, [sp, #16]
 8001d4a:	970c      	str	r7, [sp, #48]	; 0x30
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	bf28      	it	cs
 8001d50:	2306      	movcs	r3, #6
 8001d52:	9704      	str	r7, [sp, #16]
 8001d54:	46ba      	mov	sl, r7
 8001d56:	9303      	str	r3, [sp, #12]
 8001d58:	950a      	str	r5, [sp, #40]	; 0x28
 8001d5a:	f8cd b008 	str.w	fp, [sp, #8]
 8001d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d60:	4f1d      	ldr	r7, [pc, #116]	; (8001dd8 <_vfprintf_r+0x12f0>)
 8001d62:	f7ff b821 	b.w	8000da8 <_vfprintf_r+0x2c0>
 8001d66:	2306      	movs	r3, #6
 8001d68:	9304      	str	r3, [sp, #16]
 8001d6a:	e645      	b.n	80019f8 <_vfprintf_r+0xf10>
 8001d6c:	9c04      	ldr	r4, [sp, #16]
 8001d6e:	9806      	ldr	r0, [sp, #24]
 8001d70:	aa1f      	add	r2, sp, #124	; 0x7c
 8001d72:	ab1c      	add	r3, sp, #112	; 0x70
 8001d74:	9201      	str	r2, [sp, #4]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4622      	mov	r2, r4
 8001d7a:	ab1b      	add	r3, sp, #108	; 0x6c
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8001d82:	f000 fab1 	bl	80022e8 <_dtoa_r>
 8001d86:	4623      	mov	r3, r4
 8001d88:	4607      	mov	r7, r0
 8001d8a:	1904      	adds	r4, r0, r4
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	e717      	b.n	8001bc0 <_vfprintf_r+0x10d8>
 8001d90:	46a2      	mov	sl, r4
 8001d92:	f7ff baf0 	b.w	8001376 <_vfprintf_r+0x88e>
 8001d96:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8001d9a:	f88d a067 	strb.w	sl, [sp, #103]	; 0x67
 8001d9e:	f7ff ba3e 	b.w	800121e <_vfprintf_r+0x736>
 8001da2:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8001da6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8001daa:	9317      	str	r3, [sp, #92]	; 0x5c
 8001dac:	232d      	movs	r3, #45	; 0x2d
 8001dae:	9116      	str	r1, [sp, #88]	; 0x58
 8001db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001db2:	e62e      	b.n	8001a12 <_vfprintf_r+0xf2a>
 8001db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001db8:	4413      	add	r3, r2
 8001dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	f340 80b9 	ble.w	8001f36 <_vfprintf_r+0x144e>
 8001dc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001dc8:	9303      	str	r3, [sp, #12]
 8001dca:	2667      	movs	r6, #103	; 0x67
 8001dcc:	e673      	b.n	8001ab6 <_vfprintf_r+0xfce>
 8001dce:	bf00      	nop
 8001dd0:	0801b564 	.word	0x0801b564
 8001dd4:	66666667 	.word	0x66666667
 8001dd8:	0801b55c 	.word	0x0801b55c
 8001ddc:	2e47      	cmp	r6, #71	; 0x47
 8001dde:	f47f ae39 	bne.w	8001a54 <_vfprintf_r+0xf6c>
 8001de2:	f01b 0f01 	tst.w	fp, #1
 8001de6:	f47f aee6 	bne.w	8001bb6 <_vfprintf_r+0x10ce>
 8001dea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001dec:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8001df0:	eba3 0307 	sub.w	r3, r3, r7
 8001df4:	930d      	str	r3, [sp, #52]	; 0x34
 8001df6:	f43f af20 	beq.w	8001c3a <_vfprintf_r+0x1152>
 8001dfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8001dfe:	e727      	b.n	8001c50 <_vfprintf_r+0x1168>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f340 80aa 	ble.w	8001f5a <_vfprintf_r+0x1472>
 8001e06:	9a04      	ldr	r2, [sp, #16]
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	f040 808a 	bne.w	8001f22 <_vfprintf_r+0x143a>
 8001e0e:	f01b 0f01 	tst.w	fp, #1
 8001e12:	f040 8086 	bne.w	8001f22 <_vfprintf_r+0x143a>
 8001e16:	9303      	str	r3, [sp, #12]
 8001e18:	9309      	str	r3, [sp, #36]	; 0x24
 8001e1a:	e64c      	b.n	8001ab6 <_vfprintf_r+0xfce>
 8001e1c:	9b04      	ldr	r3, [sp, #16]
 8001e1e:	9303      	str	r3, [sp, #12]
 8001e20:	9309      	str	r3, [sp, #36]	; 0x24
 8001e22:	9004      	str	r0, [sp, #16]
 8001e24:	950a      	str	r5, [sp, #40]	; 0x28
 8001e26:	f8cd b008 	str.w	fp, [sp, #8]
 8001e2a:	900c      	str	r0, [sp, #48]	; 0x30
 8001e2c:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 8001e30:	f7fe bfba 	b.w	8000da8 <_vfprintf_r+0x2c0>
 8001e34:	424e      	negs	r6, r1
 8001e36:	3110      	adds	r1, #16
 8001e38:	4d61      	ldr	r5, [pc, #388]	; (8001fc0 <_vfprintf_r+0x14d8>)
 8001e3a:	da33      	bge.n	8001ea4 <_vfprintf_r+0x13bc>
 8001e3c:	2410      	movs	r4, #16
 8001e3e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001e42:	f8dd b014 	ldr.w	fp, [sp, #20]
 8001e46:	e004      	b.n	8001e52 <_vfprintf_r+0x136a>
 8001e48:	f108 0808 	add.w	r8, r8, #8
 8001e4c:	3e10      	subs	r6, #16
 8001e4e:	2e10      	cmp	r6, #16
 8001e50:	dd28      	ble.n	8001ea4 <_vfprintf_r+0x13bc>
 8001e52:	3301      	adds	r3, #1
 8001e54:	3210      	adds	r2, #16
 8001e56:	2b07      	cmp	r3, #7
 8001e58:	9223      	str	r2, [sp, #140]	; 0x8c
 8001e5a:	9322      	str	r3, [sp, #136]	; 0x88
 8001e5c:	f8c8 5000 	str.w	r5, [r8]
 8001e60:	f8c8 4004 	str.w	r4, [r8, #4]
 8001e64:	ddf0      	ble.n	8001e48 <_vfprintf_r+0x1360>
 8001e66:	aa21      	add	r2, sp, #132	; 0x84
 8001e68:	4659      	mov	r1, fp
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	f003 fb56 	bl	800551c <__sprint_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	f47f aebf 	bne.w	8001bf4 <_vfprintf_r+0x110c>
 8001e76:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e7a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001e7e:	e7e5      	b.n	8001e4c <_vfprintf_r+0x1364>
 8001e80:	aa21      	add	r2, sp, #132	; 0x84
 8001e82:	9905      	ldr	r1, [sp, #20]
 8001e84:	9806      	ldr	r0, [sp, #24]
 8001e86:	f003 fb49 	bl	800551c <__sprint_r>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	f47f ab90 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001e90:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001e92:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e96:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001e9a:	e662      	b.n	8001b62 <_vfprintf_r+0x107a>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9304      	str	r3, [sp, #16]
 8001ea0:	f7fe be9a 	b.w	8000bd8 <_vfprintf_r+0xf0>
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4432      	add	r2, r6
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	e888 0060 	stmia.w	r8, {r5, r6}
 8001eae:	9223      	str	r2, [sp, #140]	; 0x8c
 8001eb0:	9322      	str	r3, [sp, #136]	; 0x88
 8001eb2:	f108 0808 	add.w	r8, r8, #8
 8001eb6:	f77f ae57 	ble.w	8001b68 <_vfprintf_r+0x1080>
 8001eba:	aa21      	add	r2, sp, #132	; 0x84
 8001ebc:	9905      	ldr	r1, [sp, #20]
 8001ebe:	9806      	ldr	r0, [sp, #24]
 8001ec0:	f003 fb2c 	bl	800551c <__sprint_r>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	f47f ab73 	bne.w	80015b0 <_vfprintf_r+0xac8>
 8001eca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ece:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8001ed2:	e649      	b.n	8001b68 <_vfprintf_r+0x1080>
 8001ed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001ed6:	e5d1      	b.n	8001a7c <_vfprintf_r+0xf94>
 8001ed8:	3330      	adds	r3, #48	; 0x30
 8001eda:	2230      	movs	r2, #48	; 0x30
 8001edc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8001ee0:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8001ee4:	ab1e      	add	r3, sp, #120	; 0x78
 8001ee6:	e6f2      	b.n	8001cce <_vfprintf_r+0x11e6>
 8001ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001eea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001eec:	4413      	add	r3, r2
 8001eee:	9309      	str	r3, [sp, #36]	; 0x24
 8001ef0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ef4:	9303      	str	r3, [sp, #12]
 8001ef6:	2667      	movs	r6, #103	; 0x67
 8001ef8:	e5dd      	b.n	8001ab6 <_vfprintf_r+0xfce>
 8001efa:	4f32      	ldr	r7, [pc, #200]	; (8001fc4 <_vfprintf_r+0x14dc>)
 8001efc:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <_vfprintf_r+0x14e0>)
 8001efe:	f89d a067 	ldrb.w	sl, [sp, #103]	; 0x67
 8001f02:	f7ff b98e 	b.w	8001222 <_vfprintf_r+0x73a>
 8001f06:	2200      	movs	r2, #0
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001f0e:	f004 ff49 	bl	8006da4 <__aeabi_dcmpeq>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f47f ae58 	bne.w	8001bc8 <_vfprintf_r+0x10e0>
 8001f18:	f1c5 0501 	rsb	r5, r5, #1
 8001f1c:	951b      	str	r5, [sp, #108]	; 0x6c
 8001f1e:	442c      	add	r4, r5
 8001f20:	e599      	b.n	8001a56 <_vfprintf_r+0xf6e>
 8001f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001f26:	4413      	add	r3, r2
 8001f28:	9a04      	ldr	r2, [sp, #16]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8001f30:	9209      	str	r2, [sp, #36]	; 0x24
 8001f32:	9303      	str	r3, [sp, #12]
 8001f34:	e5bf      	b.n	8001ab6 <_vfprintf_r+0xfce>
 8001f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f3a:	f1c3 0301 	rsb	r3, r3, #1
 8001f3e:	441a      	add	r2, r3
 8001f40:	4613      	mov	r3, r2
 8001f42:	9209      	str	r2, [sp, #36]	; 0x24
 8001f44:	e73e      	b.n	8001dc4 <_vfprintf_r+0x12dc>
 8001f46:	f01b 0301 	ands.w	r3, fp, #1
 8001f4a:	930c      	str	r3, [sp, #48]	; 0x30
 8001f4c:	f47f aec8 	bne.w	8001ce0 <_vfprintf_r+0x11f8>
 8001f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f56:	9303      	str	r3, [sp, #12]
 8001f58:	e5ad      	b.n	8001ab6 <_vfprintf_r+0xfce>
 8001f5a:	9b04      	ldr	r3, [sp, #16]
 8001f5c:	b913      	cbnz	r3, 8001f64 <_vfprintf_r+0x147c>
 8001f5e:	f01b 0f01 	tst.w	fp, #1
 8001f62:	d002      	beq.n	8001f6a <_vfprintf_r+0x1482>
 8001f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001f66:	3301      	adds	r3, #1
 8001f68:	e7de      	b.n	8001f28 <_vfprintf_r+0x1440>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e753      	b.n	8001e16 <_vfprintf_r+0x132e>
 8001f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001f70:	f899 6001 	ldrb.w	r6, [r9, #1]
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f7a:	9304      	str	r3, [sp, #16]
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4681      	mov	r9, r0
 8001f82:	930a      	str	r3, [sp, #40]	; 0x28
 8001f84:	f7fe be26 	b.w	8000bd4 <_vfprintf_r+0xec>
 8001f88:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001f8c:	f7ff b9c4 	b.w	8001318 <_vfprintf_r+0x830>
 8001f90:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001f94:	f7ff b87f 	b.w	8001096 <_vfprintf_r+0x5ae>
 8001f98:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8001f9c:	e697      	b.n	8001cce <_vfprintf_r+0x11e6>
 8001f9e:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001fa2:	f7ff b965 	b.w	8001270 <_vfprintf_r+0x788>
 8001fa6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001faa:	f7ff b997 	b.w	80012dc <_vfprintf_r+0x7f4>
 8001fae:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001fb2:	f7ff b8fd 	b.w	80011b0 <_vfprintf_r+0x6c8>
 8001fb6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8001fba:	f7ff b81a 	b.w	8000ff2 <_vfprintf_r+0x50a>
 8001fbe:	bf00      	nop
 8001fc0:	0800c1d4 	.word	0x0800c1d4
 8001fc4:	0801b530 	.word	0x0801b530
 8001fc8:	0801b52c 	.word	0x0801b52c

08001fcc <vfprintf>:
 8001fcc:	b410      	push	{r4}
 8001fce:	4c04      	ldr	r4, [pc, #16]	; (8001fe0 <vfprintf+0x14>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fdc:	f7fe bd84 	b.w	8000ae8 <_vfprintf_r>
 8001fe0:	20000008 	.word	0x20000008

08001fe4 <__sbprintf>:
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8001fec:	8989      	ldrh	r1, [r1, #12]
 8001fee:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8001ff0:	89e5      	ldrh	r5, [r4, #14]
 8001ff2:	9619      	str	r6, [sp, #100]	; 0x64
 8001ff4:	f021 0102 	bic.w	r1, r1, #2
 8001ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8001ffa:	f8ad 500e 	strh.w	r5, [sp, #14]
 8001ffe:	2500      	movs	r5, #0
 8002000:	69e7      	ldr	r7, [r4, #28]
 8002002:	f8ad 100c 	strh.w	r1, [sp, #12]
 8002006:	9609      	str	r6, [sp, #36]	; 0x24
 8002008:	9506      	str	r5, [sp, #24]
 800200a:	ae1a      	add	r6, sp, #104	; 0x68
 800200c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002010:	4669      	mov	r1, sp
 8002012:	9600      	str	r6, [sp, #0]
 8002014:	9604      	str	r6, [sp, #16]
 8002016:	9502      	str	r5, [sp, #8]
 8002018:	9505      	str	r5, [sp, #20]
 800201a:	9707      	str	r7, [sp, #28]
 800201c:	4606      	mov	r6, r0
 800201e:	f7fe fd63 	bl	8000ae8 <_vfprintf_r>
 8002022:	1e05      	subs	r5, r0, #0
 8002024:	db07      	blt.n	8002036 <__sbprintf+0x52>
 8002026:	4630      	mov	r0, r6
 8002028:	4669      	mov	r1, sp
 800202a:	f001 f923 	bl	8003274 <_fflush_r>
 800202e:	2800      	cmp	r0, #0
 8002030:	bf18      	it	ne
 8002032:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8002036:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800203a:	065b      	lsls	r3, r3, #25
 800203c:	d503      	bpl.n	8002046 <__sbprintf+0x62>
 800203e:	89a3      	ldrh	r3, [r4, #12]
 8002040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002044:	81a3      	strh	r3, [r4, #12]
 8002046:	4628      	mov	r0, r5
 8002048:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204e:	bf00      	nop

08002050 <__swsetup_r>:
 8002050:	b538      	push	{r3, r4, r5, lr}
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <__swsetup_r+0xc4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4605      	mov	r5, r0
 8002058:	460c      	mov	r4, r1
 800205a:	b113      	cbz	r3, 8002062 <__swsetup_r+0x12>
 800205c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800205e:	2a00      	cmp	r2, #0
 8002060:	d038      	beq.n	80020d4 <__swsetup_r+0x84>
 8002062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002066:	b293      	uxth	r3, r2
 8002068:	0718      	lsls	r0, r3, #28
 800206a:	d50c      	bpl.n	8002086 <__swsetup_r+0x36>
 800206c:	6920      	ldr	r0, [r4, #16]
 800206e:	b1a8      	cbz	r0, 800209c <__swsetup_r+0x4c>
 8002070:	f013 0201 	ands.w	r2, r3, #1
 8002074:	d01e      	beq.n	80020b4 <__swsetup_r+0x64>
 8002076:	6963      	ldr	r3, [r4, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	425b      	negs	r3, r3
 800207c:	61a3      	str	r3, [r4, #24]
 800207e:	60a2      	str	r2, [r4, #8]
 8002080:	b1f0      	cbz	r0, 80020c0 <__swsetup_r+0x70>
 8002082:	2000      	movs	r0, #0
 8002084:	bd38      	pop	{r3, r4, r5, pc}
 8002086:	06d9      	lsls	r1, r3, #27
 8002088:	d53c      	bpl.n	8002104 <__swsetup_r+0xb4>
 800208a:	0758      	lsls	r0, r3, #29
 800208c:	d426      	bmi.n	80020dc <__swsetup_r+0x8c>
 800208e:	6920      	ldr	r0, [r4, #16]
 8002090:	f042 0308 	orr.w	r3, r2, #8
 8002094:	81a3      	strh	r3, [r4, #12]
 8002096:	b29b      	uxth	r3, r3
 8002098:	2800      	cmp	r0, #0
 800209a:	d1e9      	bne.n	8002070 <__swsetup_r+0x20>
 800209c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80020a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80020a4:	d0e4      	beq.n	8002070 <__swsetup_r+0x20>
 80020a6:	4628      	mov	r0, r5
 80020a8:	4621      	mov	r1, r4
 80020aa:	f001 fd81 	bl	8003bb0 <__smakebuf_r>
 80020ae:	89a3      	ldrh	r3, [r4, #12]
 80020b0:	6920      	ldr	r0, [r4, #16]
 80020b2:	e7dd      	b.n	8002070 <__swsetup_r+0x20>
 80020b4:	0799      	lsls	r1, r3, #30
 80020b6:	bf58      	it	pl
 80020b8:	6962      	ldrpl	r2, [r4, #20]
 80020ba:	60a2      	str	r2, [r4, #8]
 80020bc:	2800      	cmp	r0, #0
 80020be:	d1e0      	bne.n	8002082 <__swsetup_r+0x32>
 80020c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c4:	061a      	lsls	r2, r3, #24
 80020c6:	d5dd      	bpl.n	8002084 <__swsetup_r+0x34>
 80020c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	4618      	mov	r0, r3
 80020d6:	f001 f9df 	bl	8003498 <__sinit>
 80020da:	e7c2      	b.n	8002062 <__swsetup_r+0x12>
 80020dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80020de:	b151      	cbz	r1, 80020f6 <__swsetup_r+0xa6>
 80020e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80020e4:	4299      	cmp	r1, r3
 80020e6:	d004      	beq.n	80020f2 <__swsetup_r+0xa2>
 80020e8:	4628      	mov	r0, r5
 80020ea:	f001 fa45 	bl	8003578 <_free_r>
 80020ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020f2:	2300      	movs	r3, #0
 80020f4:	6323      	str	r3, [r4, #48]	; 0x30
 80020f6:	2300      	movs	r3, #0
 80020f8:	6920      	ldr	r0, [r4, #16]
 80020fa:	6063      	str	r3, [r4, #4]
 80020fc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002100:	6020      	str	r0, [r4, #0]
 8002102:	e7c5      	b.n	8002090 <__swsetup_r+0x40>
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	2309      	movs	r3, #9
 800210a:	602b      	str	r3, [r5, #0]
 800210c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002110:	81a2      	strh	r2, [r4, #12]
 8002112:	bd38      	pop	{r3, r4, r5, pc}
 8002114:	20000008 	.word	0x20000008

08002118 <__register_exitproc>:
 8002118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800211c:	4c25      	ldr	r4, [pc, #148]	; (80021b4 <__register_exitproc+0x9c>)
 800211e:	6825      	ldr	r5, [r4, #0]
 8002120:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8002124:	4606      	mov	r6, r0
 8002126:	4688      	mov	r8, r1
 8002128:	4692      	mov	sl, r2
 800212a:	4699      	mov	r9, r3
 800212c:	b3c4      	cbz	r4, 80021a0 <__register_exitproc+0x88>
 800212e:	6860      	ldr	r0, [r4, #4]
 8002130:	281f      	cmp	r0, #31
 8002132:	dc17      	bgt.n	8002164 <__register_exitproc+0x4c>
 8002134:	1c43      	adds	r3, r0, #1
 8002136:	b176      	cbz	r6, 8002156 <__register_exitproc+0x3e>
 8002138:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800213c:	2201      	movs	r2, #1
 800213e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 8002142:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 8002146:	4082      	lsls	r2, r0
 8002148:	4311      	orrs	r1, r2
 800214a:	2e02      	cmp	r6, #2
 800214c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 8002150:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8002154:	d01e      	beq.n	8002194 <__register_exitproc+0x7c>
 8002156:	3002      	adds	r0, #2
 8002158:	6063      	str	r3, [r4, #4]
 800215a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800215e:	2000      	movs	r0, #0
 8002160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <__register_exitproc+0xa0>)
 8002166:	b303      	cbz	r3, 80021aa <__register_exitproc+0x92>
 8002168:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800216c:	f001 fd64 	bl	8003c38 <malloc>
 8002170:	4604      	mov	r4, r0
 8002172:	b1d0      	cbz	r0, 80021aa <__register_exitproc+0x92>
 8002174:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8002178:	2700      	movs	r7, #0
 800217a:	e880 0088 	stmia.w	r0, {r3, r7}
 800217e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8002182:	4638      	mov	r0, r7
 8002184:	2301      	movs	r3, #1
 8002186:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800218a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 800218e:	2e00      	cmp	r6, #0
 8002190:	d0e1      	beq.n	8002156 <__register_exitproc+0x3e>
 8002192:	e7d1      	b.n	8002138 <__register_exitproc+0x20>
 8002194:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 8002198:	430a      	orrs	r2, r1
 800219a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 800219e:	e7da      	b.n	8002156 <__register_exitproc+0x3e>
 80021a0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80021a4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80021a8:	e7c1      	b.n	800212e <__register_exitproc+0x16>
 80021aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b2:	bf00      	nop
 80021b4:	0800c1c0 	.word	0x0800c1c0
 80021b8:	08003c39 	.word	0x08003c39
 80021bc:	00000000 	.word	0x00000000

080021c0 <quorem>:
 80021c0:	6902      	ldr	r2, [r0, #16]
 80021c2:	690b      	ldr	r3, [r1, #16]
 80021c4:	4293      	cmp	r3, r2
 80021c6:	f300 808d 	bgt.w	80022e4 <quorem+0x124>
 80021ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80021d2:	f101 0714 	add.w	r7, r1, #20
 80021d6:	f100 0b14 	add.w	fp, r0, #20
 80021da:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 80021de:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 80021e2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80021e6:	b083      	sub	sp, #12
 80021e8:	3201      	adds	r2, #1
 80021ea:	fbb3 f9f2 	udiv	r9, r3, r2
 80021ee:	eb0b 0304 	add.w	r3, fp, r4
 80021f2:	9400      	str	r4, [sp, #0]
 80021f4:	eb07 0a04 	add.w	sl, r7, r4
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	f1b9 0f00 	cmp.w	r9, #0
 80021fe:	d039      	beq.n	8002274 <quorem+0xb4>
 8002200:	2500      	movs	r5, #0
 8002202:	462e      	mov	r6, r5
 8002204:	46bc      	mov	ip, r7
 8002206:	46de      	mov	lr, fp
 8002208:	f85c 4b04 	ldr.w	r4, [ip], #4
 800220c:	f8de 3000 	ldr.w	r3, [lr]
 8002210:	b2a2      	uxth	r2, r4
 8002212:	fb09 5502 	mla	r5, r9, r2, r5
 8002216:	0c22      	lsrs	r2, r4, #16
 8002218:	0c2c      	lsrs	r4, r5, #16
 800221a:	fb09 4202 	mla	r2, r9, r2, r4
 800221e:	b2ad      	uxth	r5, r5
 8002220:	1b75      	subs	r5, r6, r5
 8002222:	b296      	uxth	r6, r2
 8002224:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 8002228:	fa15 f383 	uxtah	r3, r5, r3
 800222c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8002230:	b29b      	uxth	r3, r3
 8002232:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002236:	45e2      	cmp	sl, ip
 8002238:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800223c:	f84e 3b04 	str.w	r3, [lr], #4
 8002240:	ea4f 4626 	mov.w	r6, r6, asr #16
 8002244:	d2e0      	bcs.n	8002208 <quorem+0x48>
 8002246:	9b00      	ldr	r3, [sp, #0]
 8002248:	f85b 3003 	ldr.w	r3, [fp, r3]
 800224c:	b993      	cbnz	r3, 8002274 <quorem+0xb4>
 800224e:	9c01      	ldr	r4, [sp, #4]
 8002250:	1f23      	subs	r3, r4, #4
 8002252:	459b      	cmp	fp, r3
 8002254:	d20c      	bcs.n	8002270 <quorem+0xb0>
 8002256:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800225a:	b94b      	cbnz	r3, 8002270 <quorem+0xb0>
 800225c:	f1a4 0308 	sub.w	r3, r4, #8
 8002260:	e002      	b.n	8002268 <quorem+0xa8>
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	3b04      	subs	r3, #4
 8002266:	b91a      	cbnz	r2, 8002270 <quorem+0xb0>
 8002268:	459b      	cmp	fp, r3
 800226a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800226e:	d3f8      	bcc.n	8002262 <quorem+0xa2>
 8002270:	f8c0 8010 	str.w	r8, [r0, #16]
 8002274:	4604      	mov	r4, r0
 8002276:	f002 fb39 	bl	80048ec <__mcmp>
 800227a:	2800      	cmp	r0, #0
 800227c:	db2e      	blt.n	80022dc <quorem+0x11c>
 800227e:	f109 0901 	add.w	r9, r9, #1
 8002282:	465d      	mov	r5, fp
 8002284:	2300      	movs	r3, #0
 8002286:	f857 1b04 	ldr.w	r1, [r7], #4
 800228a:	6828      	ldr	r0, [r5, #0]
 800228c:	b28a      	uxth	r2, r1
 800228e:	1a9a      	subs	r2, r3, r2
 8002290:	0c0b      	lsrs	r3, r1, #16
 8002292:	fa12 f280 	uxtah	r2, r2, r0
 8002296:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 800229a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800229e:	b292      	uxth	r2, r2
 80022a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80022a4:	45ba      	cmp	sl, r7
 80022a6:	f845 2b04 	str.w	r2, [r5], #4
 80022aa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80022ae:	d2ea      	bcs.n	8002286 <quorem+0xc6>
 80022b0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80022b4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80022b8:	b982      	cbnz	r2, 80022dc <quorem+0x11c>
 80022ba:	1f1a      	subs	r2, r3, #4
 80022bc:	4593      	cmp	fp, r2
 80022be:	d20b      	bcs.n	80022d8 <quorem+0x118>
 80022c0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80022c4:	b942      	cbnz	r2, 80022d8 <quorem+0x118>
 80022c6:	3b08      	subs	r3, #8
 80022c8:	e002      	b.n	80022d0 <quorem+0x110>
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	3b04      	subs	r3, #4
 80022ce:	b91a      	cbnz	r2, 80022d8 <quorem+0x118>
 80022d0:	459b      	cmp	fp, r3
 80022d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80022d6:	d3f8      	bcc.n	80022ca <quorem+0x10a>
 80022d8:	f8c4 8010 	str.w	r8, [r4, #16]
 80022dc:	4648      	mov	r0, r9
 80022de:	b003      	add	sp, #12
 80022e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022e4:	2000      	movs	r0, #0
 80022e6:	4770      	bx	lr

080022e8 <_dtoa_r>:
 80022e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022ec:	ec57 6b10 	vmov	r6, r7, d0
 80022f0:	b097      	sub	sp, #92	; 0x5c
 80022f2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80022f4:	9102      	str	r1, [sp, #8]
 80022f6:	4604      	mov	r4, r0
 80022f8:	4693      	mov	fp, r2
 80022fa:	9303      	str	r3, [sp, #12]
 80022fc:	e9cd 6700 	strd	r6, r7, [sp]
 8002300:	b14d      	cbz	r5, 8002316 <_dtoa_r+0x2e>
 8002302:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002304:	606a      	str	r2, [r5, #4]
 8002306:	2301      	movs	r3, #1
 8002308:	4093      	lsls	r3, r2
 800230a:	60ab      	str	r3, [r5, #8]
 800230c:	4629      	mov	r1, r5
 800230e:	f002 f8c7 	bl	80044a0 <_Bfree>
 8002312:	2300      	movs	r3, #0
 8002314:	6423      	str	r3, [r4, #64]	; 0x40
 8002316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800231a:	2b00      	cmp	r3, #0
 800231c:	4699      	mov	r9, r3
 800231e:	db38      	blt.n	8002392 <_dtoa_r+0xaa>
 8002320:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002322:	2300      	movs	r3, #0
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <_dtoa_r+0x2c0>)
 8002328:	ea33 0309 	bics.w	r3, r3, r9
 800232c:	d017      	beq.n	800235e <_dtoa_r+0x76>
 800232e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002332:	2200      	movs	r2, #0
 8002334:	2300      	movs	r3, #0
 8002336:	4630      	mov	r0, r6
 8002338:	4639      	mov	r1, r7
 800233a:	f004 fd33 	bl	8006da4 <__aeabi_dcmpeq>
 800233e:	4680      	mov	r8, r0
 8002340:	2800      	cmp	r0, #0
 8002342:	d02f      	beq.n	80023a4 <_dtoa_r+0xbc>
 8002344:	9a03      	ldr	r2, [sp, #12]
 8002346:	2301      	movs	r3, #1
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80c4 	beq.w	80024da <_dtoa_r+0x1f2>
 8002352:	4896      	ldr	r0, [pc, #600]	; (80025ac <_dtoa_r+0x2c4>)
 8002354:	6018      	str	r0, [r3, #0]
 8002356:	3801      	subs	r0, #1
 8002358:	b017      	add	sp, #92	; 0x5c
 800235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800235e:	9a03      	ldr	r2, [sp, #12]
 8002360:	f242 730f 	movw	r3, #9999	; 0x270f
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	9b00      	ldr	r3, [sp, #0]
 8002368:	b96b      	cbnz	r3, 8002386 <_dtoa_r+0x9e>
 800236a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800236e:	b953      	cbnz	r3, 8002386 <_dtoa_r+0x9e>
 8002370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002372:	488f      	ldr	r0, [pc, #572]	; (80025b0 <_dtoa_r+0x2c8>)
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ef      	beq.n	8002358 <_dtoa_r+0x70>
 8002378:	f100 0308 	add.w	r3, r0, #8
 800237c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	b017      	add	sp, #92	; 0x5c
 8002382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002388:	488a      	ldr	r0, [pc, #552]	; (80025b4 <_dtoa_r+0x2cc>)
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0e4      	beq.n	8002358 <_dtoa_r+0x70>
 800238e:	1cc3      	adds	r3, r0, #3
 8002390:	e7f4      	b.n	800237c <_dtoa_r+0x94>
 8002392:	9a01      	ldr	r2, [sp, #4]
 8002394:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8002398:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800239a:	f8cd 9004 	str.w	r9, [sp, #4]
 800239e:	2301      	movs	r3, #1
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e7c0      	b.n	8002326 <_dtoa_r+0x3e>
 80023a4:	aa14      	add	r2, sp, #80	; 0x50
 80023a6:	a915      	add	r1, sp, #84	; 0x54
 80023a8:	ec47 6b10 	vmov	d0, r6, r7
 80023ac:	4620      	mov	r0, r4
 80023ae:	f002 fbc9 	bl	8004b44 <__d2b>
 80023b2:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80023b6:	4682      	mov	sl, r0
 80023b8:	d073      	beq.n	80024a2 <_dtoa_r+0x1ba>
 80023ba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80023be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80023c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80023c6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80023ca:	4630      	mov	r0, r6
 80023cc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80023d0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80023d4:	2200      	movs	r2, #0
 80023d6:	4b78      	ldr	r3, [pc, #480]	; (80025b8 <_dtoa_r+0x2d0>)
 80023d8:	f004 f8c8 	bl	800656c <__aeabi_dsub>
 80023dc:	a36c      	add	r3, pc, #432	; (adr r3, 8002590 <_dtoa_r+0x2a8>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f004 fa77 	bl	80068d4 <__aeabi_dmul>
 80023e6:	a36c      	add	r3, pc, #432	; (adr r3, 8002598 <_dtoa_r+0x2b0>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f004 f8c0 	bl	8006570 <__adddf3>
 80023f0:	4606      	mov	r6, r0
 80023f2:	4628      	mov	r0, r5
 80023f4:	460f      	mov	r7, r1
 80023f6:	f004 fa07 	bl	8006808 <__aeabi_i2d>
 80023fa:	a369      	add	r3, pc, #420	; (adr r3, 80025a0 <_dtoa_r+0x2b8>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f004 fa68 	bl	80068d4 <__aeabi_dmul>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4630      	mov	r0, r6
 800240a:	4639      	mov	r1, r7
 800240c:	f004 f8b0 	bl	8006570 <__adddf3>
 8002410:	4606      	mov	r6, r0
 8002412:	460f      	mov	r7, r1
 8002414:	f004 fd0e 	bl	8006e34 <__aeabi_d2iz>
 8002418:	2200      	movs	r2, #0
 800241a:	9004      	str	r0, [sp, #16]
 800241c:	2300      	movs	r3, #0
 800241e:	4630      	mov	r0, r6
 8002420:	4639      	mov	r1, r7
 8002422:	f004 fcc9 	bl	8006db8 <__aeabi_dcmplt>
 8002426:	2800      	cmp	r0, #0
 8002428:	f040 816f 	bne.w	800270a <_dtoa_r+0x422>
 800242c:	9e04      	ldr	r6, [sp, #16]
 800242e:	2e16      	cmp	r6, #22
 8002430:	f200 8159 	bhi.w	80026e6 <_dtoa_r+0x3fe>
 8002434:	4b61      	ldr	r3, [pc, #388]	; (80025bc <_dtoa_r+0x2d4>)
 8002436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800243a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800243e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002442:	f004 fcd7 	bl	8006df4 <__aeabi_dcmpgt>
 8002446:	2800      	cmp	r0, #0
 8002448:	f000 81c4 	beq.w	80027d4 <_dtoa_r+0x4ec>
 800244c:	1e73      	subs	r3, r6, #1
 800244e:	9304      	str	r3, [sp, #16]
 8002450:	2300      	movs	r3, #0
 8002452:	930c      	str	r3, [sp, #48]	; 0x30
 8002454:	eba8 0505 	sub.w	r5, r8, r5
 8002458:	1e6b      	subs	r3, r5, #1
 800245a:	9305      	str	r3, [sp, #20]
 800245c:	f100 814f 	bmi.w	80026fe <_dtoa_r+0x416>
 8002460:	2300      	movs	r3, #0
 8002462:	9306      	str	r3, [sp, #24]
 8002464:	9b04      	ldr	r3, [sp, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f2c0 8140 	blt.w	80026ec <_dtoa_r+0x404>
 800246c:	9a05      	ldr	r2, [sp, #20]
 800246e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002470:	4611      	mov	r1, r2
 8002472:	4419      	add	r1, r3
 8002474:	2300      	movs	r3, #0
 8002476:	9105      	str	r1, [sp, #20]
 8002478:	930a      	str	r3, [sp, #40]	; 0x28
 800247a:	9b02      	ldr	r3, [sp, #8]
 800247c:	2b09      	cmp	r3, #9
 800247e:	d82e      	bhi.n	80024de <_dtoa_r+0x1f6>
 8002480:	2b05      	cmp	r3, #5
 8002482:	f340 8651 	ble.w	8003128 <_dtoa_r+0xe40>
 8002486:	3b04      	subs	r3, #4
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2700      	movs	r7, #0
 800248c:	9b02      	ldr	r3, [sp, #8]
 800248e:	3b02      	subs	r3, #2
 8002490:	2b03      	cmp	r3, #3
 8002492:	f200 8633 	bhi.w	80030fc <_dtoa_r+0xe14>
 8002496:	e8df f013 	tbh	[pc, r3, lsl #1]
 800249a:	03d6      	.short	0x03d6
 800249c:	03e302cb 	.word	0x03e302cb
 80024a0:	0464      	.short	0x0464
 80024a2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80024a6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80024a8:	4445      	add	r5, r8
 80024aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f340 818a 	ble.w	80027c8 <_dtoa_r+0x4e0>
 80024b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80024b8:	fa09 f903 	lsl.w	r9, r9, r3
 80024bc:	9b00      	ldr	r3, [sp, #0]
 80024be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80024c2:	fa23 f000 	lsr.w	r0, r3, r0
 80024c6:	ea40 0009 	orr.w	r0, r0, r9
 80024ca:	f004 f98d 	bl	80067e8 <__aeabi_ui2d>
 80024ce:	2301      	movs	r3, #1
 80024d0:	3d01      	subs	r5, #1
 80024d2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80024d6:	9310      	str	r3, [sp, #64]	; 0x40
 80024d8:	e77c      	b.n	80023d4 <_dtoa_r+0xec>
 80024da:	4839      	ldr	r0, [pc, #228]	; (80025c0 <_dtoa_r+0x2d8>)
 80024dc:	e73c      	b.n	8002358 <_dtoa_r+0x70>
 80024de:	2100      	movs	r1, #0
 80024e0:	6461      	str	r1, [r4, #68]	; 0x44
 80024e2:	4620      	mov	r0, r4
 80024e4:	468b      	mov	fp, r1
 80024e6:	f001 ffb5 	bl	8004454 <_Balloc>
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ee:	9308      	str	r3, [sp, #32]
 80024f0:	930d      	str	r3, [sp, #52]	; 0x34
 80024f2:	2301      	movs	r3, #1
 80024f4:	9007      	str	r0, [sp, #28]
 80024f6:	6420      	str	r0, [r4, #64]	; 0x40
 80024f8:	f8cd b008 	str.w	fp, [sp, #8]
 80024fc:	9309      	str	r3, [sp, #36]	; 0x24
 80024fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002500:	2b00      	cmp	r3, #0
 8002502:	f2c0 80d0 	blt.w	80026a6 <_dtoa_r+0x3be>
 8002506:	9a04      	ldr	r2, [sp, #16]
 8002508:	2a0e      	cmp	r2, #14
 800250a:	f300 80cc 	bgt.w	80026a6 <_dtoa_r+0x3be>
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <_dtoa_r+0x2d4>)
 8002510:	f1bb 0f00 	cmp.w	fp, #0
 8002514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002518:	e9d3 8900 	ldrd	r8, r9, [r3]
 800251c:	f2c0 83be 	blt.w	8002c9c <_dtoa_r+0x9b4>
 8002520:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	4630      	mov	r0, r6
 800252a:	4639      	mov	r1, r7
 800252c:	f004 fafc 	bl	8006b28 <__aeabi_ddiv>
 8002530:	f004 fc80 	bl	8006e34 <__aeabi_d2iz>
 8002534:	4683      	mov	fp, r0
 8002536:	f004 f967 	bl	8006808 <__aeabi_i2d>
 800253a:	4642      	mov	r2, r8
 800253c:	464b      	mov	r3, r9
 800253e:	f004 f9c9 	bl	80068d4 <__aeabi_dmul>
 8002542:	460b      	mov	r3, r1
 8002544:	4602      	mov	r2, r0
 8002546:	4639      	mov	r1, r7
 8002548:	4630      	mov	r0, r6
 800254a:	f004 f80f 	bl	800656c <__aeabi_dsub>
 800254e:	9d07      	ldr	r5, [sp, #28]
 8002550:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8002554:	702b      	strb	r3, [r5, #0]
 8002556:	9b08      	ldr	r3, [sp, #32]
 8002558:	2b01      	cmp	r3, #1
 800255a:	4606      	mov	r6, r0
 800255c:	460f      	mov	r7, r1
 800255e:	f105 0501 	add.w	r5, r5, #1
 8002562:	d061      	beq.n	8002628 <_dtoa_r+0x340>
 8002564:	2200      	movs	r2, #0
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <_dtoa_r+0x2dc>)
 8002568:	f004 f9b4 	bl	80068d4 <__aeabi_dmul>
 800256c:	2200      	movs	r2, #0
 800256e:	2300      	movs	r3, #0
 8002570:	4606      	mov	r6, r0
 8002572:	460f      	mov	r7, r1
 8002574:	f004 fc16 	bl	8006da4 <__aeabi_dcmpeq>
 8002578:	2800      	cmp	r0, #0
 800257a:	f040 8081 	bne.w	8002680 <_dtoa_r+0x398>
 800257e:	f8cd a000 	str.w	sl, [sp]
 8002582:	9402      	str	r4, [sp, #8]
 8002584:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8002588:	9c08      	ldr	r4, [sp, #32]
 800258a:	e028      	b.n	80025de <_dtoa_r+0x2f6>
 800258c:	f3af 8000 	nop.w
 8002590:	636f4361 	.word	0x636f4361
 8002594:	3fd287a7 	.word	0x3fd287a7
 8002598:	8b60c8b3 	.word	0x8b60c8b3
 800259c:	3fc68a28 	.word	0x3fc68a28
 80025a0:	509f79fb 	.word	0x509f79fb
 80025a4:	3fd34413 	.word	0x3fd34413
 80025a8:	7ff00000 	.word	0x7ff00000
 80025ac:	0801b565 	.word	0x0801b565
 80025b0:	0801b568 	.word	0x0801b568
 80025b4:	0801b574 	.word	0x0801b574
 80025b8:	3ff80000 	.word	0x3ff80000
 80025bc:	0800c1f8 	.word	0x0800c1f8
 80025c0:	0801b564 	.word	0x0801b564
 80025c4:	40240000 	.word	0x40240000
 80025c8:	f004 f984 	bl	80068d4 <__aeabi_dmul>
 80025cc:	2200      	movs	r2, #0
 80025ce:	2300      	movs	r3, #0
 80025d0:	4606      	mov	r6, r0
 80025d2:	460f      	mov	r7, r1
 80025d4:	f004 fbe6 	bl	8006da4 <__aeabi_dcmpeq>
 80025d8:	2800      	cmp	r0, #0
 80025da:	f040 83c5 	bne.w	8002d68 <_dtoa_r+0xa80>
 80025de:	4642      	mov	r2, r8
 80025e0:	464b      	mov	r3, r9
 80025e2:	4630      	mov	r0, r6
 80025e4:	4639      	mov	r1, r7
 80025e6:	f004 fa9f 	bl	8006b28 <__aeabi_ddiv>
 80025ea:	f004 fc23 	bl	8006e34 <__aeabi_d2iz>
 80025ee:	4683      	mov	fp, r0
 80025f0:	f004 f90a 	bl	8006808 <__aeabi_i2d>
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	f004 f96c 	bl	80068d4 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4630      	mov	r0, r6
 8002602:	4639      	mov	r1, r7
 8002604:	f003 ffb2 	bl	800656c <__aeabi_dsub>
 8002608:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 800260c:	f805 eb01 	strb.w	lr, [r5], #1
 8002610:	eba5 0e0a 	sub.w	lr, r5, sl
 8002614:	45a6      	cmp	lr, r4
 8002616:	4606      	mov	r6, r0
 8002618:	460f      	mov	r7, r1
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <_dtoa_r+0x4f0>)
 8002620:	d1d2      	bne.n	80025c8 <_dtoa_r+0x2e0>
 8002622:	f8dd a000 	ldr.w	sl, [sp]
 8002626:	9c02      	ldr	r4, [sp, #8]
 8002628:	4632      	mov	r2, r6
 800262a:	463b      	mov	r3, r7
 800262c:	4630      	mov	r0, r6
 800262e:	4639      	mov	r1, r7
 8002630:	f003 ff9e 	bl	8006570 <__adddf3>
 8002634:	4606      	mov	r6, r0
 8002636:	460f      	mov	r7, r1
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4640      	mov	r0, r8
 800263e:	4649      	mov	r1, r9
 8002640:	f004 fbba 	bl	8006db8 <__aeabi_dcmplt>
 8002644:	b948      	cbnz	r0, 800265a <_dtoa_r+0x372>
 8002646:	4632      	mov	r2, r6
 8002648:	463b      	mov	r3, r7
 800264a:	4640      	mov	r0, r8
 800264c:	4649      	mov	r1, r9
 800264e:	f004 fba9 	bl	8006da4 <__aeabi_dcmpeq>
 8002652:	b1a8      	cbz	r0, 8002680 <_dtoa_r+0x398>
 8002654:	f01b 0f01 	tst.w	fp, #1
 8002658:	d012      	beq.n	8002680 <_dtoa_r+0x398>
 800265a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800265e:	9a07      	ldr	r2, [sp, #28]
 8002660:	1e6b      	subs	r3, r5, #1
 8002662:	e004      	b.n	800266e <_dtoa_r+0x386>
 8002664:	429a      	cmp	r2, r3
 8002666:	f000 842d 	beq.w	8002ec4 <_dtoa_r+0xbdc>
 800266a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 800266e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8002672:	f103 0501 	add.w	r5, r3, #1
 8002676:	d0f5      	beq.n	8002664 <_dtoa_r+0x37c>
 8002678:	f108 0801 	add.w	r8, r8, #1
 800267c:	f883 8000 	strb.w	r8, [r3]
 8002680:	4651      	mov	r1, sl
 8002682:	4620      	mov	r0, r4
 8002684:	f001 ff0c 	bl	80044a0 <_Bfree>
 8002688:	2200      	movs	r2, #0
 800268a:	9b04      	ldr	r3, [sp, #16]
 800268c:	702a      	strb	r2, [r5, #0]
 800268e:	9a03      	ldr	r2, [sp, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 83a3 	beq.w	8002de2 <_dtoa_r+0xafa>
 800269c:	9807      	ldr	r0, [sp, #28]
 800269e:	601d      	str	r5, [r3, #0]
 80026a0:	b017      	add	sp, #92	; 0x5c
 80026a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d040      	beq.n	800272e <_dtoa_r+0x446>
 80026ac:	9a02      	ldr	r2, [sp, #8]
 80026ae:	2a01      	cmp	r2, #1
 80026b0:	f340 831c 	ble.w	8002cec <_dtoa_r+0xa04>
 80026b4:	9b08      	ldr	r3, [sp, #32]
 80026b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80026b8:	1e5f      	subs	r7, r3, #1
 80026ba:	42ba      	cmp	r2, r7
 80026bc:	f2c0 8394 	blt.w	8002de8 <_dtoa_r+0xb00>
 80026c0:	1bd7      	subs	r7, r2, r7
 80026c2:	9b08      	ldr	r3, [sp, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f2c0 847e 	blt.w	8002fc6 <_dtoa_r+0xcde>
 80026ca:	9d06      	ldr	r5, [sp, #24]
 80026cc:	9b08      	ldr	r3, [sp, #32]
 80026ce:	9a06      	ldr	r2, [sp, #24]
 80026d0:	441a      	add	r2, r3
 80026d2:	9206      	str	r2, [sp, #24]
 80026d4:	9a05      	ldr	r2, [sp, #20]
 80026d6:	2101      	movs	r1, #1
 80026d8:	441a      	add	r2, r3
 80026da:	4620      	mov	r0, r4
 80026dc:	9205      	str	r2, [sp, #20]
 80026de:	f001 ffc7 	bl	8004670 <__i2b>
 80026e2:	4606      	mov	r6, r0
 80026e4:	e026      	b.n	8002734 <_dtoa_r+0x44c>
 80026e6:	2301      	movs	r3, #1
 80026e8:	930c      	str	r3, [sp, #48]	; 0x30
 80026ea:	e6b3      	b.n	8002454 <_dtoa_r+0x16c>
 80026ec:	9a06      	ldr	r2, [sp, #24]
 80026ee:	9b04      	ldr	r3, [sp, #16]
 80026f0:	1ad2      	subs	r2, r2, r3
 80026f2:	425b      	negs	r3, r3
 80026f4:	930a      	str	r3, [sp, #40]	; 0x28
 80026f6:	2300      	movs	r3, #0
 80026f8:	9206      	str	r2, [sp, #24]
 80026fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80026fc:	e6bd      	b.n	800247a <_dtoa_r+0x192>
 80026fe:	f1c5 0301 	rsb	r3, r5, #1
 8002702:	9306      	str	r3, [sp, #24]
 8002704:	2300      	movs	r3, #0
 8002706:	9305      	str	r3, [sp, #20]
 8002708:	e6ac      	b.n	8002464 <_dtoa_r+0x17c>
 800270a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800270e:	4648      	mov	r0, r9
 8002710:	f004 f87a 	bl	8006808 <__aeabi_i2d>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4630      	mov	r0, r6
 800271a:	4639      	mov	r1, r7
 800271c:	f004 fb42 	bl	8006da4 <__aeabi_dcmpeq>
 8002720:	2800      	cmp	r0, #0
 8002722:	f47f ae83 	bne.w	800242c <_dtoa_r+0x144>
 8002726:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800272a:	9304      	str	r3, [sp, #16]
 800272c:	e67e      	b.n	800242c <_dtoa_r+0x144>
 800272e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002730:	9d06      	ldr	r5, [sp, #24]
 8002732:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002734:	2d00      	cmp	r5, #0
 8002736:	dd0c      	ble.n	8002752 <_dtoa_r+0x46a>
 8002738:	9905      	ldr	r1, [sp, #20]
 800273a:	2900      	cmp	r1, #0
 800273c:	460b      	mov	r3, r1
 800273e:	dd08      	ble.n	8002752 <_dtoa_r+0x46a>
 8002740:	42a9      	cmp	r1, r5
 8002742:	9a06      	ldr	r2, [sp, #24]
 8002744:	bfa8      	it	ge
 8002746:	462b      	movge	r3, r5
 8002748:	1ad2      	subs	r2, r2, r3
 800274a:	1aed      	subs	r5, r5, r3
 800274c:	1acb      	subs	r3, r1, r3
 800274e:	9206      	str	r2, [sp, #24]
 8002750:	9305      	str	r3, [sp, #20]
 8002752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002754:	b1d3      	cbz	r3, 800278c <_dtoa_r+0x4a4>
 8002756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 82c0 	beq.w	8002cde <_dtoa_r+0x9f6>
 800275e:	2f00      	cmp	r7, #0
 8002760:	dd10      	ble.n	8002784 <_dtoa_r+0x49c>
 8002762:	4631      	mov	r1, r6
 8002764:	463a      	mov	r2, r7
 8002766:	4620      	mov	r0, r4
 8002768:	f002 f81e 	bl	80047a8 <__pow5mult>
 800276c:	4652      	mov	r2, sl
 800276e:	4601      	mov	r1, r0
 8002770:	4606      	mov	r6, r0
 8002772:	4620      	mov	r0, r4
 8002774:	f001 ff86 	bl	8004684 <__multiply>
 8002778:	4651      	mov	r1, sl
 800277a:	4680      	mov	r8, r0
 800277c:	4620      	mov	r0, r4
 800277e:	f001 fe8f 	bl	80044a0 <_Bfree>
 8002782:	46c2      	mov	sl, r8
 8002784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002786:	1bda      	subs	r2, r3, r7
 8002788:	f040 82aa 	bne.w	8002ce0 <_dtoa_r+0x9f8>
 800278c:	2101      	movs	r1, #1
 800278e:	4620      	mov	r0, r4
 8002790:	f001 ff6e 	bl	8004670 <__i2b>
 8002794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002796:	2b00      	cmp	r3, #0
 8002798:	4681      	mov	r9, r0
 800279a:	dd1f      	ble.n	80027dc <_dtoa_r+0x4f4>
 800279c:	4601      	mov	r1, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4620      	mov	r0, r4
 80027a2:	f002 f801 	bl	80047a8 <__pow5mult>
 80027a6:	9b02      	ldr	r3, [sp, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	4681      	mov	r9, r0
 80027ac:	f340 825b 	ble.w	8002c66 <_dtoa_r+0x97e>
 80027b0:	f04f 0800 	mov.w	r8, #0
 80027b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80027b8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80027bc:	6918      	ldr	r0, [r3, #16]
 80027be:	f001 ff07 	bl	80045d0 <__hi0bits>
 80027c2:	f1c0 0020 	rsb	r0, r0, #32
 80027c6:	e013      	b.n	80027f0 <_dtoa_r+0x508>
 80027c8:	f1c3 0920 	rsb	r9, r3, #32
 80027cc:	9b00      	ldr	r3, [sp, #0]
 80027ce:	fa03 f009 	lsl.w	r0, r3, r9
 80027d2:	e67a      	b.n	80024ca <_dtoa_r+0x1e2>
 80027d4:	900c      	str	r0, [sp, #48]	; 0x30
 80027d6:	e63d      	b.n	8002454 <_dtoa_r+0x16c>
 80027d8:	40240000 	.word	0x40240000
 80027dc:	9b02      	ldr	r3, [sp, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f340 828d 	ble.w	8002cfe <_dtoa_r+0xa16>
 80027e4:	f04f 0800 	mov.w	r8, #0
 80027e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027ea:	2001      	movs	r0, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e1      	bne.n	80027b4 <_dtoa_r+0x4cc>
 80027f0:	9a05      	ldr	r2, [sp, #20]
 80027f2:	4410      	add	r0, r2
 80027f4:	f010 001f 	ands.w	r0, r0, #31
 80027f8:	f000 80a1 	beq.w	800293e <_dtoa_r+0x656>
 80027fc:	f1c0 0320 	rsb	r3, r0, #32
 8002800:	2b04      	cmp	r3, #4
 8002802:	f340 848c 	ble.w	800311e <_dtoa_r+0xe36>
 8002806:	9b06      	ldr	r3, [sp, #24]
 8002808:	f1c0 001c 	rsb	r0, r0, #28
 800280c:	4403      	add	r3, r0
 800280e:	9306      	str	r3, [sp, #24]
 8002810:	4613      	mov	r3, r2
 8002812:	4403      	add	r3, r0
 8002814:	4405      	add	r5, r0
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	9b06      	ldr	r3, [sp, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	dd05      	ble.n	800282a <_dtoa_r+0x542>
 800281e:	4651      	mov	r1, sl
 8002820:	461a      	mov	r2, r3
 8002822:	4620      	mov	r0, r4
 8002824:	f002 f810 	bl	8004848 <__lshift>
 8002828:	4682      	mov	sl, r0
 800282a:	9b05      	ldr	r3, [sp, #20]
 800282c:	2b00      	cmp	r3, #0
 800282e:	dd05      	ble.n	800283c <_dtoa_r+0x554>
 8002830:	4649      	mov	r1, r9
 8002832:	461a      	mov	r2, r3
 8002834:	4620      	mov	r0, r4
 8002836:	f002 f807 	bl	8004848 <__lshift>
 800283a:	4681      	mov	r9, r0
 800283c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 8086 	bne.w	8002950 <_dtoa_r+0x668>
 8002844:	9b08      	ldr	r3, [sp, #32]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f340 8269 	ble.w	8002d1e <_dtoa_r+0xa36>
 800284c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8098 	beq.w	8002984 <_dtoa_r+0x69c>
 8002854:	2d00      	cmp	r5, #0
 8002856:	dd05      	ble.n	8002864 <_dtoa_r+0x57c>
 8002858:	4631      	mov	r1, r6
 800285a:	462a      	mov	r2, r5
 800285c:	4620      	mov	r0, r4
 800285e:	f001 fff3 	bl	8004848 <__lshift>
 8002862:	4606      	mov	r6, r0
 8002864:	f1b8 0f00 	cmp.w	r8, #0
 8002868:	f040 8336 	bne.w	8002ed8 <_dtoa_r+0xbf0>
 800286c:	46b0      	mov	r8, r6
 800286e:	9b08      	ldr	r3, [sp, #32]
 8002870:	9a07      	ldr	r2, [sp, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	18d3      	adds	r3, r2, r3
 8002876:	9308      	str	r3, [sp, #32]
 8002878:	9b00      	ldr	r3, [sp, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	9309      	str	r3, [sp, #36]	; 0x24
 8002880:	4617      	mov	r7, r2
 8002882:	4649      	mov	r1, r9
 8002884:	4650      	mov	r0, sl
 8002886:	f7ff fc9b 	bl	80021c0 <quorem>
 800288a:	4631      	mov	r1, r6
 800288c:	4605      	mov	r5, r0
 800288e:	4650      	mov	r0, sl
 8002890:	f002 f82c 	bl	80048ec <__mcmp>
 8002894:	4642      	mov	r2, r8
 8002896:	4649      	mov	r1, r9
 8002898:	4683      	mov	fp, r0
 800289a:	4620      	mov	r0, r4
 800289c:	f002 f842 	bl	8004924 <__mdiff>
 80028a0:	f105 0230 	add.w	r2, r5, #48	; 0x30
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	68c2      	ldr	r2, [r0, #12]
 80028a8:	4601      	mov	r1, r0
 80028aa:	2a00      	cmp	r2, #0
 80028ac:	f040 8232 	bne.w	8002d14 <_dtoa_r+0xa2c>
 80028b0:	9006      	str	r0, [sp, #24]
 80028b2:	4650      	mov	r0, sl
 80028b4:	f002 f81a 	bl	80048ec <__mcmp>
 80028b8:	9b06      	ldr	r3, [sp, #24]
 80028ba:	9005      	str	r0, [sp, #20]
 80028bc:	4619      	mov	r1, r3
 80028be:	4620      	mov	r0, r4
 80028c0:	f001 fdee 	bl	80044a0 <_Bfree>
 80028c4:	9a05      	ldr	r2, [sp, #20]
 80028c6:	b932      	cbnz	r2, 80028d6 <_dtoa_r+0x5ee>
 80028c8:	9b02      	ldr	r3, [sp, #8]
 80028ca:	b923      	cbnz	r3, 80028d6 <_dtoa_r+0x5ee>
 80028cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 83de 	beq.w	8003090 <_dtoa_r+0xda8>
 80028d4:	9a02      	ldr	r2, [sp, #8]
 80028d6:	f1bb 0f00 	cmp.w	fp, #0
 80028da:	f2c0 82a2 	blt.w	8002e22 <_dtoa_r+0xb3a>
 80028de:	d105      	bne.n	80028ec <_dtoa_r+0x604>
 80028e0:	9b02      	ldr	r3, [sp, #8]
 80028e2:	b91b      	cbnz	r3, 80028ec <_dtoa_r+0x604>
 80028e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 829b 	beq.w	8002e22 <_dtoa_r+0xb3a>
 80028ec:	2a00      	cmp	r2, #0
 80028ee:	f300 8307 	bgt.w	8002f00 <_dtoa_r+0xc18>
 80028f2:	f89d 3000 	ldrb.w	r3, [sp]
 80028f6:	703b      	strb	r3, [r7, #0]
 80028f8:	9b08      	ldr	r3, [sp, #32]
 80028fa:	f107 0b01 	add.w	fp, r7, #1
 80028fe:	429f      	cmp	r7, r3
 8002900:	465d      	mov	r5, fp
 8002902:	f000 8308 	beq.w	8002f16 <_dtoa_r+0xc2e>
 8002906:	4651      	mov	r1, sl
 8002908:	2300      	movs	r3, #0
 800290a:	220a      	movs	r2, #10
 800290c:	4620      	mov	r0, r4
 800290e:	f001 fdd1 	bl	80044b4 <__multadd>
 8002912:	4546      	cmp	r6, r8
 8002914:	4682      	mov	sl, r0
 8002916:	4631      	mov	r1, r6
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	f04f 020a 	mov.w	r2, #10
 8002920:	4620      	mov	r0, r4
 8002922:	f000 81f1 	beq.w	8002d08 <_dtoa_r+0xa20>
 8002926:	f001 fdc5 	bl	80044b4 <__multadd>
 800292a:	4641      	mov	r1, r8
 800292c:	4606      	mov	r6, r0
 800292e:	2300      	movs	r3, #0
 8002930:	220a      	movs	r2, #10
 8002932:	4620      	mov	r0, r4
 8002934:	f001 fdbe 	bl	80044b4 <__multadd>
 8002938:	465f      	mov	r7, fp
 800293a:	4680      	mov	r8, r0
 800293c:	e7a1      	b.n	8002882 <_dtoa_r+0x59a>
 800293e:	201c      	movs	r0, #28
 8002940:	9b06      	ldr	r3, [sp, #24]
 8002942:	4403      	add	r3, r0
 8002944:	9306      	str	r3, [sp, #24]
 8002946:	9b05      	ldr	r3, [sp, #20]
 8002948:	4403      	add	r3, r0
 800294a:	4405      	add	r5, r0
 800294c:	9305      	str	r3, [sp, #20]
 800294e:	e763      	b.n	8002818 <_dtoa_r+0x530>
 8002950:	4649      	mov	r1, r9
 8002952:	4650      	mov	r0, sl
 8002954:	f001 ffca 	bl	80048ec <__mcmp>
 8002958:	2800      	cmp	r0, #0
 800295a:	f6bf af73 	bge.w	8002844 <_dtoa_r+0x55c>
 800295e:	9f04      	ldr	r7, [sp, #16]
 8002960:	4651      	mov	r1, sl
 8002962:	2300      	movs	r3, #0
 8002964:	220a      	movs	r2, #10
 8002966:	4620      	mov	r0, r4
 8002968:	3f01      	subs	r7, #1
 800296a:	9704      	str	r7, [sp, #16]
 800296c:	f001 fda2 	bl	80044b4 <__multadd>
 8002970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002972:	4682      	mov	sl, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 83a7 	bne.w	80030c8 <_dtoa_r+0xde0>
 800297a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	f340 83b0 	ble.w	80030e2 <_dtoa_r+0xdfa>
 8002982:	9308      	str	r3, [sp, #32]
 8002984:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8002988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800298c:	465d      	mov	r5, fp
 800298e:	e002      	b.n	8002996 <_dtoa_r+0x6ae>
 8002990:	f001 fd90 	bl	80044b4 <__multadd>
 8002994:	4682      	mov	sl, r0
 8002996:	4649      	mov	r1, r9
 8002998:	4650      	mov	r0, sl
 800299a:	f7ff fc11 	bl	80021c0 <quorem>
 800299e:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80029a2:	f805 7b01 	strb.w	r7, [r5], #1
 80029a6:	eba5 030b 	sub.w	r3, r5, fp
 80029aa:	4543      	cmp	r3, r8
 80029ac:	f04f 020a 	mov.w	r2, #10
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	4651      	mov	r1, sl
 80029b6:	4620      	mov	r0, r4
 80029b8:	dbea      	blt.n	8002990 <_dtoa_r+0x6a8>
 80029ba:	9b07      	ldr	r3, [sp, #28]
 80029bc:	9a08      	ldr	r2, [sp, #32]
 80029be:	9700      	str	r7, [sp, #0]
 80029c0:	2a01      	cmp	r2, #1
 80029c2:	bfac      	ite	ge
 80029c4:	189b      	addge	r3, r3, r2
 80029c6:	3301      	addlt	r3, #1
 80029c8:	461d      	mov	r5, r3
 80029ca:	f04f 0b00 	mov.w	fp, #0
 80029ce:	4651      	mov	r1, sl
 80029d0:	2201      	movs	r2, #1
 80029d2:	4620      	mov	r0, r4
 80029d4:	f001 ff38 	bl	8004848 <__lshift>
 80029d8:	4649      	mov	r1, r9
 80029da:	4682      	mov	sl, r0
 80029dc:	f001 ff86 	bl	80048ec <__mcmp>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	f340 823a 	ble.w	8002e5a <_dtoa_r+0xb72>
 80029e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80029ea:	9907      	ldr	r1, [sp, #28]
 80029ec:	1e6b      	subs	r3, r5, #1
 80029ee:	e004      	b.n	80029fa <_dtoa_r+0x712>
 80029f0:	428b      	cmp	r3, r1
 80029f2:	f000 81af 	beq.w	8002d54 <_dtoa_r+0xa6c>
 80029f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80029fa:	2a39      	cmp	r2, #57	; 0x39
 80029fc:	f103 0501 	add.w	r5, r3, #1
 8002a00:	d0f6      	beq.n	80029f0 <_dtoa_r+0x708>
 8002a02:	3201      	adds	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	4649      	mov	r1, r9
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f001 fd49 	bl	80044a0 <_Bfree>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	f43f ae36 	beq.w	8002680 <_dtoa_r+0x398>
 8002a14:	f1bb 0f00 	cmp.w	fp, #0
 8002a18:	d005      	beq.n	8002a26 <_dtoa_r+0x73e>
 8002a1a:	45b3      	cmp	fp, r6
 8002a1c:	d003      	beq.n	8002a26 <_dtoa_r+0x73e>
 8002a1e:	4659      	mov	r1, fp
 8002a20:	4620      	mov	r0, r4
 8002a22:	f001 fd3d 	bl	80044a0 <_Bfree>
 8002a26:	4631      	mov	r1, r6
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f001 fd39 	bl	80044a0 <_Bfree>
 8002a2e:	e627      	b.n	8002680 <_dtoa_r+0x398>
 8002a30:	2300      	movs	r3, #0
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
 8002a34:	9b04      	ldr	r3, [sp, #16]
 8002a36:	445b      	add	r3, fp
 8002a38:	930d      	str	r3, [sp, #52]	; 0x34
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	461e      	mov	r6, r3
 8002a40:	461d      	mov	r5, r3
 8002a42:	9308      	str	r3, [sp, #32]
 8002a44:	bfb8      	it	lt
 8002a46:	2601      	movlt	r6, #1
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2e17      	cmp	r6, #23
 8002a4c:	6461      	str	r1, [r4, #68]	; 0x44
 8002a4e:	d90a      	bls.n	8002a66 <_dtoa_r+0x77e>
 8002a50:	2201      	movs	r2, #1
 8002a52:	2304      	movs	r3, #4
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	f103 0014 	add.w	r0, r3, #20
 8002a5a:	4286      	cmp	r6, r0
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	f102 0201 	add.w	r2, r2, #1
 8002a62:	d2f7      	bcs.n	8002a54 <_dtoa_r+0x76c>
 8002a64:	6461      	str	r1, [r4, #68]	; 0x44
 8002a66:	4620      	mov	r0, r4
 8002a68:	f001 fcf4 	bl	8004454 <_Balloc>
 8002a6c:	2d0e      	cmp	r5, #14
 8002a6e:	9007      	str	r0, [sp, #28]
 8002a70:	6420      	str	r0, [r4, #64]	; 0x40
 8002a72:	f63f ad44 	bhi.w	80024fe <_dtoa_r+0x216>
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	f43f ad41 	beq.w	80024fe <_dtoa_r+0x216>
 8002a7c:	9904      	ldr	r1, [sp, #16]
 8002a7e:	2900      	cmp	r1, #0
 8002a80:	ed9d 7b00 	vldr	d7, [sp]
 8002a84:	f340 81f6 	ble.w	8002e74 <_dtoa_r+0xb8c>
 8002a88:	4bb9      	ldr	r3, [pc, #740]	; (8002d70 <_dtoa_r+0xa88>)
 8002a8a:	f001 020f 	and.w	r2, r1, #15
 8002a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a92:	110d      	asrs	r5, r1, #4
 8002a94:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002a98:	06eb      	lsls	r3, r5, #27
 8002a9a:	f140 81ad 	bpl.w	8002df8 <_dtoa_r+0xb10>
 8002a9e:	4bb5      	ldr	r3, [pc, #724]	; (8002d74 <_dtoa_r+0xa8c>)
 8002aa0:	ec51 0b17 	vmov	r0, r1, d7
 8002aa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002aa8:	f004 f83e 	bl	8006b28 <__aeabi_ddiv>
 8002aac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002ab0:	f005 050f 	and.w	r5, r5, #15
 8002ab4:	f04f 0903 	mov.w	r9, #3
 8002ab8:	b18d      	cbz	r5, 8002ade <_dtoa_r+0x7f6>
 8002aba:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8002d74 <_dtoa_r+0xa8c>
 8002abe:	07e8      	lsls	r0, r5, #31
 8002ac0:	d509      	bpl.n	8002ad6 <_dtoa_r+0x7ee>
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	4639      	mov	r1, r7
 8002ac6:	e9d8 2300 	ldrd	r2, r3, [r8]
 8002aca:	f003 ff03 	bl	80068d4 <__aeabi_dmul>
 8002ace:	f109 0901 	add.w	r9, r9, #1
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	460f      	mov	r7, r1
 8002ad6:	106d      	asrs	r5, r5, #1
 8002ad8:	f108 0808 	add.w	r8, r8, #8
 8002adc:	d1ef      	bne.n	8002abe <_dtoa_r+0x7d6>
 8002ade:	463b      	mov	r3, r7
 8002ae0:	4632      	mov	r2, r6
 8002ae2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002ae6:	f004 f81f 	bl	8006b28 <__aeabi_ddiv>
 8002aea:	4607      	mov	r7, r0
 8002aec:	4688      	mov	r8, r1
 8002aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002af0:	b143      	cbz	r3, 8002b04 <_dtoa_r+0x81c>
 8002af2:	2200      	movs	r2, #0
 8002af4:	4ba0      	ldr	r3, [pc, #640]	; (8002d78 <_dtoa_r+0xa90>)
 8002af6:	4638      	mov	r0, r7
 8002af8:	4641      	mov	r1, r8
 8002afa:	f004 f95d 	bl	8006db8 <__aeabi_dcmplt>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	f040 8273 	bne.w	8002fea <_dtoa_r+0xd02>
 8002b04:	4648      	mov	r0, r9
 8002b06:	f003 fe7f 	bl	8006808 <__aeabi_i2d>
 8002b0a:	463a      	mov	r2, r7
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	f003 fee1 	bl	80068d4 <__aeabi_dmul>
 8002b12:	4b9a      	ldr	r3, [pc, #616]	; (8002d7c <_dtoa_r+0xa94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	f003 fd2b 	bl	8006570 <__adddf3>
 8002b1a:	9b08      	ldr	r3, [sp, #32]
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8140 	beq.w	8002da8 <_dtoa_r+0xac0>
 8002b28:	9b04      	ldr	r3, [sp, #16]
 8002b2a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8002b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 81f6 	beq.w	8002f24 <_dtoa_r+0xc3c>
 8002b38:	4b8d      	ldr	r3, [pc, #564]	; (8002d70 <_dtoa_r+0xa88>)
 8002b3a:	4991      	ldr	r1, [pc, #580]	; (8002d80 <_dtoa_r+0xa98>)
 8002b3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002b40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002b44:	2000      	movs	r0, #0
 8002b46:	f003 ffef 	bl	8006b28 <__aeabi_ddiv>
 8002b4a:	462a      	mov	r2, r5
 8002b4c:	4633      	mov	r3, r6
 8002b4e:	f003 fd0d 	bl	800656c <__aeabi_dsub>
 8002b52:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002b56:	4641      	mov	r1, r8
 8002b58:	4638      	mov	r0, r7
 8002b5a:	f004 f96b 	bl	8006e34 <__aeabi_d2iz>
 8002b5e:	4605      	mov	r5, r0
 8002b60:	f003 fe52 	bl	8006808 <__aeabi_i2d>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4638      	mov	r0, r7
 8002b6a:	4641      	mov	r1, r8
 8002b6c:	f003 fcfe 	bl	800656c <__aeabi_dsub>
 8002b70:	3530      	adds	r5, #48	; 0x30
 8002b72:	fa5f f885 	uxtb.w	r8, r5
 8002b76:	9d07      	ldr	r5, [sp, #28]
 8002b78:	4606      	mov	r6, r0
 8002b7a:	460f      	mov	r7, r1
 8002b7c:	f885 8000 	strb.w	r8, [r5]
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002b88:	3501      	adds	r5, #1
 8002b8a:	f004 f933 	bl	8006df4 <__aeabi_dcmpgt>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d156      	bne.n	8002c40 <_dtoa_r+0x958>
 8002b92:	4632      	mov	r2, r6
 8002b94:	463b      	mov	r3, r7
 8002b96:	2000      	movs	r0, #0
 8002b98:	4977      	ldr	r1, [pc, #476]	; (8002d78 <_dtoa_r+0xa90>)
 8002b9a:	f003 fce7 	bl	800656c <__aeabi_dsub>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002ba6:	f004 f925 	bl	8006df4 <__aeabi_dcmpgt>
 8002baa:	2800      	cmp	r0, #0
 8002bac:	f040 8262 	bne.w	8003074 <_dtoa_r+0xd8c>
 8002bb0:	f1b9 0f01 	cmp.w	r9, #1
 8002bb4:	f43f aca3 	beq.w	80024fe <_dtoa_r+0x216>
 8002bb8:	9b07      	ldr	r3, [sp, #28]
 8002bba:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8002bbe:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8002bc2:	4499      	add	r9, r3
 8002bc4:	46a0      	mov	r8, r4
 8002bc6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8002bca:	e00d      	b.n	8002be8 <_dtoa_r+0x900>
 8002bcc:	2000      	movs	r0, #0
 8002bce:	496a      	ldr	r1, [pc, #424]	; (8002d78 <_dtoa_r+0xa90>)
 8002bd0:	f003 fccc 	bl	800656c <__aeabi_dsub>
 8002bd4:	4652      	mov	r2, sl
 8002bd6:	465b      	mov	r3, fp
 8002bd8:	f004 f8ee 	bl	8006db8 <__aeabi_dcmplt>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f040 8244 	bne.w	800306a <_dtoa_r+0xd82>
 8002be2:	454d      	cmp	r5, r9
 8002be4:	f000 824a 	beq.w	800307c <_dtoa_r+0xd94>
 8002be8:	4650      	mov	r0, sl
 8002bea:	4659      	mov	r1, fp
 8002bec:	2200      	movs	r2, #0
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <_dtoa_r+0xa9c>)
 8002bf0:	f003 fe70 	bl	80068d4 <__aeabi_dmul>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <_dtoa_r+0xa9c>)
 8002bf8:	4682      	mov	sl, r0
 8002bfa:	468b      	mov	fp, r1
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	4639      	mov	r1, r7
 8002c00:	f003 fe68 	bl	80068d4 <__aeabi_dmul>
 8002c04:	460f      	mov	r7, r1
 8002c06:	4606      	mov	r6, r0
 8002c08:	f004 f914 	bl	8006e34 <__aeabi_d2iz>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	f003 fdfb 	bl	8006808 <__aeabi_i2d>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4630      	mov	r0, r6
 8002c18:	4639      	mov	r1, r7
 8002c1a:	f003 fca7 	bl	800656c <__aeabi_dsub>
 8002c1e:	3430      	adds	r4, #48	; 0x30
 8002c20:	b2e4      	uxtb	r4, r4
 8002c22:	4652      	mov	r2, sl
 8002c24:	465b      	mov	r3, fp
 8002c26:	f805 4b01 	strb.w	r4, [r5], #1
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	460f      	mov	r7, r1
 8002c2e:	f004 f8c3 	bl	8006db8 <__aeabi_dcmplt>
 8002c32:	4632      	mov	r2, r6
 8002c34:	463b      	mov	r3, r7
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d0c8      	beq.n	8002bcc <_dtoa_r+0x8e4>
 8002c3a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8002c3e:	4644      	mov	r4, r8
 8002c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c42:	9304      	str	r3, [sp, #16]
 8002c44:	e51c      	b.n	8002680 <_dtoa_r+0x398>
 8002c46:	2300      	movs	r3, #0
 8002c48:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4a:	f1bb 0f00 	cmp.w	fp, #0
 8002c4e:	f340 80da 	ble.w	8002e06 <_dtoa_r+0xb1e>
 8002c52:	465e      	mov	r6, fp
 8002c54:	465d      	mov	r5, fp
 8002c56:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8002c5a:	f8cd b020 	str.w	fp, [sp, #32]
 8002c5e:	e6f3      	b.n	8002a48 <_dtoa_r+0x760>
 8002c60:	2301      	movs	r3, #1
 8002c62:	9309      	str	r3, [sp, #36]	; 0x24
 8002c64:	e7f1      	b.n	8002c4a <_dtoa_r+0x962>
 8002c66:	9b00      	ldr	r3, [sp, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f47f ada1 	bne.w	80027b0 <_dtoa_r+0x4c8>
 8002c6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8002c72:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f47f adb4 	bne.w	80027e4 <_dtoa_r+0x4fc>
 8002c7c:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 8002c80:	0d3f      	lsrs	r7, r7, #20
 8002c82:	053f      	lsls	r7, r7, #20
 8002c84:	2f00      	cmp	r7, #0
 8002c86:	f000 8200 	beq.w	800308a <_dtoa_r+0xda2>
 8002c8a:	9b06      	ldr	r3, [sp, #24]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	9306      	str	r3, [sp, #24]
 8002c90:	9b05      	ldr	r3, [sp, #20]
 8002c92:	3301      	adds	r3, #1
 8002c94:	9305      	str	r3, [sp, #20]
 8002c96:	f04f 0801 	mov.w	r8, #1
 8002c9a:	e5a5      	b.n	80027e8 <_dtoa_r+0x500>
 8002c9c:	9b08      	ldr	r3, [sp, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f73f ac3e 	bgt.w	8002520 <_dtoa_r+0x238>
 8002ca4:	f040 8099 	bne.w	8002dda <_dtoa_r+0xaf2>
 8002ca8:	4649      	mov	r1, r9
 8002caa:	2200      	movs	r2, #0
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <_dtoa_r+0xaa0>)
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f003 fe10 	bl	80068d4 <__aeabi_dmul>
 8002cb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002cb8:	f004 f892 	bl	8006de0 <__aeabi_dcmpge>
 8002cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cc0:	464e      	mov	r6, r9
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d03e      	beq.n	8002d44 <_dtoa_r+0xa5c>
 8002cc6:	ea6f 030b 	mvn.w	r3, fp
 8002cca:	9d07      	ldr	r5, [sp, #28]
 8002ccc:	9304      	str	r3, [sp, #16]
 8002cce:	4649      	mov	r1, r9
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f001 fbe5 	bl	80044a0 <_Bfree>
 8002cd6:	2e00      	cmp	r6, #0
 8002cd8:	f43f acd2 	beq.w	8002680 <_dtoa_r+0x398>
 8002cdc:	e6a3      	b.n	8002a26 <_dtoa_r+0x73e>
 8002cde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ce0:	4651      	mov	r1, sl
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f001 fd60 	bl	80047a8 <__pow5mult>
 8002ce8:	4682      	mov	sl, r0
 8002cea:	e54f      	b.n	800278c <_dtoa_r+0x4a4>
 8002cec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002cee:	2a00      	cmp	r2, #0
 8002cf0:	f000 816f 	beq.w	8002fd2 <_dtoa_r+0xcea>
 8002cf4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002cf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002cfa:	9d06      	ldr	r5, [sp, #24]
 8002cfc:	e4e7      	b.n	80026ce <_dtoa_r+0x3e6>
 8002cfe:	9b00      	ldr	r3, [sp, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f ad6f 	bne.w	80027e4 <_dtoa_r+0x4fc>
 8002d06:	e7b2      	b.n	8002c6e <_dtoa_r+0x986>
 8002d08:	f001 fbd4 	bl	80044b4 <__multadd>
 8002d0c:	465f      	mov	r7, fp
 8002d0e:	4606      	mov	r6, r0
 8002d10:	4680      	mov	r8, r0
 8002d12:	e5b6      	b.n	8002882 <_dtoa_r+0x59a>
 8002d14:	4620      	mov	r0, r4
 8002d16:	f001 fbc3 	bl	80044a0 <_Bfree>
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	e5db      	b.n	80028d6 <_dtoa_r+0x5ee>
 8002d1e:	9b02      	ldr	r3, [sp, #8]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	f77f ad93 	ble.w	800284c <_dtoa_r+0x564>
 8002d26:	9b08      	ldr	r3, [sp, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1cc      	bne.n	8002cc6 <_dtoa_r+0x9de>
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	2205      	movs	r2, #5
 8002d30:	4620      	mov	r0, r4
 8002d32:	f001 fbbf 	bl	80044b4 <__multadd>
 8002d36:	4601      	mov	r1, r0
 8002d38:	4681      	mov	r9, r0
 8002d3a:	4650      	mov	r0, sl
 8002d3c:	f001 fdd6 	bl	80048ec <__mcmp>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	ddc0      	ble.n	8002cc6 <_dtoa_r+0x9de>
 8002d44:	9a04      	ldr	r2, [sp, #16]
 8002d46:	9907      	ldr	r1, [sp, #28]
 8002d48:	2331      	movs	r3, #49	; 0x31
 8002d4a:	3201      	adds	r2, #1
 8002d4c:	9204      	str	r2, [sp, #16]
 8002d4e:	700b      	strb	r3, [r1, #0]
 8002d50:	1c4d      	adds	r5, r1, #1
 8002d52:	e7bc      	b.n	8002cce <_dtoa_r+0x9e6>
 8002d54:	9a04      	ldr	r2, [sp, #16]
 8002d56:	3201      	adds	r2, #1
 8002d58:	9204      	str	r2, [sp, #16]
 8002d5a:	9a07      	ldr	r2, [sp, #28]
 8002d5c:	2331      	movs	r3, #49	; 0x31
 8002d5e:	7013      	strb	r3, [r2, #0]
 8002d60:	e651      	b.n	8002a06 <_dtoa_r+0x71e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	9309      	str	r3, [sp, #36]	; 0x24
 8002d66:	e665      	b.n	8002a34 <_dtoa_r+0x74c>
 8002d68:	f8dd a000 	ldr.w	sl, [sp]
 8002d6c:	9c02      	ldr	r4, [sp, #8]
 8002d6e:	e487      	b.n	8002680 <_dtoa_r+0x398>
 8002d70:	0800c1f8 	.word	0x0800c1f8
 8002d74:	0800c2e8 	.word	0x0800c2e8
 8002d78:	3ff00000 	.word	0x3ff00000
 8002d7c:	401c0000 	.word	0x401c0000
 8002d80:	3fe00000 	.word	0x3fe00000
 8002d84:	40240000 	.word	0x40240000
 8002d88:	40140000 	.word	0x40140000
 8002d8c:	4648      	mov	r0, r9
 8002d8e:	f003 fd3b 	bl	8006808 <__aeabi_i2d>
 8002d92:	463a      	mov	r2, r7
 8002d94:	4643      	mov	r3, r8
 8002d96:	f003 fd9d 	bl	80068d4 <__aeabi_dmul>
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4bc4      	ldr	r3, [pc, #784]	; (80030b0 <_dtoa_r+0xdc8>)
 8002d9e:	f003 fbe7 	bl	8006570 <__adddf3>
 8002da2:	4605      	mov	r5, r0
 8002da4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8002da8:	4641      	mov	r1, r8
 8002daa:	2200      	movs	r2, #0
 8002dac:	4bc1      	ldr	r3, [pc, #772]	; (80030b4 <_dtoa_r+0xdcc>)
 8002dae:	4638      	mov	r0, r7
 8002db0:	f003 fbdc 	bl	800656c <__aeabi_dsub>
 8002db4:	462a      	mov	r2, r5
 8002db6:	4633      	mov	r3, r6
 8002db8:	4680      	mov	r8, r0
 8002dba:	4689      	mov	r9, r1
 8002dbc:	f004 f81a 	bl	8006df4 <__aeabi_dcmpgt>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	f040 80ab 	bne.w	8002f1c <_dtoa_r+0xc34>
 8002dc6:	462a      	mov	r2, r5
 8002dc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8002dcc:	4640      	mov	r0, r8
 8002dce:	4649      	mov	r1, r9
 8002dd0:	f003 fff2 	bl	8006db8 <__aeabi_dcmplt>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	f43f ab92 	beq.w	80024fe <_dtoa_r+0x216>
 8002dda:	f04f 0900 	mov.w	r9, #0
 8002dde:	464e      	mov	r6, r9
 8002de0:	e771      	b.n	8002cc6 <_dtoa_r+0x9de>
 8002de2:	9807      	ldr	r0, [sp, #28]
 8002de4:	f7ff bab8 	b.w	8002358 <_dtoa_r+0x70>
 8002de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002dec:	970a      	str	r7, [sp, #40]	; 0x28
 8002dee:	1afb      	subs	r3, r7, r3
 8002df0:	441a      	add	r2, r3
 8002df2:	920b      	str	r2, [sp, #44]	; 0x2c
 8002df4:	2700      	movs	r7, #0
 8002df6:	e464      	b.n	80026c2 <_dtoa_r+0x3da>
 8002df8:	ed9d 7b00 	vldr	d7, [sp]
 8002dfc:	f04f 0902 	mov.w	r9, #2
 8002e00:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002e04:	e658      	b.n	8002ab8 <_dtoa_r+0x7d0>
 8002e06:	2100      	movs	r1, #0
 8002e08:	6461      	str	r1, [r4, #68]	; 0x44
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f001 fb22 	bl	8004454 <_Balloc>
 8002e10:	f04f 0b01 	mov.w	fp, #1
 8002e14:	9007      	str	r0, [sp, #28]
 8002e16:	6420      	str	r0, [r4, #64]	; 0x40
 8002e18:	f8cd b020 	str.w	fp, [sp, #32]
 8002e1c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8002e20:	e629      	b.n	8002a76 <_dtoa_r+0x78e>
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	dd12      	ble.n	8002e4c <_dtoa_r+0xb64>
 8002e26:	4651      	mov	r1, sl
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f001 fd0c 	bl	8004848 <__lshift>
 8002e30:	4649      	mov	r1, r9
 8002e32:	4682      	mov	sl, r0
 8002e34:	f001 fd5a 	bl	80048ec <__mcmp>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	f340 8131 	ble.w	80030a0 <_dtoa_r+0xdb8>
 8002e3e:	9b00      	ldr	r3, [sp, #0]
 8002e40:	2b39      	cmp	r3, #57	; 0x39
 8002e42:	f000 80f7 	beq.w	8003034 <_dtoa_r+0xd4c>
 8002e46:	f105 0331 	add.w	r3, r5, #49	; 0x31
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f89d 3000 	ldrb.w	r3, [sp]
 8002e50:	703b      	strb	r3, [r7, #0]
 8002e52:	46b3      	mov	fp, r6
 8002e54:	1c7d      	adds	r5, r7, #1
 8002e56:	4646      	mov	r6, r8
 8002e58:	e5d5      	b.n	8002a06 <_dtoa_r+0x71e>
 8002e5a:	d104      	bne.n	8002e66 <_dtoa_r+0xb7e>
 8002e5c:	9b00      	ldr	r3, [sp, #0]
 8002e5e:	07db      	lsls	r3, r3, #31
 8002e60:	d501      	bpl.n	8002e66 <_dtoa_r+0xb7e>
 8002e62:	e5c0      	b.n	80029e6 <_dtoa_r+0x6fe>
 8002e64:	4615      	mov	r5, r2
 8002e66:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002e6a:	2b30      	cmp	r3, #48	; 0x30
 8002e6c:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8002e70:	d0f8      	beq.n	8002e64 <_dtoa_r+0xb7c>
 8002e72:	e5c8      	b.n	8002a06 <_dtoa_r+0x71e>
 8002e74:	f000 80b4 	beq.w	8002fe0 <_dtoa_r+0xcf8>
 8002e78:	9b04      	ldr	r3, [sp, #16]
 8002e7a:	425d      	negs	r5, r3
 8002e7c:	4b8e      	ldr	r3, [pc, #568]	; (80030b8 <_dtoa_r+0xdd0>)
 8002e7e:	f005 020f 	and.w	r2, r5, #15
 8002e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e8e:	f003 fd21 	bl	80068d4 <__aeabi_dmul>
 8002e92:	112d      	asrs	r5, r5, #4
 8002e94:	4607      	mov	r7, r0
 8002e96:	4688      	mov	r8, r1
 8002e98:	f000 8128 	beq.w	80030ec <_dtoa_r+0xe04>
 8002e9c:	4e87      	ldr	r6, [pc, #540]	; (80030bc <_dtoa_r+0xdd4>)
 8002e9e:	f04f 0902 	mov.w	r9, #2
 8002ea2:	07e9      	lsls	r1, r5, #31
 8002ea4:	d509      	bpl.n	8002eba <_dtoa_r+0xbd2>
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002eae:	f003 fd11 	bl	80068d4 <__aeabi_dmul>
 8002eb2:	f109 0901 	add.w	r9, r9, #1
 8002eb6:	4607      	mov	r7, r0
 8002eb8:	4688      	mov	r8, r1
 8002eba:	106d      	asrs	r5, r5, #1
 8002ebc:	f106 0608 	add.w	r6, r6, #8
 8002ec0:	d1ef      	bne.n	8002ea2 <_dtoa_r+0xbba>
 8002ec2:	e614      	b.n	8002aee <_dtoa_r+0x806>
 8002ec4:	9907      	ldr	r1, [sp, #28]
 8002ec6:	2230      	movs	r2, #48	; 0x30
 8002ec8:	700a      	strb	r2, [r1, #0]
 8002eca:	9a04      	ldr	r2, [sp, #16]
 8002ecc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8002ed0:	3201      	adds	r2, #1
 8002ed2:	9204      	str	r2, [sp, #16]
 8002ed4:	f7ff bbd0 	b.w	8002678 <_dtoa_r+0x390>
 8002ed8:	6871      	ldr	r1, [r6, #4]
 8002eda:	4620      	mov	r0, r4
 8002edc:	f001 faba 	bl	8004454 <_Balloc>
 8002ee0:	6933      	ldr	r3, [r6, #16]
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	009a      	lsls	r2, r3, #2
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	f106 010c 	add.w	r1, r6, #12
 8002eec:	300c      	adds	r0, #12
 8002eee:	f001 f9af 	bl	8004250 <memcpy>
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f001 fca6 	bl	8004848 <__lshift>
 8002efc:	4680      	mov	r8, r0
 8002efe:	e4b6      	b.n	800286e <_dtoa_r+0x586>
 8002f00:	9b00      	ldr	r3, [sp, #0]
 8002f02:	2b39      	cmp	r3, #57	; 0x39
 8002f04:	f000 8096 	beq.w	8003034 <_dtoa_r+0xd4c>
 8002f08:	9b00      	ldr	r3, [sp, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	46b3      	mov	fp, r6
 8002f0e:	703b      	strb	r3, [r7, #0]
 8002f10:	1c7d      	adds	r5, r7, #1
 8002f12:	4646      	mov	r6, r8
 8002f14:	e577      	b.n	8002a06 <_dtoa_r+0x71e>
 8002f16:	46b3      	mov	fp, r6
 8002f18:	4646      	mov	r6, r8
 8002f1a:	e558      	b.n	80029ce <_dtoa_r+0x6e6>
 8002f1c:	f04f 0900 	mov.w	r9, #0
 8002f20:	464e      	mov	r6, r9
 8002f22:	e70f      	b.n	8002d44 <_dtoa_r+0xa5c>
 8002f24:	4964      	ldr	r1, [pc, #400]	; (80030b8 <_dtoa_r+0xdd0>)
 8002f26:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8002f2a:	462a      	mov	r2, r5
 8002f2c:	4633      	mov	r3, r6
 8002f2e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8002f32:	f003 fccf 	bl	80068d4 <__aeabi_dmul>
 8002f36:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	f003 ff79 	bl	8006e34 <__aeabi_d2iz>
 8002f42:	4605      	mov	r5, r0
 8002f44:	f003 fc60 	bl	8006808 <__aeabi_i2d>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	4641      	mov	r1, r8
 8002f50:	f003 fb0c 	bl	800656c <__aeabi_dsub>
 8002f54:	9a07      	ldr	r2, [sp, #28]
 8002f56:	3530      	adds	r5, #48	; 0x30
 8002f58:	f1b9 0f01 	cmp.w	r9, #1
 8002f5c:	7015      	strb	r5, [r2, #0]
 8002f5e:	4606      	mov	r6, r0
 8002f60:	460f      	mov	r7, r1
 8002f62:	f102 0501 	add.w	r5, r2, #1
 8002f66:	d01c      	beq.n	8002fa2 <_dtoa_r+0xcba>
 8002f68:	9b07      	ldr	r3, [sp, #28]
 8002f6a:	4499      	add	r9, r3
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <_dtoa_r+0xdd8>)
 8002f70:	4630      	mov	r0, r6
 8002f72:	4639      	mov	r1, r7
 8002f74:	f003 fcae 	bl	80068d4 <__aeabi_dmul>
 8002f78:	460f      	mov	r7, r1
 8002f7a:	4606      	mov	r6, r0
 8002f7c:	f003 ff5a 	bl	8006e34 <__aeabi_d2iz>
 8002f80:	4680      	mov	r8, r0
 8002f82:	f003 fc41 	bl	8006808 <__aeabi_i2d>
 8002f86:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4630      	mov	r0, r6
 8002f90:	4639      	mov	r1, r7
 8002f92:	f003 faeb 	bl	800656c <__aeabi_dsub>
 8002f96:	f805 8b01 	strb.w	r8, [r5], #1
 8002f9a:	454d      	cmp	r5, r9
 8002f9c:	4606      	mov	r6, r0
 8002f9e:	460f      	mov	r7, r1
 8002fa0:	d1e4      	bne.n	8002f6c <_dtoa_r+0xc84>
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <_dtoa_r+0xddc>)
 8002fa6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002faa:	f003 fae1 	bl	8006570 <__adddf3>
 8002fae:	4632      	mov	r2, r6
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	f003 ff01 	bl	8006db8 <__aeabi_dcmplt>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d042      	beq.n	8003040 <_dtoa_r+0xd58>
 8002fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fbc:	9304      	str	r3, [sp, #16]
 8002fbe:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8002fc2:	f7ff bb4c 	b.w	800265e <_dtoa_r+0x376>
 8002fc6:	9b06      	ldr	r3, [sp, #24]
 8002fc8:	9a08      	ldr	r2, [sp, #32]
 8002fca:	1a9d      	subs	r5, r3, r2
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f7ff bb7e 	b.w	80026ce <_dtoa_r+0x3e6>
 8002fd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002fd4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002fd6:	9d06      	ldr	r5, [sp, #24]
 8002fd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002fdc:	f7ff bb77 	b.w	80026ce <_dtoa_r+0x3e6>
 8002fe0:	e9dd 7800 	ldrd	r7, r8, [sp]
 8002fe4:	f04f 0902 	mov.w	r9, #2
 8002fe8:	e581      	b.n	8002aee <_dtoa_r+0x806>
 8002fea:	9b08      	ldr	r3, [sp, #32]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f43f aecd 	beq.w	8002d8c <_dtoa_r+0xaa4>
 8002ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f77f aa82 	ble.w	80024fe <_dtoa_r+0x216>
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <_dtoa_r+0xdd8>)
 8002ffe:	4638      	mov	r0, r7
 8003000:	4641      	mov	r1, r8
 8003002:	f003 fc67 	bl	80068d4 <__aeabi_dmul>
 8003006:	4607      	mov	r7, r0
 8003008:	4688      	mov	r8, r1
 800300a:	f109 0001 	add.w	r0, r9, #1
 800300e:	f003 fbfb 	bl	8006808 <__aeabi_i2d>
 8003012:	463a      	mov	r2, r7
 8003014:	4643      	mov	r3, r8
 8003016:	f003 fc5d 	bl	80068d4 <__aeabi_dmul>
 800301a:	2200      	movs	r2, #0
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <_dtoa_r+0xdc8>)
 800301e:	f003 faa7 	bl	8006570 <__adddf3>
 8003022:	9a04      	ldr	r2, [sp, #16]
 8003024:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003028:	3a01      	subs	r2, #1
 800302a:	4605      	mov	r5, r0
 800302c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003030:	9211      	str	r2, [sp, #68]	; 0x44
 8003032:	e57d      	b.n	8002b30 <_dtoa_r+0x848>
 8003034:	2239      	movs	r2, #57	; 0x39
 8003036:	46b3      	mov	fp, r6
 8003038:	703a      	strb	r2, [r7, #0]
 800303a:	4646      	mov	r6, r8
 800303c:	1c7d      	adds	r5, r7, #1
 800303e:	e4d4      	b.n	80029ea <_dtoa_r+0x702>
 8003040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003044:	2000      	movs	r0, #0
 8003046:	491f      	ldr	r1, [pc, #124]	; (80030c4 <_dtoa_r+0xddc>)
 8003048:	f003 fa90 	bl	800656c <__aeabi_dsub>
 800304c:	4632      	mov	r2, r6
 800304e:	463b      	mov	r3, r7
 8003050:	f003 fed0 	bl	8006df4 <__aeabi_dcmpgt>
 8003054:	b910      	cbnz	r0, 800305c <_dtoa_r+0xd74>
 8003056:	f7ff ba52 	b.w	80024fe <_dtoa_r+0x216>
 800305a:	4615      	mov	r5, r2
 800305c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003066:	d0f8      	beq.n	800305a <_dtoa_r+0xd72>
 8003068:	e5ea      	b.n	8002c40 <_dtoa_r+0x958>
 800306a:	4643      	mov	r3, r8
 800306c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8003070:	46a0      	mov	r8, r4
 8003072:	461c      	mov	r4, r3
 8003074:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	f7ff baf1 	b.w	800265e <_dtoa_r+0x376>
 800307c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8003080:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8003084:	4644      	mov	r4, r8
 8003086:	f7ff ba3a 	b.w	80024fe <_dtoa_r+0x216>
 800308a:	46b8      	mov	r8, r7
 800308c:	f7ff bbac 	b.w	80027e8 <_dtoa_r+0x500>
 8003090:	9b00      	ldr	r3, [sp, #0]
 8003092:	2b39      	cmp	r3, #57	; 0x39
 8003094:	d0ce      	beq.n	8003034 <_dtoa_r+0xd4c>
 8003096:	f1bb 0f00 	cmp.w	fp, #0
 800309a:	f73f aed4 	bgt.w	8002e46 <_dtoa_r+0xb5e>
 800309e:	e6d5      	b.n	8002e4c <_dtoa_r+0xb64>
 80030a0:	f47f aed4 	bne.w	8002e4c <_dtoa_r+0xb64>
 80030a4:	9b00      	ldr	r3, [sp, #0]
 80030a6:	07da      	lsls	r2, r3, #31
 80030a8:	f57f aed0 	bpl.w	8002e4c <_dtoa_r+0xb64>
 80030ac:	e6c7      	b.n	8002e3e <_dtoa_r+0xb56>
 80030ae:	bf00      	nop
 80030b0:	401c0000 	.word	0x401c0000
 80030b4:	40140000 	.word	0x40140000
 80030b8:	0800c1f8 	.word	0x0800c1f8
 80030bc:	0800c2e8 	.word	0x0800c2e8
 80030c0:	40240000 	.word	0x40240000
 80030c4:	3fe00000 	.word	0x3fe00000
 80030c8:	4631      	mov	r1, r6
 80030ca:	2300      	movs	r3, #0
 80030cc:	220a      	movs	r2, #10
 80030ce:	4620      	mov	r0, r4
 80030d0:	f001 f9f0 	bl	80044b4 <__multadd>
 80030d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	4606      	mov	r6, r0
 80030da:	dd0a      	ble.n	80030f2 <_dtoa_r+0xe0a>
 80030dc:	9308      	str	r3, [sp, #32]
 80030de:	f7ff bbb9 	b.w	8002854 <_dtoa_r+0x56c>
 80030e2:	9b02      	ldr	r3, [sp, #8]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	dc22      	bgt.n	800312e <_dtoa_r+0xe46>
 80030e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ea:	e44a      	b.n	8002982 <_dtoa_r+0x69a>
 80030ec:	f04f 0902 	mov.w	r9, #2
 80030f0:	e4fd      	b.n	8002aee <_dtoa_r+0x806>
 80030f2:	9b02      	ldr	r3, [sp, #8]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	dc1a      	bgt.n	800312e <_dtoa_r+0xe46>
 80030f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030fa:	e7ef      	b.n	80030dc <_dtoa_r+0xdf4>
 80030fc:	2500      	movs	r5, #0
 80030fe:	6465      	str	r5, [r4, #68]	; 0x44
 8003100:	4629      	mov	r1, r5
 8003102:	4620      	mov	r0, r4
 8003104:	f001 f9a6 	bl	8004454 <_Balloc>
 8003108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800310c:	9308      	str	r3, [sp, #32]
 800310e:	930d      	str	r3, [sp, #52]	; 0x34
 8003110:	2301      	movs	r3, #1
 8003112:	9007      	str	r0, [sp, #28]
 8003114:	46ab      	mov	fp, r5
 8003116:	6420      	str	r0, [r4, #64]	; 0x40
 8003118:	9309      	str	r3, [sp, #36]	; 0x24
 800311a:	f7ff b9f0 	b.w	80024fe <_dtoa_r+0x216>
 800311e:	f43f ab7b 	beq.w	8002818 <_dtoa_r+0x530>
 8003122:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003126:	e40b      	b.n	8002940 <_dtoa_r+0x658>
 8003128:	2701      	movs	r7, #1
 800312a:	f7ff b9af 	b.w	800248c <_dtoa_r+0x1a4>
 800312e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003130:	9308      	str	r3, [sp, #32]
 8003132:	e5f8      	b.n	8002d26 <_dtoa_r+0xa3e>

08003134 <__sflush_r>:
 8003134:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003138:	b29a      	uxth	r2, r3
 800313a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313e:	460d      	mov	r5, r1
 8003140:	0711      	lsls	r1, r2, #28
 8003142:	4680      	mov	r8, r0
 8003144:	d43a      	bmi.n	80031bc <__sflush_r+0x88>
 8003146:	686a      	ldr	r2, [r5, #4]
 8003148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800314c:	2a00      	cmp	r2, #0
 800314e:	81ab      	strh	r3, [r5, #12]
 8003150:	dd6f      	ble.n	8003232 <__sflush_r+0xfe>
 8003152:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8003154:	2c00      	cmp	r4, #0
 8003156:	d049      	beq.n	80031ec <__sflush_r+0xb8>
 8003158:	2200      	movs	r2, #0
 800315a:	b29b      	uxth	r3, r3
 800315c:	f8d8 6000 	ldr.w	r6, [r8]
 8003160:	f8c8 2000 	str.w	r2, [r8]
 8003164:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8003168:	d067      	beq.n	800323a <__sflush_r+0x106>
 800316a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800316c:	075f      	lsls	r7, r3, #29
 800316e:	d505      	bpl.n	800317c <__sflush_r+0x48>
 8003170:	6869      	ldr	r1, [r5, #4]
 8003172:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003174:	1a52      	subs	r2, r2, r1
 8003176:	b10b      	cbz	r3, 800317c <__sflush_r+0x48>
 8003178:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	69e9      	ldr	r1, [r5, #28]
 8003180:	4640      	mov	r0, r8
 8003182:	47a0      	blx	r4
 8003184:	1c44      	adds	r4, r0, #1
 8003186:	d03c      	beq.n	8003202 <__sflush_r+0xce>
 8003188:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800318c:	692a      	ldr	r2, [r5, #16]
 800318e:	602a      	str	r2, [r5, #0]
 8003190:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003194:	2200      	movs	r2, #0
 8003196:	81ab      	strh	r3, [r5, #12]
 8003198:	04db      	lsls	r3, r3, #19
 800319a:	606a      	str	r2, [r5, #4]
 800319c:	d447      	bmi.n	800322e <__sflush_r+0xfa>
 800319e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80031a0:	f8c8 6000 	str.w	r6, [r8]
 80031a4:	b311      	cbz	r1, 80031ec <__sflush_r+0xb8>
 80031a6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80031aa:	4299      	cmp	r1, r3
 80031ac:	d002      	beq.n	80031b4 <__sflush_r+0x80>
 80031ae:	4640      	mov	r0, r8
 80031b0:	f000 f9e2 	bl	8003578 <_free_r>
 80031b4:	2000      	movs	r0, #0
 80031b6:	6328      	str	r0, [r5, #48]	; 0x30
 80031b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031bc:	692e      	ldr	r6, [r5, #16]
 80031be:	b1ae      	cbz	r6, 80031ec <__sflush_r+0xb8>
 80031c0:	682c      	ldr	r4, [r5, #0]
 80031c2:	602e      	str	r6, [r5, #0]
 80031c4:	0791      	lsls	r1, r2, #30
 80031c6:	bf0c      	ite	eq
 80031c8:	696b      	ldreq	r3, [r5, #20]
 80031ca:	2300      	movne	r3, #0
 80031cc:	1ba4      	subs	r4, r4, r6
 80031ce:	60ab      	str	r3, [r5, #8]
 80031d0:	e00a      	b.n	80031e8 <__sflush_r+0xb4>
 80031d2:	4623      	mov	r3, r4
 80031d4:	4632      	mov	r2, r6
 80031d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80031d8:	69e9      	ldr	r1, [r5, #28]
 80031da:	4640      	mov	r0, r8
 80031dc:	47b8      	blx	r7
 80031de:	2800      	cmp	r0, #0
 80031e0:	eba4 0400 	sub.w	r4, r4, r0
 80031e4:	4406      	add	r6, r0
 80031e6:	dd04      	ble.n	80031f2 <__sflush_r+0xbe>
 80031e8:	2c00      	cmp	r4, #0
 80031ea:	dcf2      	bgt.n	80031d2 <__sflush_r+0x9e>
 80031ec:	2000      	movs	r0, #0
 80031ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f2:	89ab      	ldrh	r3, [r5, #12]
 80031f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f8:	81ab      	strh	r3, [r5, #12]
 80031fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003202:	f8d8 4000 	ldr.w	r4, [r8]
 8003206:	2c1d      	cmp	r4, #29
 8003208:	d8f3      	bhi.n	80031f2 <__sflush_r+0xbe>
 800320a:	4b19      	ldr	r3, [pc, #100]	; (8003270 <__sflush_r+0x13c>)
 800320c:	40e3      	lsrs	r3, r4
 800320e:	43db      	mvns	r3, r3
 8003210:	f013 0301 	ands.w	r3, r3, #1
 8003214:	d1ed      	bne.n	80031f2 <__sflush_r+0xbe>
 8003216:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 800321a:	606b      	str	r3, [r5, #4]
 800321c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8003220:	6929      	ldr	r1, [r5, #16]
 8003222:	81ab      	strh	r3, [r5, #12]
 8003224:	04da      	lsls	r2, r3, #19
 8003226:	6029      	str	r1, [r5, #0]
 8003228:	d5b9      	bpl.n	800319e <__sflush_r+0x6a>
 800322a:	2c00      	cmp	r4, #0
 800322c:	d1b7      	bne.n	800319e <__sflush_r+0x6a>
 800322e:	6528      	str	r0, [r5, #80]	; 0x50
 8003230:	e7b5      	b.n	800319e <__sflush_r+0x6a>
 8003232:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003234:	2a00      	cmp	r2, #0
 8003236:	dc8c      	bgt.n	8003152 <__sflush_r+0x1e>
 8003238:	e7d8      	b.n	80031ec <__sflush_r+0xb8>
 800323a:	2301      	movs	r3, #1
 800323c:	69e9      	ldr	r1, [r5, #28]
 800323e:	4640      	mov	r0, r8
 8003240:	47a0      	blx	r4
 8003242:	1c43      	adds	r3, r0, #1
 8003244:	4602      	mov	r2, r0
 8003246:	d002      	beq.n	800324e <__sflush_r+0x11a>
 8003248:	89ab      	ldrh	r3, [r5, #12]
 800324a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800324c:	e78e      	b.n	800316c <__sflush_r+0x38>
 800324e:	f8d8 3000 	ldr.w	r3, [r8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f8      	beq.n	8003248 <__sflush_r+0x114>
 8003256:	2b1d      	cmp	r3, #29
 8003258:	d001      	beq.n	800325e <__sflush_r+0x12a>
 800325a:	2b16      	cmp	r3, #22
 800325c:	d102      	bne.n	8003264 <__sflush_r+0x130>
 800325e:	f8c8 6000 	str.w	r6, [r8]
 8003262:	e7c3      	b.n	80031ec <__sflush_r+0xb8>
 8003264:	89ab      	ldrh	r3, [r5, #12]
 8003266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326a:	81ab      	strh	r3, [r5, #12]
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003270:	20400001 	.word	0x20400001

08003274 <_fflush_r>:
 8003274:	b510      	push	{r4, lr}
 8003276:	4604      	mov	r4, r0
 8003278:	b082      	sub	sp, #8
 800327a:	b108      	cbz	r0, 8003280 <_fflush_r+0xc>
 800327c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800327e:	b153      	cbz	r3, 8003296 <_fflush_r+0x22>
 8003280:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8003284:	b908      	cbnz	r0, 800328a <_fflush_r+0x16>
 8003286:	b002      	add	sp, #8
 8003288:	bd10      	pop	{r4, pc}
 800328a:	4620      	mov	r0, r4
 800328c:	b002      	add	sp, #8
 800328e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003292:	f7ff bf4f 	b.w	8003134 <__sflush_r>
 8003296:	9101      	str	r1, [sp, #4]
 8003298:	f000 f8fe 	bl	8003498 <__sinit>
 800329c:	9901      	ldr	r1, [sp, #4]
 800329e:	e7ef      	b.n	8003280 <_fflush_r+0xc>

080032a0 <fflush>:
 80032a0:	b120      	cbz	r0, 80032ac <fflush+0xc>
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <fflush+0x18>)
 80032a4:	4601      	mov	r1, r0
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	f7ff bfe4 	b.w	8003274 <_fflush_r>
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <fflush+0x1c>)
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <fflush+0x20>)
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	f000 bbe5 	b.w	8003a80 <_fwalk_reent>
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008
 80032bc:	0800c1c0 	.word	0x0800c1c0
 80032c0:	08003275 	.word	0x08003275

080032c4 <__fp_unlock>:
 80032c4:	2000      	movs	r0, #0
 80032c6:	4770      	bx	lr

080032c8 <_cleanup_r>:
 80032c8:	4901      	ldr	r1, [pc, #4]	; (80032d0 <_cleanup_r+0x8>)
 80032ca:	f000 bbd9 	b.w	8003a80 <_fwalk_reent>
 80032ce:	bf00      	nop
 80032d0:	080062d5 	.word	0x080062d5

080032d4 <__sinit.part.1>:
 80032d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <__sinit.part.1+0xdc>)
 80032da:	6845      	ldr	r5, [r0, #4]
 80032dc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80032de:	2400      	movs	r4, #0
 80032e0:	4607      	mov	r7, r0
 80032e2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80032e6:	2304      	movs	r3, #4
 80032e8:	2103      	movs	r1, #3
 80032ea:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80032ee:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80032f2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80032f6:	b083      	sub	sp, #12
 80032f8:	602c      	str	r4, [r5, #0]
 80032fa:	606c      	str	r4, [r5, #4]
 80032fc:	60ac      	str	r4, [r5, #8]
 80032fe:	666c      	str	r4, [r5, #100]	; 0x64
 8003300:	81ec      	strh	r4, [r5, #14]
 8003302:	612c      	str	r4, [r5, #16]
 8003304:	616c      	str	r4, [r5, #20]
 8003306:	61ac      	str	r4, [r5, #24]
 8003308:	81ab      	strh	r3, [r5, #12]
 800330a:	4621      	mov	r1, r4
 800330c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003310:	2208      	movs	r2, #8
 8003312:	f7fd f89d 	bl	8000450 <memset>
 8003316:	68be      	ldr	r6, [r7, #8]
 8003318:	f8df b098 	ldr.w	fp, [pc, #152]	; 80033b4 <__sinit.part.1+0xe0>
 800331c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80033b8 <__sinit.part.1+0xe4>
 8003320:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80033bc <__sinit.part.1+0xe8>
 8003324:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80033c0 <__sinit.part.1+0xec>
 8003328:	f8c5 b020 	str.w	fp, [r5, #32]
 800332c:	2301      	movs	r3, #1
 800332e:	2209      	movs	r2, #9
 8003330:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8003334:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8003338:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800333c:	61ed      	str	r5, [r5, #28]
 800333e:	4621      	mov	r1, r4
 8003340:	81f3      	strh	r3, [r6, #14]
 8003342:	81b2      	strh	r2, [r6, #12]
 8003344:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8003348:	6034      	str	r4, [r6, #0]
 800334a:	6074      	str	r4, [r6, #4]
 800334c:	60b4      	str	r4, [r6, #8]
 800334e:	6674      	str	r4, [r6, #100]	; 0x64
 8003350:	6134      	str	r4, [r6, #16]
 8003352:	6174      	str	r4, [r6, #20]
 8003354:	61b4      	str	r4, [r6, #24]
 8003356:	2208      	movs	r2, #8
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	f7fd f879 	bl	8000450 <memset>
 800335e:	68fd      	ldr	r5, [r7, #12]
 8003360:	61f6      	str	r6, [r6, #28]
 8003362:	2012      	movs	r0, #18
 8003364:	2202      	movs	r2, #2
 8003366:	f8c6 b020 	str.w	fp, [r6, #32]
 800336a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800336e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8003372:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8003376:	4621      	mov	r1, r4
 8003378:	81a8      	strh	r0, [r5, #12]
 800337a:	81ea      	strh	r2, [r5, #14]
 800337c:	602c      	str	r4, [r5, #0]
 800337e:	606c      	str	r4, [r5, #4]
 8003380:	60ac      	str	r4, [r5, #8]
 8003382:	666c      	str	r4, [r5, #100]	; 0x64
 8003384:	612c      	str	r4, [r5, #16]
 8003386:	616c      	str	r4, [r5, #20]
 8003388:	61ac      	str	r4, [r5, #24]
 800338a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800338e:	2208      	movs	r2, #8
 8003390:	f7fd f85e 	bl	8000450 <memset>
 8003394:	9b01      	ldr	r3, [sp, #4]
 8003396:	61ed      	str	r5, [r5, #28]
 8003398:	f8c5 b020 	str.w	fp, [r5, #32]
 800339c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80033a0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80033a4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033aa:	b003      	add	sp, #12
 80033ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b0:	080032c9 	.word	0x080032c9
 80033b4:	08005125 	.word	0x08005125
 80033b8:	0800514d 	.word	0x0800514d
 80033bc:	08005189 	.word	0x08005189
 80033c0:	080051a9 	.word	0x080051a9

080033c4 <__fp_lock>:
 80033c4:	2000      	movs	r0, #0
 80033c6:	4770      	bx	lr

080033c8 <__sfmoreglue>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	1e4a      	subs	r2, r1, #1
 80033cc:	2568      	movs	r5, #104	; 0x68
 80033ce:	fb05 f502 	mul.w	r5, r5, r2
 80033d2:	460e      	mov	r6, r1
 80033d4:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033d8:	f000 fc3e 	bl	8003c58 <_malloc_r>
 80033dc:	4604      	mov	r4, r0
 80033de:	b140      	cbz	r0, 80033f2 <__sfmoreglue+0x2a>
 80033e0:	2100      	movs	r1, #0
 80033e2:	300c      	adds	r0, #12
 80033e4:	6066      	str	r6, [r4, #4]
 80033e6:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033ea:	6021      	str	r1, [r4, #0]
 80033ec:	60a0      	str	r0, [r4, #8]
 80033ee:	f7fd f82f 	bl	8000450 <memset>
 80033f2:	4620      	mov	r0, r4
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
 80033f6:	bf00      	nop

080033f8 <__sfp>:
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <__sfp+0x88>)
 80033fa:	b570      	push	{r4, r5, r6, lr}
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003400:	4606      	mov	r6, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d02c      	beq.n	8003460 <__sfp+0x68>
 8003406:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 800340a:	686b      	ldr	r3, [r5, #4]
 800340c:	68ac      	ldr	r4, [r5, #8]
 800340e:	3b01      	subs	r3, #1
 8003410:	d505      	bpl.n	800341e <__sfp+0x26>
 8003412:	e021      	b.n	8003458 <__sfp+0x60>
 8003414:	3b01      	subs	r3, #1
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800341c:	d01c      	beq.n	8003458 <__sfp+0x60>
 800341e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003422:	2a00      	cmp	r2, #0
 8003424:	d1f6      	bne.n	8003414 <__sfp+0x1c>
 8003426:	2500      	movs	r5, #0
 8003428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800342c:	2301      	movs	r3, #1
 800342e:	81e2      	strh	r2, [r4, #14]
 8003430:	81a3      	strh	r3, [r4, #12]
 8003432:	6665      	str	r5, [r4, #100]	; 0x64
 8003434:	6025      	str	r5, [r4, #0]
 8003436:	60a5      	str	r5, [r4, #8]
 8003438:	6065      	str	r5, [r4, #4]
 800343a:	6125      	str	r5, [r4, #16]
 800343c:	6165      	str	r5, [r4, #20]
 800343e:	61a5      	str	r5, [r4, #24]
 8003440:	4629      	mov	r1, r5
 8003442:	2208      	movs	r2, #8
 8003444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003448:	f7fd f802 	bl	8000450 <memset>
 800344c:	6325      	str	r5, [r4, #48]	; 0x30
 800344e:	6365      	str	r5, [r4, #52]	; 0x34
 8003450:	6465      	str	r5, [r4, #68]	; 0x44
 8003452:	64a5      	str	r5, [r4, #72]	; 0x48
 8003454:	4620      	mov	r0, r4
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	6828      	ldr	r0, [r5, #0]
 800345a:	b128      	cbz	r0, 8003468 <__sfp+0x70>
 800345c:	4605      	mov	r5, r0
 800345e:	e7d4      	b.n	800340a <__sfp+0x12>
 8003460:	4628      	mov	r0, r5
 8003462:	f7ff ff37 	bl	80032d4 <__sinit.part.1>
 8003466:	e7ce      	b.n	8003406 <__sfp+0xe>
 8003468:	2104      	movs	r1, #4
 800346a:	4630      	mov	r0, r6
 800346c:	f7ff ffac 	bl	80033c8 <__sfmoreglue>
 8003470:	6028      	str	r0, [r5, #0]
 8003472:	2800      	cmp	r0, #0
 8003474:	d1f2      	bne.n	800345c <__sfp+0x64>
 8003476:	230c      	movs	r3, #12
 8003478:	4604      	mov	r4, r0
 800347a:	6033      	str	r3, [r6, #0]
 800347c:	e7ea      	b.n	8003454 <__sfp+0x5c>
 800347e:	bf00      	nop
 8003480:	0800c1c0 	.word	0x0800c1c0

08003484 <_cleanup>:
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <_cleanup+0xc>)
 8003486:	4903      	ldr	r1, [pc, #12]	; (8003494 <_cleanup+0x10>)
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f000 baf9 	b.w	8003a80 <_fwalk_reent>
 800348e:	bf00      	nop
 8003490:	0800c1c0 	.word	0x0800c1c0
 8003494:	080062d5 	.word	0x080062d5

08003498 <__sinit>:
 8003498:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800349a:	b103      	cbz	r3, 800349e <__sinit+0x6>
 800349c:	4770      	bx	lr
 800349e:	e719      	b.n	80032d4 <__sinit.part.1>

080034a0 <__sfp_lock_acquire>:
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop

080034a4 <__sfp_lock_release>:
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <__sinit_lock_acquire>:
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop

080034ac <__sinit_lock_release>:
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop

080034b0 <__fp_lock_all>:
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <__fp_lock_all+0xc>)
 80034b2:	4903      	ldr	r1, [pc, #12]	; (80034c0 <__fp_lock_all+0x10>)
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	f000 babd 	b.w	8003a34 <_fwalk>
 80034ba:	bf00      	nop
 80034bc:	20000008 	.word	0x20000008
 80034c0:	080033c5 	.word	0x080033c5

080034c4 <__fp_unlock_all>:
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <__fp_unlock_all+0xc>)
 80034c6:	4903      	ldr	r1, [pc, #12]	; (80034d4 <__fp_unlock_all+0x10>)
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	f000 bab3 	b.w	8003a34 <_fwalk>
 80034ce:	bf00      	nop
 80034d0:	20000008 	.word	0x20000008
 80034d4:	080032c5 	.word	0x080032c5

080034d8 <_malloc_trim_r>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	4f24      	ldr	r7, [pc, #144]	; (800356c <_malloc_trim_r+0x94>)
 80034dc:	460c      	mov	r4, r1
 80034de:	4606      	mov	r6, r0
 80034e0:	f000 ffb4 	bl	800444c <__malloc_lock>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685d      	ldr	r5, [r3, #4]
 80034e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80034ec:	310f      	adds	r1, #15
 80034ee:	f025 0503 	bic.w	r5, r5, #3
 80034f2:	4429      	add	r1, r5
 80034f4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80034f8:	f021 010f 	bic.w	r1, r1, #15
 80034fc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8003500:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003504:	db07      	blt.n	8003516 <_malloc_trim_r+0x3e>
 8003506:	2100      	movs	r1, #0
 8003508:	4630      	mov	r0, r6
 800350a:	f004 f94f 	bl	80077ac <_sbrk_r>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	442b      	add	r3, r5
 8003512:	4298      	cmp	r0, r3
 8003514:	d004      	beq.n	8003520 <_malloc_trim_r+0x48>
 8003516:	4630      	mov	r0, r6
 8003518:	f000 ff9a 	bl	8004450 <__malloc_unlock>
 800351c:	2000      	movs	r0, #0
 800351e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003520:	4261      	negs	r1, r4
 8003522:	4630      	mov	r0, r6
 8003524:	f004 f942 	bl	80077ac <_sbrk_r>
 8003528:	3001      	adds	r0, #1
 800352a:	d00d      	beq.n	8003548 <_malloc_trim_r+0x70>
 800352c:	4b10      	ldr	r3, [pc, #64]	; (8003570 <_malloc_trim_r+0x98>)
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	1b2d      	subs	r5, r5, r4
 8003534:	f045 0501 	orr.w	r5, r5, #1
 8003538:	4630      	mov	r0, r6
 800353a:	1b09      	subs	r1, r1, r4
 800353c:	6055      	str	r5, [r2, #4]
 800353e:	6019      	str	r1, [r3, #0]
 8003540:	f000 ff86 	bl	8004450 <__malloc_unlock>
 8003544:	2001      	movs	r0, #1
 8003546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003548:	2100      	movs	r1, #0
 800354a:	4630      	mov	r0, r6
 800354c:	f004 f92e 	bl	80077ac <_sbrk_r>
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	1a83      	subs	r3, r0, r2
 8003554:	2b0f      	cmp	r3, #15
 8003556:	ddde      	ble.n	8003516 <_malloc_trim_r+0x3e>
 8003558:	4c06      	ldr	r4, [pc, #24]	; (8003574 <_malloc_trim_r+0x9c>)
 800355a:	4905      	ldr	r1, [pc, #20]	; (8003570 <_malloc_trim_r+0x98>)
 800355c:	6824      	ldr	r4, [r4, #0]
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	1b00      	subs	r0, r0, r4
 8003564:	6053      	str	r3, [r2, #4]
 8003566:	6008      	str	r0, [r1, #0]
 8003568:	e7d5      	b.n	8003516 <_malloc_trim_r+0x3e>
 800356a:	bf00      	nop
 800356c:	200004b4 	.word	0x200004b4
 8003570:	20000ae0 	.word	0x20000ae0
 8003574:	200008bc 	.word	0x200008bc

08003578 <_free_r>:
 8003578:	2900      	cmp	r1, #0
 800357a:	d044      	beq.n	8003606 <_free_r+0x8e>
 800357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003580:	460d      	mov	r5, r1
 8003582:	4680      	mov	r8, r0
 8003584:	f000 ff62 	bl	800444c <__malloc_lock>
 8003588:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800358c:	4969      	ldr	r1, [pc, #420]	; (8003734 <_free_r+0x1bc>)
 800358e:	f027 0301 	bic.w	r3, r7, #1
 8003592:	f1a5 0408 	sub.w	r4, r5, #8
 8003596:	18e2      	adds	r2, r4, r3
 8003598:	688e      	ldr	r6, [r1, #8]
 800359a:	6850      	ldr	r0, [r2, #4]
 800359c:	42b2      	cmp	r2, r6
 800359e:	f020 0003 	bic.w	r0, r0, #3
 80035a2:	d05e      	beq.n	8003662 <_free_r+0xea>
 80035a4:	07fe      	lsls	r6, r7, #31
 80035a6:	6050      	str	r0, [r2, #4]
 80035a8:	d40b      	bmi.n	80035c2 <_free_r+0x4a>
 80035aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80035ae:	1be4      	subs	r4, r4, r7
 80035b0:	f101 0e08 	add.w	lr, r1, #8
 80035b4:	68a5      	ldr	r5, [r4, #8]
 80035b6:	4575      	cmp	r5, lr
 80035b8:	443b      	add	r3, r7
 80035ba:	d06d      	beq.n	8003698 <_free_r+0x120>
 80035bc:	68e7      	ldr	r7, [r4, #12]
 80035be:	60ef      	str	r7, [r5, #12]
 80035c0:	60bd      	str	r5, [r7, #8]
 80035c2:	1815      	adds	r5, r2, r0
 80035c4:	686d      	ldr	r5, [r5, #4]
 80035c6:	07ed      	lsls	r5, r5, #31
 80035c8:	d53e      	bpl.n	8003648 <_free_r+0xd0>
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	6062      	str	r2, [r4, #4]
 80035d0:	50e3      	str	r3, [r4, r3]
 80035d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d6:	d217      	bcs.n	8003608 <_free_r+0x90>
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	1c58      	adds	r0, r3, #1
 80035dc:	109a      	asrs	r2, r3, #2
 80035de:	684d      	ldr	r5, [r1, #4]
 80035e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
 80035e4:	60a7      	str	r7, [r4, #8]
 80035e6:	2301      	movs	r3, #1
 80035e8:	4093      	lsls	r3, r2
 80035ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 80035ee:	432b      	orrs	r3, r5
 80035f0:	3a08      	subs	r2, #8
 80035f2:	60e2      	str	r2, [r4, #12]
 80035f4:	604b      	str	r3, [r1, #4]
 80035f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
 80035fa:	60fc      	str	r4, [r7, #12]
 80035fc:	4640      	mov	r0, r8
 80035fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003602:	f000 bf25 	b.w	8004450 <__malloc_unlock>
 8003606:	4770      	bx	lr
 8003608:	0a5a      	lsrs	r2, r3, #9
 800360a:	2a04      	cmp	r2, #4
 800360c:	d852      	bhi.n	80036b4 <_free_r+0x13c>
 800360e:	099a      	lsrs	r2, r3, #6
 8003610:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8003614:	00ff      	lsls	r7, r7, #3
 8003616:	f102 0538 	add.w	r5, r2, #56	; 0x38
 800361a:	19c8      	adds	r0, r1, r7
 800361c:	59ca      	ldr	r2, [r1, r7]
 800361e:	3808      	subs	r0, #8
 8003620:	4290      	cmp	r0, r2
 8003622:	d04f      	beq.n	80036c4 <_free_r+0x14c>
 8003624:	6851      	ldr	r1, [r2, #4]
 8003626:	f021 0103 	bic.w	r1, r1, #3
 800362a:	428b      	cmp	r3, r1
 800362c:	d232      	bcs.n	8003694 <_free_r+0x11c>
 800362e:	6892      	ldr	r2, [r2, #8]
 8003630:	4290      	cmp	r0, r2
 8003632:	d1f7      	bne.n	8003624 <_free_r+0xac>
 8003634:	68c3      	ldr	r3, [r0, #12]
 8003636:	60a0      	str	r0, [r4, #8]
 8003638:	60e3      	str	r3, [r4, #12]
 800363a:	609c      	str	r4, [r3, #8]
 800363c:	60c4      	str	r4, [r0, #12]
 800363e:	4640      	mov	r0, r8
 8003640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003644:	f000 bf04 	b.w	8004450 <__malloc_unlock>
 8003648:	6895      	ldr	r5, [r2, #8]
 800364a:	4f3b      	ldr	r7, [pc, #236]	; (8003738 <_free_r+0x1c0>)
 800364c:	42bd      	cmp	r5, r7
 800364e:	4403      	add	r3, r0
 8003650:	d040      	beq.n	80036d4 <_free_r+0x15c>
 8003652:	68d0      	ldr	r0, [r2, #12]
 8003654:	60e8      	str	r0, [r5, #12]
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	6085      	str	r5, [r0, #8]
 800365c:	6062      	str	r2, [r4, #4]
 800365e:	50e3      	str	r3, [r4, r3]
 8003660:	e7b7      	b.n	80035d2 <_free_r+0x5a>
 8003662:	07ff      	lsls	r7, r7, #31
 8003664:	4403      	add	r3, r0
 8003666:	d407      	bmi.n	8003678 <_free_r+0x100>
 8003668:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800366c:	1aa4      	subs	r4, r4, r2
 800366e:	4413      	add	r3, r2
 8003670:	68a0      	ldr	r0, [r4, #8]
 8003672:	68e2      	ldr	r2, [r4, #12]
 8003674:	60c2      	str	r2, [r0, #12]
 8003676:	6090      	str	r0, [r2, #8]
 8003678:	4a30      	ldr	r2, [pc, #192]	; (800373c <_free_r+0x1c4>)
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	f043 0001 	orr.w	r0, r3, #1
 8003680:	4293      	cmp	r3, r2
 8003682:	6060      	str	r0, [r4, #4]
 8003684:	608c      	str	r4, [r1, #8]
 8003686:	d3b9      	bcc.n	80035fc <_free_r+0x84>
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <_free_r+0x1c8>)
 800368a:	4640      	mov	r0, r8
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	f7ff ff23 	bl	80034d8 <_malloc_trim_r>
 8003692:	e7b3      	b.n	80035fc <_free_r+0x84>
 8003694:	4610      	mov	r0, r2
 8003696:	e7cd      	b.n	8003634 <_free_r+0xbc>
 8003698:	1811      	adds	r1, r2, r0
 800369a:	6849      	ldr	r1, [r1, #4]
 800369c:	07c9      	lsls	r1, r1, #31
 800369e:	d444      	bmi.n	800372a <_free_r+0x1b2>
 80036a0:	6891      	ldr	r1, [r2, #8]
 80036a2:	68d2      	ldr	r2, [r2, #12]
 80036a4:	60ca      	str	r2, [r1, #12]
 80036a6:	4403      	add	r3, r0
 80036a8:	f043 0001 	orr.w	r0, r3, #1
 80036ac:	6091      	str	r1, [r2, #8]
 80036ae:	6060      	str	r0, [r4, #4]
 80036b0:	50e3      	str	r3, [r4, r3]
 80036b2:	e7a3      	b.n	80035fc <_free_r+0x84>
 80036b4:	2a14      	cmp	r2, #20
 80036b6:	d816      	bhi.n	80036e6 <_free_r+0x16e>
 80036b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80036bc:	00ff      	lsls	r7, r7, #3
 80036be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80036c2:	e7aa      	b.n	800361a <_free_r+0xa2>
 80036c4:	10aa      	asrs	r2, r5, #2
 80036c6:	2301      	movs	r3, #1
 80036c8:	684d      	ldr	r5, [r1, #4]
 80036ca:	4093      	lsls	r3, r2
 80036cc:	432b      	orrs	r3, r5
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	4603      	mov	r3, r0
 80036d2:	e7b0      	b.n	8003636 <_free_r+0xbe>
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	614c      	str	r4, [r1, #20]
 80036da:	610c      	str	r4, [r1, #16]
 80036dc:	60e5      	str	r5, [r4, #12]
 80036de:	60a5      	str	r5, [r4, #8]
 80036e0:	6062      	str	r2, [r4, #4]
 80036e2:	50e3      	str	r3, [r4, r3]
 80036e4:	e78a      	b.n	80035fc <_free_r+0x84>
 80036e6:	2a54      	cmp	r2, #84	; 0x54
 80036e8:	d806      	bhi.n	80036f8 <_free_r+0x180>
 80036ea:	0b1a      	lsrs	r2, r3, #12
 80036ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80036f0:	00ff      	lsls	r7, r7, #3
 80036f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80036f6:	e790      	b.n	800361a <_free_r+0xa2>
 80036f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80036fc:	d806      	bhi.n	800370c <_free_r+0x194>
 80036fe:	0bda      	lsrs	r2, r3, #15
 8003700:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8003704:	00ff      	lsls	r7, r7, #3
 8003706:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800370a:	e786      	b.n	800361a <_free_r+0xa2>
 800370c:	f240 5054 	movw	r0, #1364	; 0x554
 8003710:	4282      	cmp	r2, r0
 8003712:	d806      	bhi.n	8003722 <_free_r+0x1aa>
 8003714:	0c9a      	lsrs	r2, r3, #18
 8003716:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800371a:	00ff      	lsls	r7, r7, #3
 800371c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8003720:	e77b      	b.n	800361a <_free_r+0xa2>
 8003722:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 8003726:	257e      	movs	r5, #126	; 0x7e
 8003728:	e777      	b.n	800361a <_free_r+0xa2>
 800372a:	f043 0101 	orr.w	r1, r3, #1
 800372e:	6061      	str	r1, [r4, #4]
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e763      	b.n	80035fc <_free_r+0x84>
 8003734:	200004b4 	.word	0x200004b4
 8003738:	200004bc 	.word	0x200004bc
 800373c:	200008c0 	.word	0x200008c0
 8003740:	20000adc 	.word	0x20000adc

08003744 <__sfvwrite_r>:
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d073      	beq.n	8003832 <__sfvwrite_r+0xee>
 800374a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800374e:	898b      	ldrh	r3, [r1, #12]
 8003750:	b083      	sub	sp, #12
 8003752:	460c      	mov	r4, r1
 8003754:	0719      	lsls	r1, r3, #28
 8003756:	9000      	str	r0, [sp, #0]
 8003758:	4616      	mov	r6, r2
 800375a:	d526      	bpl.n	80037aa <__sfvwrite_r+0x66>
 800375c:	6922      	ldr	r2, [r4, #16]
 800375e:	b322      	cbz	r2, 80037aa <__sfvwrite_r+0x66>
 8003760:	f013 0002 	ands.w	r0, r3, #2
 8003764:	6835      	ldr	r5, [r6, #0]
 8003766:	d02c      	beq.n	80037c2 <__sfvwrite_r+0x7e>
 8003768:	f04f 0900 	mov.w	r9, #0
 800376c:	4fb0      	ldr	r7, [pc, #704]	; (8003a30 <__sfvwrite_r+0x2ec>)
 800376e:	46c8      	mov	r8, r9
 8003770:	46b2      	mov	sl, r6
 8003772:	45b8      	cmp	r8, r7
 8003774:	4643      	mov	r3, r8
 8003776:	464a      	mov	r2, r9
 8003778:	bf28      	it	cs
 800377a:	463b      	movcs	r3, r7
 800377c:	9800      	ldr	r0, [sp, #0]
 800377e:	f1b8 0f00 	cmp.w	r8, #0
 8003782:	d050      	beq.n	8003826 <__sfvwrite_r+0xe2>
 8003784:	69e1      	ldr	r1, [r4, #28]
 8003786:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003788:	47b0      	blx	r6
 800378a:	2800      	cmp	r0, #0
 800378c:	dd58      	ble.n	8003840 <__sfvwrite_r+0xfc>
 800378e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003792:	1a1b      	subs	r3, r3, r0
 8003794:	4481      	add	r9, r0
 8003796:	eba8 0800 	sub.w	r8, r8, r0
 800379a:	f8ca 3008 	str.w	r3, [sl, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1e7      	bne.n	8003772 <__sfvwrite_r+0x2e>
 80037a2:	2000      	movs	r0, #0
 80037a4:	b003      	add	sp, #12
 80037a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037aa:	4621      	mov	r1, r4
 80037ac:	9800      	ldr	r0, [sp, #0]
 80037ae:	f7fe fc4f 	bl	8002050 <__swsetup_r>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	f040 8133 	bne.w	8003a1e <__sfvwrite_r+0x2da>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	6835      	ldr	r5, [r6, #0]
 80037bc:	f013 0002 	ands.w	r0, r3, #2
 80037c0:	d1d2      	bne.n	8003768 <__sfvwrite_r+0x24>
 80037c2:	f013 0901 	ands.w	r9, r3, #1
 80037c6:	d145      	bne.n	8003854 <__sfvwrite_r+0x110>
 80037c8:	464f      	mov	r7, r9
 80037ca:	9601      	str	r6, [sp, #4]
 80037cc:	b337      	cbz	r7, 800381c <__sfvwrite_r+0xd8>
 80037ce:	059a      	lsls	r2, r3, #22
 80037d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80037d4:	f140 8083 	bpl.w	80038de <__sfvwrite_r+0x19a>
 80037d8:	4547      	cmp	r7, r8
 80037da:	46c3      	mov	fp, r8
 80037dc:	f0c0 80ab 	bcc.w	8003936 <__sfvwrite_r+0x1f2>
 80037e0:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80037e4:	f040 80ac 	bne.w	8003940 <__sfvwrite_r+0x1fc>
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	46ba      	mov	sl, r7
 80037ec:	465a      	mov	r2, fp
 80037ee:	4649      	mov	r1, r9
 80037f0:	f000 fdc8 	bl	8004384 <memmove>
 80037f4:	68a2      	ldr	r2, [r4, #8]
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	eba2 0208 	sub.w	r2, r2, r8
 80037fc:	445b      	add	r3, fp
 80037fe:	60a2      	str	r2, [r4, #8]
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	9a01      	ldr	r2, [sp, #4]
 8003804:	6893      	ldr	r3, [r2, #8]
 8003806:	eba3 030a 	sub.w	r3, r3, sl
 800380a:	44d1      	add	r9, sl
 800380c:	eba7 070a 	sub.w	r7, r7, sl
 8003810:	6093      	str	r3, [r2, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0c5      	beq.n	80037a2 <__sfvwrite_r+0x5e>
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	2f00      	cmp	r7, #0
 800381a:	d1d8      	bne.n	80037ce <__sfvwrite_r+0x8a>
 800381c:	f8d5 9000 	ldr.w	r9, [r5]
 8003820:	686f      	ldr	r7, [r5, #4]
 8003822:	3508      	adds	r5, #8
 8003824:	e7d2      	b.n	80037cc <__sfvwrite_r+0x88>
 8003826:	f8d5 9000 	ldr.w	r9, [r5]
 800382a:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800382e:	3508      	adds	r5, #8
 8003830:	e79f      	b.n	8003772 <__sfvwrite_r+0x2e>
 8003832:	2000      	movs	r0, #0
 8003834:	4770      	bx	lr
 8003836:	4621      	mov	r1, r4
 8003838:	9800      	ldr	r0, [sp, #0]
 800383a:	f7ff fd1b 	bl	8003274 <_fflush_r>
 800383e:	b370      	cbz	r0, 800389e <__sfvwrite_r+0x15a>
 8003840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	b003      	add	sp, #12
 8003850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003854:	4681      	mov	r9, r0
 8003856:	4633      	mov	r3, r6
 8003858:	464e      	mov	r6, r9
 800385a:	46a8      	mov	r8, r5
 800385c:	469a      	mov	sl, r3
 800385e:	464d      	mov	r5, r9
 8003860:	b34e      	cbz	r6, 80038b6 <__sfvwrite_r+0x172>
 8003862:	b380      	cbz	r0, 80038c6 <__sfvwrite_r+0x182>
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	6962      	ldr	r2, [r4, #20]
 800386a:	45b1      	cmp	r9, r6
 800386c:	46cb      	mov	fp, r9
 800386e:	bf28      	it	cs
 8003870:	46b3      	movcs	fp, r6
 8003872:	4298      	cmp	r0, r3
 8003874:	465f      	mov	r7, fp
 8003876:	d904      	bls.n	8003882 <__sfvwrite_r+0x13e>
 8003878:	68a3      	ldr	r3, [r4, #8]
 800387a:	4413      	add	r3, r2
 800387c:	459b      	cmp	fp, r3
 800387e:	f300 80a6 	bgt.w	80039ce <__sfvwrite_r+0x28a>
 8003882:	4593      	cmp	fp, r2
 8003884:	db4b      	blt.n	800391e <__sfvwrite_r+0x1da>
 8003886:	4613      	mov	r3, r2
 8003888:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800388a:	69e1      	ldr	r1, [r4, #28]
 800388c:	9800      	ldr	r0, [sp, #0]
 800388e:	462a      	mov	r2, r5
 8003890:	47b8      	blx	r7
 8003892:	1e07      	subs	r7, r0, #0
 8003894:	ddd4      	ble.n	8003840 <__sfvwrite_r+0xfc>
 8003896:	ebb9 0907 	subs.w	r9, r9, r7
 800389a:	d0cc      	beq.n	8003836 <__sfvwrite_r+0xf2>
 800389c:	2001      	movs	r0, #1
 800389e:	f8da 3008 	ldr.w	r3, [sl, #8]
 80038a2:	1bdb      	subs	r3, r3, r7
 80038a4:	443d      	add	r5, r7
 80038a6:	1bf6      	subs	r6, r6, r7
 80038a8:	f8ca 3008 	str.w	r3, [sl, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f43f af78 	beq.w	80037a2 <__sfvwrite_r+0x5e>
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d1d5      	bne.n	8003862 <__sfvwrite_r+0x11e>
 80038b6:	f108 0308 	add.w	r3, r8, #8
 80038ba:	e913 0060 	ldmdb	r3, {r5, r6}
 80038be:	4698      	mov	r8, r3
 80038c0:	3308      	adds	r3, #8
 80038c2:	2e00      	cmp	r6, #0
 80038c4:	d0f9      	beq.n	80038ba <__sfvwrite_r+0x176>
 80038c6:	4632      	mov	r2, r6
 80038c8:	210a      	movs	r1, #10
 80038ca:	4628      	mov	r0, r5
 80038cc:	f000 fc70 	bl	80041b0 <memchr>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	f000 80a1 	beq.w	8003a18 <__sfvwrite_r+0x2d4>
 80038d6:	3001      	adds	r0, #1
 80038d8:	eba0 0905 	sub.w	r9, r0, r5
 80038dc:	e7c2      	b.n	8003864 <__sfvwrite_r+0x120>
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	6923      	ldr	r3, [r4, #16]
 80038e2:	4298      	cmp	r0, r3
 80038e4:	d802      	bhi.n	80038ec <__sfvwrite_r+0x1a8>
 80038e6:	6963      	ldr	r3, [r4, #20]
 80038e8:	429f      	cmp	r7, r3
 80038ea:	d25d      	bcs.n	80039a8 <__sfvwrite_r+0x264>
 80038ec:	45b8      	cmp	r8, r7
 80038ee:	bf28      	it	cs
 80038f0:	46b8      	movcs	r8, r7
 80038f2:	4642      	mov	r2, r8
 80038f4:	4649      	mov	r1, r9
 80038f6:	f000 fd45 	bl	8004384 <memmove>
 80038fa:	68a3      	ldr	r3, [r4, #8]
 80038fc:	6822      	ldr	r2, [r4, #0]
 80038fe:	eba3 0308 	sub.w	r3, r3, r8
 8003902:	4442      	add	r2, r8
 8003904:	60a3      	str	r3, [r4, #8]
 8003906:	6022      	str	r2, [r4, #0]
 8003908:	b10b      	cbz	r3, 800390e <__sfvwrite_r+0x1ca>
 800390a:	46c2      	mov	sl, r8
 800390c:	e779      	b.n	8003802 <__sfvwrite_r+0xbe>
 800390e:	4621      	mov	r1, r4
 8003910:	9800      	ldr	r0, [sp, #0]
 8003912:	f7ff fcaf 	bl	8003274 <_fflush_r>
 8003916:	2800      	cmp	r0, #0
 8003918:	d192      	bne.n	8003840 <__sfvwrite_r+0xfc>
 800391a:	46c2      	mov	sl, r8
 800391c:	e771      	b.n	8003802 <__sfvwrite_r+0xbe>
 800391e:	465a      	mov	r2, fp
 8003920:	4629      	mov	r1, r5
 8003922:	f000 fd2f 	bl	8004384 <memmove>
 8003926:	68a2      	ldr	r2, [r4, #8]
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	eba2 020b 	sub.w	r2, r2, fp
 800392e:	445b      	add	r3, fp
 8003930:	60a2      	str	r2, [r4, #8]
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	e7af      	b.n	8003896 <__sfvwrite_r+0x152>
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	46b8      	mov	r8, r7
 800393a:	46ba      	mov	sl, r7
 800393c:	46bb      	mov	fp, r7
 800393e:	e755      	b.n	80037ec <__sfvwrite_r+0xa8>
 8003940:	6962      	ldr	r2, [r4, #20]
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	6921      	ldr	r1, [r4, #16]
 8003946:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800394a:	eba0 0a01 	sub.w	sl, r0, r1
 800394e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8003952:	f10a 0001 	add.w	r0, sl, #1
 8003956:	ea4f 0868 	mov.w	r8, r8, asr #1
 800395a:	4438      	add	r0, r7
 800395c:	4540      	cmp	r0, r8
 800395e:	4642      	mov	r2, r8
 8003960:	bf84      	itt	hi
 8003962:	4680      	movhi	r8, r0
 8003964:	4642      	movhi	r2, r8
 8003966:	055b      	lsls	r3, r3, #21
 8003968:	d544      	bpl.n	80039f4 <__sfvwrite_r+0x2b0>
 800396a:	4611      	mov	r1, r2
 800396c:	9800      	ldr	r0, [sp, #0]
 800396e:	f000 f973 	bl	8003c58 <_malloc_r>
 8003972:	4683      	mov	fp, r0
 8003974:	2800      	cmp	r0, #0
 8003976:	d055      	beq.n	8003a24 <__sfvwrite_r+0x2e0>
 8003978:	4652      	mov	r2, sl
 800397a:	6921      	ldr	r1, [r4, #16]
 800397c:	f000 fc68 	bl	8004250 <memcpy>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	eb0b 000a 	add.w	r0, fp, sl
 8003990:	eba8 030a 	sub.w	r3, r8, sl
 8003994:	f8c4 b010 	str.w	fp, [r4, #16]
 8003998:	f8c4 8014 	str.w	r8, [r4, #20]
 800399c:	6020      	str	r0, [r4, #0]
 800399e:	60a3      	str	r3, [r4, #8]
 80039a0:	46b8      	mov	r8, r7
 80039a2:	46ba      	mov	sl, r7
 80039a4:	46bb      	mov	fp, r7
 80039a6:	e721      	b.n	80037ec <__sfvwrite_r+0xa8>
 80039a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039ac:	42b9      	cmp	r1, r7
 80039ae:	bf28      	it	cs
 80039b0:	4639      	movcs	r1, r7
 80039b2:	464a      	mov	r2, r9
 80039b4:	fb91 f1f3 	sdiv	r1, r1, r3
 80039b8:	9800      	ldr	r0, [sp, #0]
 80039ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80039bc:	fb03 f301 	mul.w	r3, r3, r1
 80039c0:	69e1      	ldr	r1, [r4, #28]
 80039c2:	47b0      	blx	r6
 80039c4:	f1b0 0a00 	subs.w	sl, r0, #0
 80039c8:	f73f af1b 	bgt.w	8003802 <__sfvwrite_r+0xbe>
 80039cc:	e738      	b.n	8003840 <__sfvwrite_r+0xfc>
 80039ce:	461a      	mov	r2, r3
 80039d0:	4629      	mov	r1, r5
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	f000 fcd6 	bl	8004384 <memmove>
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	9b01      	ldr	r3, [sp, #4]
 80039dc:	9800      	ldr	r0, [sp, #0]
 80039de:	441a      	add	r2, r3
 80039e0:	6022      	str	r2, [r4, #0]
 80039e2:	4621      	mov	r1, r4
 80039e4:	f7ff fc46 	bl	8003274 <_fflush_r>
 80039e8:	9b01      	ldr	r3, [sp, #4]
 80039ea:	2800      	cmp	r0, #0
 80039ec:	f47f af28 	bne.w	8003840 <__sfvwrite_r+0xfc>
 80039f0:	461f      	mov	r7, r3
 80039f2:	e750      	b.n	8003896 <__sfvwrite_r+0x152>
 80039f4:	9800      	ldr	r0, [sp, #0]
 80039f6:	f001 f9ef 	bl	8004dd8 <_realloc_r>
 80039fa:	4683      	mov	fp, r0
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d1c5      	bne.n	800398c <__sfvwrite_r+0x248>
 8003a00:	9d00      	ldr	r5, [sp, #0]
 8003a02:	6921      	ldr	r1, [r4, #16]
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7ff fdb7 	bl	8003578 <_free_r>
 8003a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a0e:	220c      	movs	r2, #12
 8003a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a14:	602a      	str	r2, [r5, #0]
 8003a16:	e715      	b.n	8003844 <__sfvwrite_r+0x100>
 8003a18:	f106 0901 	add.w	r9, r6, #1
 8003a1c:	e722      	b.n	8003864 <__sfvwrite_r+0x120>
 8003a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a22:	e6bf      	b.n	80037a4 <__sfvwrite_r+0x60>
 8003a24:	9a00      	ldr	r2, [sp, #0]
 8003a26:	230c      	movs	r3, #12
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2e:	e709      	b.n	8003844 <__sfvwrite_r+0x100>
 8003a30:	7ffffc00 	.word	0x7ffffc00

08003a34 <_fwalk>:
 8003a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a38:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8003a3c:	d01b      	beq.n	8003a76 <_fwalk+0x42>
 8003a3e:	4688      	mov	r8, r1
 8003a40:	2600      	movs	r6, #0
 8003a42:	687d      	ldr	r5, [r7, #4]
 8003a44:	68bc      	ldr	r4, [r7, #8]
 8003a46:	3d01      	subs	r5, #1
 8003a48:	d40f      	bmi.n	8003a6a <_fwalk+0x36>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003a52:	d906      	bls.n	8003a62 <_fwalk+0x2e>
 8003a54:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	d001      	beq.n	8003a62 <_fwalk+0x2e>
 8003a5e:	47c0      	blx	r8
 8003a60:	4306      	orrs	r6, r0
 8003a62:	1c6b      	adds	r3, r5, #1
 8003a64:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003a68:	d1ef      	bne.n	8003a4a <_fwalk+0x16>
 8003a6a:	683f      	ldr	r7, [r7, #0]
 8003a6c:	2f00      	cmp	r7, #0
 8003a6e:	d1e8      	bne.n	8003a42 <_fwalk+0xe>
 8003a70:	4630      	mov	r0, r6
 8003a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a76:	463e      	mov	r6, r7
 8003a78:	4630      	mov	r0, r6
 8003a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a7e:	bf00      	nop

08003a80 <_fwalk_reent>:
 8003a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a84:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8003a88:	d01f      	beq.n	8003aca <_fwalk_reent+0x4a>
 8003a8a:	4688      	mov	r8, r1
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	f04f 0900 	mov.w	r9, #0
 8003a92:	687d      	ldr	r5, [r7, #4]
 8003a94:	68bc      	ldr	r4, [r7, #8]
 8003a96:	3d01      	subs	r5, #1
 8003a98:	d411      	bmi.n	8003abe <_fwalk_reent+0x3e>
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8003aa2:	d908      	bls.n	8003ab6 <_fwalk_reent+0x36>
 8003aa4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4621      	mov	r1, r4
 8003aac:	4630      	mov	r0, r6
 8003aae:	d002      	beq.n	8003ab6 <_fwalk_reent+0x36>
 8003ab0:	47c0      	blx	r8
 8003ab2:	ea49 0900 	orr.w	r9, r9, r0
 8003ab6:	1c6b      	adds	r3, r5, #1
 8003ab8:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003abc:	d1ed      	bne.n	8003a9a <_fwalk_reent+0x1a>
 8003abe:	683f      	ldr	r7, [r7, #0]
 8003ac0:	2f00      	cmp	r7, #0
 8003ac2:	d1e6      	bne.n	8003a92 <_fwalk_reent+0x12>
 8003ac4:	4648      	mov	r0, r9
 8003ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aca:	46b9      	mov	r9, r7
 8003acc:	4648      	mov	r0, r9
 8003ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad2:	bf00      	nop

08003ad4 <_setlocale_r>:
 8003ad4:	b1b2      	cbz	r2, 8003b04 <_setlocale_r+0x30>
 8003ad6:	b510      	push	{r4, lr}
 8003ad8:	490b      	ldr	r1, [pc, #44]	; (8003b08 <_setlocale_r+0x34>)
 8003ada:	4610      	mov	r0, r2
 8003adc:	4614      	mov	r4, r2
 8003ade:	f001 fb73 	bl	80051c8 <strcmp>
 8003ae2:	b908      	cbnz	r0, 8003ae8 <_setlocale_r+0x14>
 8003ae4:	4809      	ldr	r0, [pc, #36]	; (8003b0c <_setlocale_r+0x38>)
 8003ae6:	bd10      	pop	{r4, pc}
 8003ae8:	4908      	ldr	r1, [pc, #32]	; (8003b0c <_setlocale_r+0x38>)
 8003aea:	4620      	mov	r0, r4
 8003aec:	f001 fb6c 	bl	80051c8 <strcmp>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d0f7      	beq.n	8003ae4 <_setlocale_r+0x10>
 8003af4:	4620      	mov	r0, r4
 8003af6:	4906      	ldr	r1, [pc, #24]	; (8003b10 <_setlocale_r+0x3c>)
 8003af8:	f001 fb66 	bl	80051c8 <strcmp>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d0f1      	beq.n	8003ae4 <_setlocale_r+0x10>
 8003b00:	2000      	movs	r0, #0
 8003b02:	bd10      	pop	{r4, pc}
 8003b04:	4801      	ldr	r0, [pc, #4]	; (8003b0c <_setlocale_r+0x38>)
 8003b06:	4770      	bx	lr
 8003b08:	0801b578 	.word	0x0801b578
 8003b0c:	0801b51c 	.word	0x0801b51c
 8003b10:	0801b544 	.word	0x0801b544

08003b14 <__locale_charset>:
 8003b14:	4800      	ldr	r0, [pc, #0]	; (8003b18 <__locale_charset+0x4>)
 8003b16:	4770      	bx	lr
 8003b18:	20000438 	.word	0x20000438

08003b1c <__locale_mb_cur_max>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__locale_mb_cur_max+0x8>)
 8003b1e:	6a18      	ldr	r0, [r3, #32]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000438 	.word	0x20000438

08003b28 <__locale_msgcharset>:
 8003b28:	4800      	ldr	r0, [pc, #0]	; (8003b2c <__locale_msgcharset+0x4>)
 8003b2a:	4770      	bx	lr
 8003b2c:	2000045c 	.word	0x2000045c

08003b30 <__locale_cjk_lang>:
 8003b30:	2000      	movs	r0, #0
 8003b32:	4770      	bx	lr

08003b34 <_localeconv_r>:
 8003b34:	4800      	ldr	r0, [pc, #0]	; (8003b38 <_localeconv_r+0x4>)
 8003b36:	4770      	bx	lr
 8003b38:	2000047c 	.word	0x2000047c

08003b3c <setlocale>:
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <setlocale+0xc>)
 8003b3e:	460a      	mov	r2, r1
 8003b40:	4601      	mov	r1, r0
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	f7ff bfc6 	b.w	8003ad4 <_setlocale_r>
 8003b48:	20000008 	.word	0x20000008

08003b4c <localeconv>:
 8003b4c:	4800      	ldr	r0, [pc, #0]	; (8003b50 <localeconv+0x4>)
 8003b4e:	4770      	bx	lr
 8003b50:	2000047c 	.word	0x2000047c

08003b54 <__swhatbuf_r>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	460c      	mov	r4, r1
 8003b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	b090      	sub	sp, #64	; 0x40
 8003b60:	4615      	mov	r5, r2
 8003b62:	461e      	mov	r6, r3
 8003b64:	db14      	blt.n	8003b90 <__swhatbuf_r+0x3c>
 8003b66:	aa01      	add	r2, sp, #4
 8003b68:	f003 fe3b 	bl	80077e2 <_fstat_r>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	db0f      	blt.n	8003b90 <__swhatbuf_r+0x3c>
 8003b70:	9a02      	ldr	r2, [sp, #8]
 8003b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b76:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8003b7a:	fab2 f282 	clz	r2, r2
 8003b7e:	0952      	lsrs	r2, r2, #5
 8003b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b88:	6032      	str	r2, [r6, #0]
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	b010      	add	sp, #64	; 0x40
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	89a2      	ldrh	r2, [r4, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	d004      	beq.n	8003ba6 <__swhatbuf_r+0x52>
 8003b9c:	2240      	movs	r2, #64	; 0x40
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	602a      	str	r2, [r5, #0]
 8003ba2:	b010      	add	sp, #64	; 0x40
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
 8003ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003baa:	602b      	str	r3, [r5, #0]
 8003bac:	b010      	add	sp, #64	; 0x40
 8003bae:	bd70      	pop	{r4, r5, r6, pc}

08003bb0 <__smakebuf_r>:
 8003bb0:	898a      	ldrh	r2, [r1, #12]
 8003bb2:	0792      	lsls	r2, r2, #30
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	d506      	bpl.n	8003bc6 <__smakebuf_r+0x16>
 8003bb8:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	6159      	str	r1, [r3, #20]
 8003bc4:	4770      	bx	lr
 8003bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	ab01      	add	r3, sp, #4
 8003bcc:	466a      	mov	r2, sp
 8003bce:	460c      	mov	r4, r1
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	f7ff ffbf 	bl	8003b54 <__swhatbuf_r>
 8003bd6:	9900      	ldr	r1, [sp, #0]
 8003bd8:	4606      	mov	r6, r0
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 f83c 	bl	8003c58 <_malloc_r>
 8003be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be4:	b1d0      	cbz	r0, 8003c1c <__smakebuf_r+0x6c>
 8003be6:	9a01      	ldr	r2, [sp, #4]
 8003be8:	4f12      	ldr	r7, [pc, #72]	; (8003c34 <__smakebuf_r+0x84>)
 8003bea:	9900      	ldr	r1, [sp, #0]
 8003bec:	63ef      	str	r7, [r5, #60]	; 0x3c
 8003bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	6020      	str	r0, [r4, #0]
 8003bf6:	6120      	str	r0, [r4, #16]
 8003bf8:	6161      	str	r1, [r4, #20]
 8003bfa:	b91a      	cbnz	r2, 8003c04 <__smakebuf_r+0x54>
 8003bfc:	4333      	orrs	r3, r6
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	b003      	add	sp, #12
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c04:	4628      	mov	r0, r5
 8003c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c0a:	f003 fdef 	bl	80077ec <_isatty_r>
 8003c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d0f2      	beq.n	8003bfc <__smakebuf_r+0x4c>
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	e7ef      	b.n	8003bfc <__smakebuf_r+0x4c>
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d4ef      	bmi.n	8003c00 <__smakebuf_r+0x50>
 8003c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	2101      	movs	r1, #1
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	6022      	str	r2, [r4, #0]
 8003c2e:	6122      	str	r2, [r4, #16]
 8003c30:	6161      	str	r1, [r4, #20]
 8003c32:	e7e5      	b.n	8003c00 <__smakebuf_r+0x50>
 8003c34:	080032c9 	.word	0x080032c9

08003c38 <malloc>:
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <malloc+0xc>)
 8003c3a:	4601      	mov	r1, r0
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	f000 b80b 	b.w	8003c58 <_malloc_r>
 8003c42:	bf00      	nop
 8003c44:	20000008 	.word	0x20000008

08003c48 <free>:
 8003c48:	4b02      	ldr	r3, [pc, #8]	; (8003c54 <free+0xc>)
 8003c4a:	4601      	mov	r1, r0
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	f7ff bc93 	b.w	8003578 <_free_r>
 8003c52:	bf00      	nop
 8003c54:	20000008 	.word	0x20000008

08003c58 <_malloc_r>:
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5c:	f101 060b 	add.w	r6, r1, #11
 8003c60:	2e16      	cmp	r6, #22
 8003c62:	b083      	sub	sp, #12
 8003c64:	4605      	mov	r5, r0
 8003c66:	f240 809e 	bls.w	8003da6 <_malloc_r+0x14e>
 8003c6a:	f036 0607 	bics.w	r6, r6, #7
 8003c6e:	f100 80bd 	bmi.w	8003dec <_malloc_r+0x194>
 8003c72:	42b1      	cmp	r1, r6
 8003c74:	f200 80ba 	bhi.w	8003dec <_malloc_r+0x194>
 8003c78:	f000 fbe8 	bl	800444c <__malloc_lock>
 8003c7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8003c80:	f0c0 828f 	bcc.w	80041a2 <_malloc_r+0x54a>
 8003c84:	0a73      	lsrs	r3, r6, #9
 8003c86:	f000 80b8 	beq.w	8003dfa <_malloc_r+0x1a2>
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	f200 817d 	bhi.w	8003f8a <_malloc_r+0x332>
 8003c90:	09b3      	lsrs	r3, r6, #6
 8003c92:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003c96:	f103 0e38 	add.w	lr, r3, #56	; 0x38
 8003c9a:	00c3      	lsls	r3, r0, #3
 8003c9c:	4fc1      	ldr	r7, [pc, #772]	; (8003fa4 <_malloc_r+0x34c>)
 8003c9e:	443b      	add	r3, r7
 8003ca0:	f1a3 0108 	sub.w	r1, r3, #8
 8003ca4:	685c      	ldr	r4, [r3, #4]
 8003ca6:	42a1      	cmp	r1, r4
 8003ca8:	d106      	bne.n	8003cb8 <_malloc_r+0x60>
 8003caa:	e00c      	b.n	8003cc6 <_malloc_r+0x6e>
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	f280 80aa 	bge.w	8003e06 <_malloc_r+0x1ae>
 8003cb2:	68e4      	ldr	r4, [r4, #12]
 8003cb4:	42a1      	cmp	r1, r4
 8003cb6:	d006      	beq.n	8003cc6 <_malloc_r+0x6e>
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	1b9a      	subs	r2, r3, r6
 8003cc0:	2a0f      	cmp	r2, #15
 8003cc2:	ddf3      	ble.n	8003cac <_malloc_r+0x54>
 8003cc4:	4670      	mov	r0, lr
 8003cc6:	693c      	ldr	r4, [r7, #16]
 8003cc8:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8003fa8 <_malloc_r+0x350>
 8003ccc:	4574      	cmp	r4, lr
 8003cce:	f000 81a7 	beq.w	8004020 <_malloc_r+0x3c8>
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	f023 0303 	bic.w	r3, r3, #3
 8003cd8:	1b9a      	subs	r2, r3, r6
 8003cda:	2a0f      	cmp	r2, #15
 8003cdc:	f300 818c 	bgt.w	8003ff8 <_malloc_r+0x3a0>
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	f8c7 e014 	str.w	lr, [r7, #20]
 8003ce6:	f8c7 e010 	str.w	lr, [r7, #16]
 8003cea:	f280 809d 	bge.w	8003e28 <_malloc_r+0x1d0>
 8003cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf2:	f080 815d 	bcs.w	8003fb0 <_malloc_r+0x358>
 8003cf6:	08db      	lsrs	r3, r3, #3
 8003cf8:	f103 0c01 	add.w	ip, r3, #1
 8003cfc:	1099      	asrs	r1, r3, #2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
 8003d04:	f8c4 8008 	str.w	r8, [r4, #8]
 8003d08:	2301      	movs	r3, #1
 8003d0a:	408b      	lsls	r3, r1
 8003d0c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	3908      	subs	r1, #8
 8003d14:	60e1      	str	r1, [r4, #12]
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8003d1c:	f8c8 400c 	str.w	r4, [r8, #12]
 8003d20:	1082      	asrs	r2, r0, #2
 8003d22:	2401      	movs	r4, #1
 8003d24:	4094      	lsls	r4, r2
 8003d26:	429c      	cmp	r4, r3
 8003d28:	f200 808b 	bhi.w	8003e42 <_malloc_r+0x1ea>
 8003d2c:	421c      	tst	r4, r3
 8003d2e:	d106      	bne.n	8003d3e <_malloc_r+0xe6>
 8003d30:	f020 0003 	bic.w	r0, r0, #3
 8003d34:	0064      	lsls	r4, r4, #1
 8003d36:	421c      	tst	r4, r3
 8003d38:	f100 0004 	add.w	r0, r0, #4
 8003d3c:	d0fa      	beq.n	8003d34 <_malloc_r+0xdc>
 8003d3e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8003d42:	46cc      	mov	ip, r9
 8003d44:	4680      	mov	r8, r0
 8003d46:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8003d4a:	459c      	cmp	ip, r3
 8003d4c:	d107      	bne.n	8003d5e <_malloc_r+0x106>
 8003d4e:	e169      	b.n	8004024 <_malloc_r+0x3cc>
 8003d50:	2a00      	cmp	r2, #0
 8003d52:	f280 8177 	bge.w	8004044 <_malloc_r+0x3ec>
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	459c      	cmp	ip, r3
 8003d5a:	f000 8163 	beq.w	8004024 <_malloc_r+0x3cc>
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	f021 0103 	bic.w	r1, r1, #3
 8003d64:	1b8a      	subs	r2, r1, r6
 8003d66:	2a0f      	cmp	r2, #15
 8003d68:	ddf2      	ble.n	8003d50 <_malloc_r+0xf8>
 8003d6a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8003d6e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	199c      	adds	r4, r3, r6
 8003d76:	4628      	mov	r0, r5
 8003d78:	f046 0601 	orr.w	r6, r6, #1
 8003d7c:	f042 0501 	orr.w	r5, r2, #1
 8003d80:	605e      	str	r6, [r3, #4]
 8003d82:	f8c8 c00c 	str.w	ip, [r8, #12]
 8003d86:	f8cc 8008 	str.w	r8, [ip, #8]
 8003d8a:	617c      	str	r4, [r7, #20]
 8003d8c:	613c      	str	r4, [r7, #16]
 8003d8e:	f8c4 e00c 	str.w	lr, [r4, #12]
 8003d92:	f8c4 e008 	str.w	lr, [r4, #8]
 8003d96:	6065      	str	r5, [r4, #4]
 8003d98:	505a      	str	r2, [r3, r1]
 8003d9a:	f000 fb59 	bl	8004450 <__malloc_unlock>
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	f103 0408 	add.w	r4, r3, #8
 8003da4:	e01e      	b.n	8003de4 <_malloc_r+0x18c>
 8003da6:	2910      	cmp	r1, #16
 8003da8:	d820      	bhi.n	8003dec <_malloc_r+0x194>
 8003daa:	f000 fb4f 	bl	800444c <__malloc_lock>
 8003dae:	2610      	movs	r6, #16
 8003db0:	2318      	movs	r3, #24
 8003db2:	2002      	movs	r0, #2
 8003db4:	4f7b      	ldr	r7, [pc, #492]	; (8003fa4 <_malloc_r+0x34c>)
 8003db6:	443b      	add	r3, r7
 8003db8:	f1a3 0208 	sub.w	r2, r3, #8
 8003dbc:	685c      	ldr	r4, [r3, #4]
 8003dbe:	4294      	cmp	r4, r2
 8003dc0:	f000 8139 	beq.w	8004036 <_malloc_r+0x3de>
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	68e1      	ldr	r1, [r4, #12]
 8003dc8:	68a6      	ldr	r6, [r4, #8]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	4423      	add	r3, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	60f1      	str	r1, [r6, #12]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	608e      	str	r6, [r1, #8]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	f000 fb37 	bl	8004450 <__malloc_unlock>
 8003de2:	3408      	adds	r4, #8
 8003de4:	4620      	mov	r0, r4
 8003de6:	b003      	add	sp, #12
 8003de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dec:	2400      	movs	r4, #0
 8003dee:	230c      	movs	r3, #12
 8003df0:	4620      	mov	r0, r4
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	b003      	add	sp, #12
 8003df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfa:	2040      	movs	r0, #64	; 0x40
 8003dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e00:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8003e04:	e74a      	b.n	8003c9c <_malloc_r+0x44>
 8003e06:	4423      	add	r3, r4
 8003e08:	68e1      	ldr	r1, [r4, #12]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68a6      	ldr	r6, [r4, #8]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	60f1      	str	r1, [r6, #12]
 8003e14:	4628      	mov	r0, r5
 8003e16:	608e      	str	r6, [r1, #8]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	f000 fb19 	bl	8004450 <__malloc_unlock>
 8003e1e:	3408      	adds	r4, #8
 8003e20:	4620      	mov	r0, r4
 8003e22:	b003      	add	sp, #12
 8003e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e28:	4423      	add	r3, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	f000 fb0c 	bl	8004450 <__malloc_unlock>
 8003e38:	3408      	adds	r4, #8
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e42:	68bc      	ldr	r4, [r7, #8]
 8003e44:	6863      	ldr	r3, [r4, #4]
 8003e46:	f023 0903 	bic.w	r9, r3, #3
 8003e4a:	45b1      	cmp	r9, r6
 8003e4c:	d304      	bcc.n	8003e58 <_malloc_r+0x200>
 8003e4e:	eba9 0306 	sub.w	r3, r9, r6
 8003e52:	2b0f      	cmp	r3, #15
 8003e54:	f300 8089 	bgt.w	8003f6a <_malloc_r+0x312>
 8003e58:	f8df a150 	ldr.w	sl, [pc, #336]	; 8003fac <_malloc_r+0x354>
 8003e5c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003e60:	f8da 3000 	ldr.w	r3, [sl]
 8003e64:	3201      	adds	r2, #1
 8003e66:	eb04 0b09 	add.w	fp, r4, r9
 8003e6a:	eb06 0803 	add.w	r8, r6, r3
 8003e6e:	f000 8150 	beq.w	8004112 <_malloc_r+0x4ba>
 8003e72:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8003e76:	f108 080f 	add.w	r8, r8, #15
 8003e7a:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8003e7e:	f028 080f 	bic.w	r8, r8, #15
 8003e82:	4641      	mov	r1, r8
 8003e84:	4628      	mov	r0, r5
 8003e86:	f003 fc91 	bl	80077ac <_sbrk_r>
 8003e8a:	1c42      	adds	r2, r0, #1
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f000 80f6 	beq.w	800407e <_malloc_r+0x426>
 8003e92:	4583      	cmp	fp, r0
 8003e94:	f200 80f1 	bhi.w	800407a <_malloc_r+0x422>
 8003e98:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003e9c:	4442      	add	r2, r8
 8003e9e:	f8ca 2004 	str.w	r2, [sl, #4]
 8003ea2:	f000 8147 	beq.w	8004134 <_malloc_r+0x4dc>
 8003ea6:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 8003eaa:	3101      	adds	r1, #1
 8003eac:	bf1b      	ittet	ne
 8003eae:	eba3 0b0b 	subne.w	fp, r3, fp
 8003eb2:	445a      	addne	r2, fp
 8003eb4:	f8c7 3408 	streq.w	r3, [r7, #1032]	; 0x408
 8003eb8:	f8ca 2004 	strne.w	r2, [sl, #4]
 8003ebc:	f013 0207 	ands.w	r2, r3, #7
 8003ec0:	f000 810d 	beq.w	80040de <_malloc_r+0x486>
 8003ec4:	f1c2 0108 	rsb	r1, r2, #8
 8003ec8:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 8003ecc:	440b      	add	r3, r1
 8003ece:	3208      	adds	r2, #8
 8003ed0:	4498      	add	r8, r3
 8003ed2:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8003ed6:	eba2 0808 	sub.w	r8, r2, r8
 8003eda:	4641      	mov	r1, r8
 8003edc:	4628      	mov	r0, r5
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	f003 fc64 	bl	80077ac <_sbrk_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	9b01      	ldr	r3, [sp, #4]
 8003ee8:	f000 813e 	beq.w	8004168 <_malloc_r+0x510>
 8003eec:	1ac1      	subs	r1, r0, r3
 8003eee:	4441      	add	r1, r8
 8003ef0:	f041 0101 	orr.w	r1, r1, #1
 8003ef4:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	4442      	add	r2, r8
 8003efc:	42bc      	cmp	r4, r7
 8003efe:	6059      	str	r1, [r3, #4]
 8003f00:	f8ca 2004 	str.w	r2, [sl, #4]
 8003f04:	d016      	beq.n	8003f34 <_malloc_r+0x2dc>
 8003f06:	f1b9 0f0f 	cmp.w	r9, #15
 8003f0a:	f240 80f4 	bls.w	80040f6 <_malloc_r+0x49e>
 8003f0e:	6861      	ldr	r1, [r4, #4]
 8003f10:	f1a9 030c 	sub.w	r3, r9, #12
 8003f14:	f023 0307 	bic.w	r3, r3, #7
 8003f18:	18e0      	adds	r0, r4, r3
 8003f1a:	f001 0101 	and.w	r1, r1, #1
 8003f1e:	f04f 0e05 	mov.w	lr, #5
 8003f22:	4319      	orrs	r1, r3
 8003f24:	2b0f      	cmp	r3, #15
 8003f26:	6061      	str	r1, [r4, #4]
 8003f28:	f8c0 e004 	str.w	lr, [r0, #4]
 8003f2c:	f8c0 e008 	str.w	lr, [r0, #8]
 8003f30:	f200 8112 	bhi.w	8004158 <_malloc_r+0x500>
 8003f34:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8003f38:	68bc      	ldr	r4, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8003f40:	bf88      	it	hi
 8003f42:	f8ca 202c 	strhi.w	r2, [sl, #44]	; 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	bf88      	it	hi
 8003f4a:	f8ca 2030 	strhi.w	r2, [sl, #48]	; 0x30
 8003f4e:	6862      	ldr	r2, [r4, #4]
 8003f50:	f022 0203 	bic.w	r2, r2, #3
 8003f54:	4296      	cmp	r6, r2
 8003f56:	eba2 0306 	sub.w	r3, r2, r6
 8003f5a:	d801      	bhi.n	8003f60 <_malloc_r+0x308>
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	dc04      	bgt.n	8003f6a <_malloc_r+0x312>
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 fa75 	bl	8004450 <__malloc_unlock>
 8003f66:	2400      	movs	r4, #0
 8003f68:	e73c      	b.n	8003de4 <_malloc_r+0x18c>
 8003f6a:	19a2      	adds	r2, r4, r6
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f046 0601 	orr.w	r6, r6, #1
 8003f74:	6066      	str	r6, [r4, #4]
 8003f76:	4628      	mov	r0, r5
 8003f78:	60ba      	str	r2, [r7, #8]
 8003f7a:	6053      	str	r3, [r2, #4]
 8003f7c:	f000 fa68 	bl	8004450 <__malloc_unlock>
 8003f80:	3408      	adds	r4, #8
 8003f82:	4620      	mov	r0, r4
 8003f84:	b003      	add	sp, #12
 8003f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8a:	2b14      	cmp	r3, #20
 8003f8c:	d969      	bls.n	8004062 <_malloc_r+0x40a>
 8003f8e:	2b54      	cmp	r3, #84	; 0x54
 8003f90:	f200 809b 	bhi.w	80040ca <_malloc_r+0x472>
 8003f94:	0b33      	lsrs	r3, r6, #12
 8003f96:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8003f9a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
 8003f9e:	00c3      	lsls	r3, r0, #3
 8003fa0:	e67c      	b.n	8003c9c <_malloc_r+0x44>
 8003fa2:	bf00      	nop
 8003fa4:	200004b4 	.word	0x200004b4
 8003fa8:	200004bc 	.word	0x200004bc
 8003fac:	20000adc 	.word	0x20000adc
 8003fb0:	0a5a      	lsrs	r2, r3, #9
 8003fb2:	2a04      	cmp	r2, #4
 8003fb4:	d95b      	bls.n	800406e <_malloc_r+0x416>
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	f200 80ae 	bhi.w	8004118 <_malloc_r+0x4c0>
 8003fbc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8003fc0:	00c9      	lsls	r1, r1, #3
 8003fc2:	325b      	adds	r2, #91	; 0x5b
 8003fc4:	eb07 0c01 	add.w	ip, r7, r1
 8003fc8:	5879      	ldr	r1, [r7, r1]
 8003fca:	f1ac 0c08 	sub.w	ip, ip, #8
 8003fce:	458c      	cmp	ip, r1
 8003fd0:	f000 8088 	beq.w	80040e4 <_malloc_r+0x48c>
 8003fd4:	684a      	ldr	r2, [r1, #4]
 8003fd6:	f022 0203 	bic.w	r2, r2, #3
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d273      	bcs.n	80040c6 <_malloc_r+0x46e>
 8003fde:	6889      	ldr	r1, [r1, #8]
 8003fe0:	458c      	cmp	ip, r1
 8003fe2:	d1f7      	bne.n	8003fd4 <_malloc_r+0x37c>
 8003fe4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60e2      	str	r2, [r4, #12]
 8003fec:	f8c4 c008 	str.w	ip, [r4, #8]
 8003ff0:	6094      	str	r4, [r2, #8]
 8003ff2:	f8cc 400c 	str.w	r4, [ip, #12]
 8003ff6:	e693      	b.n	8003d20 <_malloc_r+0xc8>
 8003ff8:	19a1      	adds	r1, r4, r6
 8003ffa:	f046 0c01 	orr.w	ip, r6, #1
 8003ffe:	f042 0601 	orr.w	r6, r2, #1
 8004002:	f8c4 c004 	str.w	ip, [r4, #4]
 8004006:	4628      	mov	r0, r5
 8004008:	6179      	str	r1, [r7, #20]
 800400a:	6139      	str	r1, [r7, #16]
 800400c:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004010:	f8c1 e008 	str.w	lr, [r1, #8]
 8004014:	604e      	str	r6, [r1, #4]
 8004016:	50e2      	str	r2, [r4, r3]
 8004018:	f000 fa1a 	bl	8004450 <__malloc_unlock>
 800401c:	3408      	adds	r4, #8
 800401e:	e6e1      	b.n	8003de4 <_malloc_r+0x18c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	e67d      	b.n	8003d20 <_malloc_r+0xc8>
 8004024:	f108 0801 	add.w	r8, r8, #1
 8004028:	f018 0f03 	tst.w	r8, #3
 800402c:	f10c 0c08 	add.w	ip, ip, #8
 8004030:	f47f ae89 	bne.w	8003d46 <_malloc_r+0xee>
 8004034:	e02d      	b.n	8004092 <_malloc_r+0x43a>
 8004036:	68dc      	ldr	r4, [r3, #12]
 8004038:	42a3      	cmp	r3, r4
 800403a:	bf08      	it	eq
 800403c:	3002      	addeq	r0, #2
 800403e:	f43f ae42 	beq.w	8003cc6 <_malloc_r+0x6e>
 8004042:	e6bf      	b.n	8003dc4 <_malloc_r+0x16c>
 8004044:	4419      	add	r1, r3
 8004046:	461c      	mov	r4, r3
 8004048:	684a      	ldr	r2, [r1, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f854 6f08 	ldr.w	r6, [r4, #8]!
 8004050:	f042 0201 	orr.w	r2, r2, #1
 8004054:	604a      	str	r2, [r1, #4]
 8004056:	4628      	mov	r0, r5
 8004058:	60f3      	str	r3, [r6, #12]
 800405a:	609e      	str	r6, [r3, #8]
 800405c:	f000 f9f8 	bl	8004450 <__malloc_unlock>
 8004060:	e6c0      	b.n	8003de4 <_malloc_r+0x18c>
 8004062:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004066:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
 800406a:	00c3      	lsls	r3, r0, #3
 800406c:	e616      	b.n	8003c9c <_malloc_r+0x44>
 800406e:	099a      	lsrs	r2, r3, #6
 8004070:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8004074:	00c9      	lsls	r1, r1, #3
 8004076:	3238      	adds	r2, #56	; 0x38
 8004078:	e7a4      	b.n	8003fc4 <_malloc_r+0x36c>
 800407a:	42bc      	cmp	r4, r7
 800407c:	d054      	beq.n	8004128 <_malloc_r+0x4d0>
 800407e:	68bc      	ldr	r4, [r7, #8]
 8004080:	6862      	ldr	r2, [r4, #4]
 8004082:	f022 0203 	bic.w	r2, r2, #3
 8004086:	e765      	b.n	8003f54 <_malloc_r+0x2fc>
 8004088:	f859 3908 	ldr.w	r3, [r9], #-8
 800408c:	4599      	cmp	r9, r3
 800408e:	f040 8086 	bne.w	800419e <_malloc_r+0x546>
 8004092:	f010 0f03 	tst.w	r0, #3
 8004096:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800409a:	d1f5      	bne.n	8004088 <_malloc_r+0x430>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	ea23 0304 	bic.w	r3, r3, r4
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	0064      	lsls	r4, r4, #1
 80040a6:	429c      	cmp	r4, r3
 80040a8:	f63f aecb 	bhi.w	8003e42 <_malloc_r+0x1ea>
 80040ac:	2c00      	cmp	r4, #0
 80040ae:	f43f aec8 	beq.w	8003e42 <_malloc_r+0x1ea>
 80040b2:	421c      	tst	r4, r3
 80040b4:	4640      	mov	r0, r8
 80040b6:	f47f ae42 	bne.w	8003d3e <_malloc_r+0xe6>
 80040ba:	0064      	lsls	r4, r4, #1
 80040bc:	421c      	tst	r4, r3
 80040be:	f100 0004 	add.w	r0, r0, #4
 80040c2:	d0fa      	beq.n	80040ba <_malloc_r+0x462>
 80040c4:	e63b      	b.n	8003d3e <_malloc_r+0xe6>
 80040c6:	468c      	mov	ip, r1
 80040c8:	e78c      	b.n	8003fe4 <_malloc_r+0x38c>
 80040ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80040ce:	d815      	bhi.n	80040fc <_malloc_r+0x4a4>
 80040d0:	0bf3      	lsrs	r3, r6, #15
 80040d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80040d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
 80040da:	00c3      	lsls	r3, r0, #3
 80040dc:	e5de      	b.n	8003c9c <_malloc_r+0x44>
 80040de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e2:	e6f5      	b.n	8003ed0 <_malloc_r+0x278>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	1092      	asrs	r2, r2, #2
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4313      	orrs	r3, r2
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	4662      	mov	r2, ip
 80040f4:	e779      	b.n	8003fea <_malloc_r+0x392>
 80040f6:	2201      	movs	r2, #1
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	e731      	b.n	8003f60 <_malloc_r+0x308>
 80040fc:	f240 5254 	movw	r2, #1364	; 0x554
 8004100:	4293      	cmp	r3, r2
 8004102:	d823      	bhi.n	800414c <_malloc_r+0x4f4>
 8004104:	0cb3      	lsrs	r3, r6, #18
 8004106:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800410a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
 800410e:	00c3      	lsls	r3, r0, #3
 8004110:	e5c4      	b.n	8003c9c <_malloc_r+0x44>
 8004112:	f108 0810 	add.w	r8, r8, #16
 8004116:	e6b4      	b.n	8003e82 <_malloc_r+0x22a>
 8004118:	2a54      	cmp	r2, #84	; 0x54
 800411a:	d829      	bhi.n	8004170 <_malloc_r+0x518>
 800411c:	0b1a      	lsrs	r2, r3, #12
 800411e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004122:	00c9      	lsls	r1, r1, #3
 8004124:	326e      	adds	r2, #110	; 0x6e
 8004126:	e74d      	b.n	8003fc4 <_malloc_r+0x36c>
 8004128:	f8da 2004 	ldr.w	r2, [sl, #4]
 800412c:	4442      	add	r2, r8
 800412e:	f8ca 2004 	str.w	r2, [sl, #4]
 8004132:	e6b8      	b.n	8003ea6 <_malloc_r+0x24e>
 8004134:	f3cb 010b 	ubfx	r1, fp, #0, #12
 8004138:	2900      	cmp	r1, #0
 800413a:	f47f aeb4 	bne.w	8003ea6 <_malloc_r+0x24e>
 800413e:	eb09 0308 	add.w	r3, r9, r8
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	604b      	str	r3, [r1, #4]
 800414a:	e6f3      	b.n	8003f34 <_malloc_r+0x2dc>
 800414c:	207f      	movs	r0, #127	; 0x7f
 800414e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8004152:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8004156:	e5a1      	b.n	8003c9c <_malloc_r+0x44>
 8004158:	f104 0108 	add.w	r1, r4, #8
 800415c:	4628      	mov	r0, r5
 800415e:	f7ff fa0b 	bl	8003578 <_free_r>
 8004162:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004166:	e6e5      	b.n	8003f34 <_malloc_r+0x2dc>
 8004168:	2101      	movs	r1, #1
 800416a:	f04f 0800 	mov.w	r8, #0
 800416e:	e6c1      	b.n	8003ef4 <_malloc_r+0x29c>
 8004170:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004174:	d805      	bhi.n	8004182 <_malloc_r+0x52a>
 8004176:	0bda      	lsrs	r2, r3, #15
 8004178:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800417c:	00c9      	lsls	r1, r1, #3
 800417e:	3277      	adds	r2, #119	; 0x77
 8004180:	e720      	b.n	8003fc4 <_malloc_r+0x36c>
 8004182:	f240 5154 	movw	r1, #1364	; 0x554
 8004186:	428a      	cmp	r2, r1
 8004188:	d805      	bhi.n	8004196 <_malloc_r+0x53e>
 800418a:	0c9a      	lsrs	r2, r3, #18
 800418c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8004190:	00c9      	lsls	r1, r1, #3
 8004192:	327c      	adds	r2, #124	; 0x7c
 8004194:	e716      	b.n	8003fc4 <_malloc_r+0x36c>
 8004196:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800419a:	227e      	movs	r2, #126	; 0x7e
 800419c:	e712      	b.n	8003fc4 <_malloc_r+0x36c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	e780      	b.n	80040a4 <_malloc_r+0x44c>
 80041a2:	08f0      	lsrs	r0, r6, #3
 80041a4:	f106 0308 	add.w	r3, r6, #8
 80041a8:	e604      	b.n	8003db4 <_malloc_r+0x15c>
 80041aa:	bf00      	nop
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <memchr>:
 80041b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041b4:	2a10      	cmp	r2, #16
 80041b6:	db2b      	blt.n	8004210 <memchr+0x60>
 80041b8:	f010 0f07 	tst.w	r0, #7
 80041bc:	d008      	beq.n	80041d0 <memchr+0x20>
 80041be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041c2:	3a01      	subs	r2, #1
 80041c4:	428b      	cmp	r3, r1
 80041c6:	d02d      	beq.n	8004224 <memchr+0x74>
 80041c8:	f010 0f07 	tst.w	r0, #7
 80041cc:	b342      	cbz	r2, 8004220 <memchr+0x70>
 80041ce:	d1f6      	bne.n	80041be <memchr+0xe>
 80041d0:	b4f0      	push	{r4, r5, r6, r7}
 80041d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041da:	f022 0407 	bic.w	r4, r2, #7
 80041de:	f07f 0700 	mvns.w	r7, #0
 80041e2:	2300      	movs	r3, #0
 80041e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80041e8:	3c08      	subs	r4, #8
 80041ea:	ea85 0501 	eor.w	r5, r5, r1
 80041ee:	ea86 0601 	eor.w	r6, r6, r1
 80041f2:	fa85 f547 	uadd8	r5, r5, r7
 80041f6:	faa3 f587 	sel	r5, r3, r7
 80041fa:	fa86 f647 	uadd8	r6, r6, r7
 80041fe:	faa5 f687 	sel	r6, r5, r7
 8004202:	b98e      	cbnz	r6, 8004228 <memchr+0x78>
 8004204:	d1ee      	bne.n	80041e4 <memchr+0x34>
 8004206:	bcf0      	pop	{r4, r5, r6, r7}
 8004208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800420c:	f002 0207 	and.w	r2, r2, #7
 8004210:	b132      	cbz	r2, 8004220 <memchr+0x70>
 8004212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004216:	3a01      	subs	r2, #1
 8004218:	ea83 0301 	eor.w	r3, r3, r1
 800421c:	b113      	cbz	r3, 8004224 <memchr+0x74>
 800421e:	d1f8      	bne.n	8004212 <memchr+0x62>
 8004220:	2000      	movs	r0, #0
 8004222:	4770      	bx	lr
 8004224:	3801      	subs	r0, #1
 8004226:	4770      	bx	lr
 8004228:	2d00      	cmp	r5, #0
 800422a:	bf06      	itte	eq
 800422c:	4635      	moveq	r5, r6
 800422e:	3803      	subeq	r0, #3
 8004230:	3807      	subne	r0, #7
 8004232:	f015 0f01 	tst.w	r5, #1
 8004236:	d107      	bne.n	8004248 <memchr+0x98>
 8004238:	3001      	adds	r0, #1
 800423a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800423e:	bf02      	ittt	eq
 8004240:	3001      	addeq	r0, #1
 8004242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004246:	3001      	addeq	r0, #1
 8004248:	bcf0      	pop	{r4, r5, r6, r7}
 800424a:	3801      	subs	r0, #1
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <memcpy>:
 8004250:	4684      	mov	ip, r0
 8004252:	ea41 0300 	orr.w	r3, r1, r0
 8004256:	f013 0303 	ands.w	r3, r3, #3
 800425a:	d16d      	bne.n	8004338 <memcpy+0xe8>
 800425c:	3a40      	subs	r2, #64	; 0x40
 800425e:	d341      	bcc.n	80042e4 <memcpy+0x94>
 8004260:	f851 3b04 	ldr.w	r3, [r1], #4
 8004264:	f840 3b04 	str.w	r3, [r0], #4
 8004268:	f851 3b04 	ldr.w	r3, [r1], #4
 800426c:	f840 3b04 	str.w	r3, [r0], #4
 8004270:	f851 3b04 	ldr.w	r3, [r1], #4
 8004274:	f840 3b04 	str.w	r3, [r0], #4
 8004278:	f851 3b04 	ldr.w	r3, [r1], #4
 800427c:	f840 3b04 	str.w	r3, [r0], #4
 8004280:	f851 3b04 	ldr.w	r3, [r1], #4
 8004284:	f840 3b04 	str.w	r3, [r0], #4
 8004288:	f851 3b04 	ldr.w	r3, [r1], #4
 800428c:	f840 3b04 	str.w	r3, [r0], #4
 8004290:	f851 3b04 	ldr.w	r3, [r1], #4
 8004294:	f840 3b04 	str.w	r3, [r0], #4
 8004298:	f851 3b04 	ldr.w	r3, [r1], #4
 800429c:	f840 3b04 	str.w	r3, [r0], #4
 80042a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042a4:	f840 3b04 	str.w	r3, [r0], #4
 80042a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042ac:	f840 3b04 	str.w	r3, [r0], #4
 80042b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042b4:	f840 3b04 	str.w	r3, [r0], #4
 80042b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042bc:	f840 3b04 	str.w	r3, [r0], #4
 80042c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042c4:	f840 3b04 	str.w	r3, [r0], #4
 80042c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042cc:	f840 3b04 	str.w	r3, [r0], #4
 80042d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042d4:	f840 3b04 	str.w	r3, [r0], #4
 80042d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042dc:	f840 3b04 	str.w	r3, [r0], #4
 80042e0:	3a40      	subs	r2, #64	; 0x40
 80042e2:	d2bd      	bcs.n	8004260 <memcpy+0x10>
 80042e4:	3230      	adds	r2, #48	; 0x30
 80042e6:	d311      	bcc.n	800430c <memcpy+0xbc>
 80042e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042ec:	f840 3b04 	str.w	r3, [r0], #4
 80042f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80042f4:	f840 3b04 	str.w	r3, [r0], #4
 80042f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80042fc:	f840 3b04 	str.w	r3, [r0], #4
 8004300:	f851 3b04 	ldr.w	r3, [r1], #4
 8004304:	f840 3b04 	str.w	r3, [r0], #4
 8004308:	3a10      	subs	r2, #16
 800430a:	d2ed      	bcs.n	80042e8 <memcpy+0x98>
 800430c:	320c      	adds	r2, #12
 800430e:	d305      	bcc.n	800431c <memcpy+0xcc>
 8004310:	f851 3b04 	ldr.w	r3, [r1], #4
 8004314:	f840 3b04 	str.w	r3, [r0], #4
 8004318:	3a04      	subs	r2, #4
 800431a:	d2f9      	bcs.n	8004310 <memcpy+0xc0>
 800431c:	3204      	adds	r2, #4
 800431e:	d008      	beq.n	8004332 <memcpy+0xe2>
 8004320:	07d2      	lsls	r2, r2, #31
 8004322:	bf1c      	itt	ne
 8004324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004328:	f800 3b01 	strbne.w	r3, [r0], #1
 800432c:	d301      	bcc.n	8004332 <memcpy+0xe2>
 800432e:	880b      	ldrh	r3, [r1, #0]
 8004330:	8003      	strh	r3, [r0, #0]
 8004332:	4660      	mov	r0, ip
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	2a08      	cmp	r2, #8
 800433a:	d313      	bcc.n	8004364 <memcpy+0x114>
 800433c:	078b      	lsls	r3, r1, #30
 800433e:	d08d      	beq.n	800425c <memcpy+0xc>
 8004340:	f010 0303 	ands.w	r3, r0, #3
 8004344:	d08a      	beq.n	800425c <memcpy+0xc>
 8004346:	f1c3 0304 	rsb	r3, r3, #4
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	07db      	lsls	r3, r3, #31
 800434e:	bf1c      	itt	ne
 8004350:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004354:	f800 3b01 	strbne.w	r3, [r0], #1
 8004358:	d380      	bcc.n	800425c <memcpy+0xc>
 800435a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800435e:	f820 3b02 	strh.w	r3, [r0], #2
 8004362:	e77b      	b.n	800425c <memcpy+0xc>
 8004364:	3a04      	subs	r2, #4
 8004366:	d3d9      	bcc.n	800431c <memcpy+0xcc>
 8004368:	3a01      	subs	r2, #1
 800436a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800436e:	f800 3b01 	strb.w	r3, [r0], #1
 8004372:	d2f9      	bcs.n	8004368 <memcpy+0x118>
 8004374:	780b      	ldrb	r3, [r1, #0]
 8004376:	7003      	strb	r3, [r0, #0]
 8004378:	784b      	ldrb	r3, [r1, #1]
 800437a:	7043      	strb	r3, [r0, #1]
 800437c:	788b      	ldrb	r3, [r1, #2]
 800437e:	7083      	strb	r3, [r0, #2]
 8004380:	4660      	mov	r0, ip
 8004382:	4770      	bx	lr

08004384 <memmove>:
 8004384:	4288      	cmp	r0, r1
 8004386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004388:	d90d      	bls.n	80043a6 <memmove+0x22>
 800438a:	188b      	adds	r3, r1, r2
 800438c:	4298      	cmp	r0, r3
 800438e:	d20a      	bcs.n	80043a6 <memmove+0x22>
 8004390:	1884      	adds	r4, r0, r2
 8004392:	2a00      	cmp	r2, #0
 8004394:	d051      	beq.n	800443a <memmove+0xb6>
 8004396:	4622      	mov	r2, r4
 8004398:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800439c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043a0:	4299      	cmp	r1, r3
 80043a2:	d1f9      	bne.n	8004398 <memmove+0x14>
 80043a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a6:	2a0f      	cmp	r2, #15
 80043a8:	d948      	bls.n	800443c <memmove+0xb8>
 80043aa:	ea41 0300 	orr.w	r3, r1, r0
 80043ae:	079b      	lsls	r3, r3, #30
 80043b0:	d146      	bne.n	8004440 <memmove+0xbc>
 80043b2:	f100 0410 	add.w	r4, r0, #16
 80043b6:	f101 0310 	add.w	r3, r1, #16
 80043ba:	4615      	mov	r5, r2
 80043bc:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80043c0:	f844 6c10 	str.w	r6, [r4, #-16]
 80043c4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80043c8:	f844 6c0c 	str.w	r6, [r4, #-12]
 80043cc:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80043d0:	f844 6c08 	str.w	r6, [r4, #-8]
 80043d4:	3d10      	subs	r5, #16
 80043d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80043da:	f844 6c04 	str.w	r6, [r4, #-4]
 80043de:	2d0f      	cmp	r5, #15
 80043e0:	f103 0310 	add.w	r3, r3, #16
 80043e4:	f104 0410 	add.w	r4, r4, #16
 80043e8:	d8e8      	bhi.n	80043bc <memmove+0x38>
 80043ea:	f1a2 0310 	sub.w	r3, r2, #16
 80043ee:	f023 030f 	bic.w	r3, r3, #15
 80043f2:	f002 0e0f 	and.w	lr, r2, #15
 80043f6:	3310      	adds	r3, #16
 80043f8:	f1be 0f03 	cmp.w	lr, #3
 80043fc:	4419      	add	r1, r3
 80043fe:	4403      	add	r3, r0
 8004400:	d921      	bls.n	8004446 <memmove+0xc2>
 8004402:	1f1e      	subs	r6, r3, #4
 8004404:	460d      	mov	r5, r1
 8004406:	4674      	mov	r4, lr
 8004408:	3c04      	subs	r4, #4
 800440a:	f855 7b04 	ldr.w	r7, [r5], #4
 800440e:	f846 7f04 	str.w	r7, [r6, #4]!
 8004412:	2c03      	cmp	r4, #3
 8004414:	d8f8      	bhi.n	8004408 <memmove+0x84>
 8004416:	f1ae 0404 	sub.w	r4, lr, #4
 800441a:	f024 0403 	bic.w	r4, r4, #3
 800441e:	3404      	adds	r4, #4
 8004420:	4421      	add	r1, r4
 8004422:	4423      	add	r3, r4
 8004424:	f002 0203 	and.w	r2, r2, #3
 8004428:	b162      	cbz	r2, 8004444 <memmove+0xc0>
 800442a:	3b01      	subs	r3, #1
 800442c:	440a      	add	r2, r1
 800442e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004436:	428a      	cmp	r2, r1
 8004438:	d1f9      	bne.n	800442e <memmove+0xaa>
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	4603      	mov	r3, r0
 800443e:	e7f3      	b.n	8004428 <memmove+0xa4>
 8004440:	4603      	mov	r3, r0
 8004442:	e7f2      	b.n	800442a <memmove+0xa6>
 8004444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004446:	4672      	mov	r2, lr
 8004448:	e7ee      	b.n	8004428 <memmove+0xa4>
 800444a:	bf00      	nop

0800444c <__malloc_lock>:
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <__malloc_unlock>:
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <_Balloc>:
 8004454:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004456:	b570      	push	{r4, r5, r6, lr}
 8004458:	4605      	mov	r5, r0
 800445a:	460c      	mov	r4, r1
 800445c:	b14b      	cbz	r3, 8004472 <_Balloc+0x1e>
 800445e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004462:	b180      	cbz	r0, 8004486 <_Balloc+0x32>
 8004464:	6802      	ldr	r2, [r0, #0]
 8004466:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800446a:	2300      	movs	r3, #0
 800446c:	6103      	str	r3, [r0, #16]
 800446e:	60c3      	str	r3, [r0, #12]
 8004470:	bd70      	pop	{r4, r5, r6, pc}
 8004472:	2221      	movs	r2, #33	; 0x21
 8004474:	2104      	movs	r1, #4
 8004476:	f001 fefd 	bl	8006274 <_calloc_r>
 800447a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800447c:	4603      	mov	r3, r0
 800447e:	2800      	cmp	r0, #0
 8004480:	d1ed      	bne.n	800445e <_Balloc+0xa>
 8004482:	2000      	movs	r0, #0
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f604 	lsl.w	r6, r1, r4
 800448c:	1d72      	adds	r2, r6, #5
 800448e:	4628      	mov	r0, r5
 8004490:	0092      	lsls	r2, r2, #2
 8004492:	f001 feef 	bl	8006274 <_calloc_r>
 8004496:	2800      	cmp	r0, #0
 8004498:	d0f3      	beq.n	8004482 <_Balloc+0x2e>
 800449a:	6044      	str	r4, [r0, #4]
 800449c:	6086      	str	r6, [r0, #8]
 800449e:	e7e4      	b.n	800446a <_Balloc+0x16>

080044a0 <_Bfree>:
 80044a0:	b131      	cbz	r1, 80044b0 <_Bfree+0x10>
 80044a2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80044a4:	684a      	ldr	r2, [r1, #4]
 80044a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80044aa:	6008      	str	r0, [r1, #0]
 80044ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop

080044b4 <__multadd>:
 80044b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b6:	690c      	ldr	r4, [r1, #16]
 80044b8:	b083      	sub	sp, #12
 80044ba:	460d      	mov	r5, r1
 80044bc:	4606      	mov	r6, r0
 80044be:	f101 0e14 	add.w	lr, r1, #20
 80044c2:	2700      	movs	r7, #0
 80044c4:	f8de 0000 	ldr.w	r0, [lr]
 80044c8:	b281      	uxth	r1, r0
 80044ca:	fb02 3301 	mla	r3, r2, r1, r3
 80044ce:	0c01      	lsrs	r1, r0, #16
 80044d0:	0c18      	lsrs	r0, r3, #16
 80044d2:	fb02 0101 	mla	r1, r2, r1, r0
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3701      	adds	r7, #1
 80044da:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80044de:	42bc      	cmp	r4, r7
 80044e0:	f84e 3b04 	str.w	r3, [lr], #4
 80044e4:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80044e8:	dcec      	bgt.n	80044c4 <__multadd+0x10>
 80044ea:	b13b      	cbz	r3, 80044fc <__multadd+0x48>
 80044ec:	68aa      	ldr	r2, [r5, #8]
 80044ee:	4294      	cmp	r4, r2
 80044f0:	da07      	bge.n	8004502 <__multadd+0x4e>
 80044f2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80044f6:	3401      	adds	r4, #1
 80044f8:	6153      	str	r3, [r2, #20]
 80044fa:	612c      	str	r4, [r5, #16]
 80044fc:	4628      	mov	r0, r5
 80044fe:	b003      	add	sp, #12
 8004500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004502:	6869      	ldr	r1, [r5, #4]
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	3101      	adds	r1, #1
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff ffa3 	bl	8004454 <_Balloc>
 800450e:	692a      	ldr	r2, [r5, #16]
 8004510:	3202      	adds	r2, #2
 8004512:	f105 010c 	add.w	r1, r5, #12
 8004516:	4607      	mov	r7, r0
 8004518:	0092      	lsls	r2, r2, #2
 800451a:	300c      	adds	r0, #12
 800451c:	f7ff fe98 	bl	8004250 <memcpy>
 8004520:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8004522:	6869      	ldr	r1, [r5, #4]
 8004524:	9b01      	ldr	r3, [sp, #4]
 8004526:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800452a:	6028      	str	r0, [r5, #0]
 800452c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8004530:	463d      	mov	r5, r7
 8004532:	e7de      	b.n	80044f2 <__multadd+0x3e>

08004534 <__s2b>:
 8004534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004538:	4c24      	ldr	r4, [pc, #144]	; (80045cc <__s2b+0x98>)
 800453a:	9e08      	ldr	r6, [sp, #32]
 800453c:	461f      	mov	r7, r3
 800453e:	3308      	adds	r3, #8
 8004540:	fb84 4e03 	smull	r4, lr, r4, r3
 8004544:	17db      	asrs	r3, r3, #31
 8004546:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 800454a:	f1be 0f01 	cmp.w	lr, #1
 800454e:	4605      	mov	r5, r0
 8004550:	460c      	mov	r4, r1
 8004552:	4690      	mov	r8, r2
 8004554:	dd35      	ble.n	80045c2 <__s2b+0x8e>
 8004556:	2301      	movs	r3, #1
 8004558:	2100      	movs	r1, #0
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	459e      	cmp	lr, r3
 800455e:	f101 0101 	add.w	r1, r1, #1
 8004562:	dcfa      	bgt.n	800455a <__s2b+0x26>
 8004564:	4628      	mov	r0, r5
 8004566:	f7ff ff75 	bl	8004454 <_Balloc>
 800456a:	2301      	movs	r3, #1
 800456c:	f1b8 0f09 	cmp.w	r8, #9
 8004570:	6146      	str	r6, [r0, #20]
 8004572:	6103      	str	r3, [r0, #16]
 8004574:	dd21      	ble.n	80045ba <__s2b+0x86>
 8004576:	f104 0909 	add.w	r9, r4, #9
 800457a:	464e      	mov	r6, r9
 800457c:	4444      	add	r4, r8
 800457e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004582:	4601      	mov	r1, r0
 8004584:	3b30      	subs	r3, #48	; 0x30
 8004586:	220a      	movs	r2, #10
 8004588:	4628      	mov	r0, r5
 800458a:	f7ff ff93 	bl	80044b4 <__multadd>
 800458e:	42a6      	cmp	r6, r4
 8004590:	d1f5      	bne.n	800457e <__s2b+0x4a>
 8004592:	f1a8 0408 	sub.w	r4, r8, #8
 8004596:	444c      	add	r4, r9
 8004598:	4547      	cmp	r7, r8
 800459a:	dd14      	ble.n	80045c6 <__s2b+0x92>
 800459c:	eba7 0708 	sub.w	r7, r7, r8
 80045a0:	4427      	add	r7, r4
 80045a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045a6:	4601      	mov	r1, r0
 80045a8:	3b30      	subs	r3, #48	; 0x30
 80045aa:	220a      	movs	r2, #10
 80045ac:	4628      	mov	r0, r5
 80045ae:	f7ff ff81 	bl	80044b4 <__multadd>
 80045b2:	42a7      	cmp	r7, r4
 80045b4:	d1f5      	bne.n	80045a2 <__s2b+0x6e>
 80045b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ba:	340a      	adds	r4, #10
 80045bc:	f04f 0809 	mov.w	r8, #9
 80045c0:	e7ea      	b.n	8004598 <__s2b+0x64>
 80045c2:	2100      	movs	r1, #0
 80045c4:	e7ce      	b.n	8004564 <__s2b+0x30>
 80045c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ca:	bf00      	nop
 80045cc:	38e38e39 	.word	0x38e38e39

080045d0 <__hi0bits>:
 80045d0:	0c02      	lsrs	r2, r0, #16
 80045d2:	0412      	lsls	r2, r2, #16
 80045d4:	4603      	mov	r3, r0
 80045d6:	b9b2      	cbnz	r2, 8004606 <__hi0bits+0x36>
 80045d8:	0403      	lsls	r3, r0, #16
 80045da:	2010      	movs	r0, #16
 80045dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80045e0:	bf04      	itt	eq
 80045e2:	021b      	lsleq	r3, r3, #8
 80045e4:	3008      	addeq	r0, #8
 80045e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80045ea:	bf04      	itt	eq
 80045ec:	011b      	lsleq	r3, r3, #4
 80045ee:	3004      	addeq	r0, #4
 80045f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80045f4:	bf04      	itt	eq
 80045f6:	009b      	lsleq	r3, r3, #2
 80045f8:	3002      	addeq	r0, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db02      	blt.n	8004604 <__hi0bits+0x34>
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	d403      	bmi.n	800460a <__hi0bits+0x3a>
 8004602:	2020      	movs	r0, #32
 8004604:	4770      	bx	lr
 8004606:	2000      	movs	r0, #0
 8004608:	e7e8      	b.n	80045dc <__hi0bits+0xc>
 800460a:	3001      	adds	r0, #1
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <__lo0bits>:
 8004610:	6803      	ldr	r3, [r0, #0]
 8004612:	f013 0207 	ands.w	r2, r3, #7
 8004616:	4601      	mov	r1, r0
 8004618:	d007      	beq.n	800462a <__lo0bits+0x1a>
 800461a:	07da      	lsls	r2, r3, #31
 800461c:	d421      	bmi.n	8004662 <__lo0bits+0x52>
 800461e:	0798      	lsls	r0, r3, #30
 8004620:	d421      	bmi.n	8004666 <__lo0bits+0x56>
 8004622:	089b      	lsrs	r3, r3, #2
 8004624:	600b      	str	r3, [r1, #0]
 8004626:	2002      	movs	r0, #2
 8004628:	4770      	bx	lr
 800462a:	b298      	uxth	r0, r3
 800462c:	b198      	cbz	r0, 8004656 <__lo0bits+0x46>
 800462e:	4610      	mov	r0, r2
 8004630:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004634:	bf04      	itt	eq
 8004636:	0a1b      	lsreq	r3, r3, #8
 8004638:	3008      	addeq	r0, #8
 800463a:	071a      	lsls	r2, r3, #28
 800463c:	bf04      	itt	eq
 800463e:	091b      	lsreq	r3, r3, #4
 8004640:	3004      	addeq	r0, #4
 8004642:	079a      	lsls	r2, r3, #30
 8004644:	bf04      	itt	eq
 8004646:	089b      	lsreq	r3, r3, #2
 8004648:	3002      	addeq	r0, #2
 800464a:	07da      	lsls	r2, r3, #31
 800464c:	d407      	bmi.n	800465e <__lo0bits+0x4e>
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	d104      	bne.n	800465c <__lo0bits+0x4c>
 8004652:	2020      	movs	r0, #32
 8004654:	4770      	bx	lr
 8004656:	0c1b      	lsrs	r3, r3, #16
 8004658:	2010      	movs	r0, #16
 800465a:	e7e9      	b.n	8004630 <__lo0bits+0x20>
 800465c:	3001      	adds	r0, #1
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	4770      	bx	lr
 8004662:	2000      	movs	r0, #0
 8004664:	4770      	bx	lr
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	600b      	str	r3, [r1, #0]
 800466a:	2001      	movs	r0, #1
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <__i2b>:
 8004670:	b510      	push	{r4, lr}
 8004672:	460c      	mov	r4, r1
 8004674:	2101      	movs	r1, #1
 8004676:	f7ff feed 	bl	8004454 <_Balloc>
 800467a:	2201      	movs	r2, #1
 800467c:	6144      	str	r4, [r0, #20]
 800467e:	6102      	str	r2, [r0, #16]
 8004680:	bd10      	pop	{r4, pc}
 8004682:	bf00      	nop

08004684 <__multiply>:
 8004684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	690c      	ldr	r4, [r1, #16]
 800468a:	6915      	ldr	r5, [r2, #16]
 800468c:	42ac      	cmp	r4, r5
 800468e:	b083      	sub	sp, #12
 8004690:	468b      	mov	fp, r1
 8004692:	4616      	mov	r6, r2
 8004694:	da04      	bge.n	80046a0 <__multiply+0x1c>
 8004696:	4622      	mov	r2, r4
 8004698:	46b3      	mov	fp, r6
 800469a:	462c      	mov	r4, r5
 800469c:	460e      	mov	r6, r1
 800469e:	4615      	mov	r5, r2
 80046a0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80046a4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80046a8:	eb04 0805 	add.w	r8, r4, r5
 80046ac:	4598      	cmp	r8, r3
 80046ae:	bfc8      	it	gt
 80046b0:	3101      	addgt	r1, #1
 80046b2:	f7ff fecf 	bl	8004454 <_Balloc>
 80046b6:	f100 0914 	add.w	r9, r0, #20
 80046ba:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80046be:	45d1      	cmp	r9, sl
 80046c0:	9000      	str	r0, [sp, #0]
 80046c2:	d205      	bcs.n	80046d0 <__multiply+0x4c>
 80046c4:	464b      	mov	r3, r9
 80046c6:	2100      	movs	r1, #0
 80046c8:	f843 1b04 	str.w	r1, [r3], #4
 80046cc:	459a      	cmp	sl, r3
 80046ce:	d8fb      	bhi.n	80046c8 <__multiply+0x44>
 80046d0:	f106 0c14 	add.w	ip, r6, #20
 80046d4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
 80046d8:	f10b 0b14 	add.w	fp, fp, #20
 80046dc:	459c      	cmp	ip, r3
 80046de:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
 80046e2:	d24c      	bcs.n	800477e <__multiply+0xfa>
 80046e4:	f8cd a004 	str.w	sl, [sp, #4]
 80046e8:	469a      	mov	sl, r3
 80046ea:	f8dc 5000 	ldr.w	r5, [ip]
 80046ee:	b2af      	uxth	r7, r5
 80046f0:	b1ef      	cbz	r7, 800472e <__multiply+0xaa>
 80046f2:	2100      	movs	r1, #0
 80046f4:	464d      	mov	r5, r9
 80046f6:	465e      	mov	r6, fp
 80046f8:	460c      	mov	r4, r1
 80046fa:	f856 2b04 	ldr.w	r2, [r6], #4
 80046fe:	6828      	ldr	r0, [r5, #0]
 8004700:	b293      	uxth	r3, r2
 8004702:	b281      	uxth	r1, r0
 8004704:	fb07 1303 	mla	r3, r7, r3, r1
 8004708:	0c12      	lsrs	r2, r2, #16
 800470a:	0c01      	lsrs	r1, r0, #16
 800470c:	4423      	add	r3, r4
 800470e:	fb07 1102 	mla	r1, r7, r2, r1
 8004712:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8004716:	b29b      	uxth	r3, r3
 8004718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800471c:	45b6      	cmp	lr, r6
 800471e:	f845 3b04 	str.w	r3, [r5], #4
 8004722:	ea4f 4411 	mov.w	r4, r1, lsr #16
 8004726:	d8e8      	bhi.n	80046fa <__multiply+0x76>
 8004728:	602c      	str	r4, [r5, #0]
 800472a:	f8dc 5000 	ldr.w	r5, [ip]
 800472e:	0c2d      	lsrs	r5, r5, #16
 8004730:	d01d      	beq.n	800476e <__multiply+0xea>
 8004732:	f8d9 3000 	ldr.w	r3, [r9]
 8004736:	4648      	mov	r0, r9
 8004738:	461c      	mov	r4, r3
 800473a:	4659      	mov	r1, fp
 800473c:	2200      	movs	r2, #0
 800473e:	880e      	ldrh	r6, [r1, #0]
 8004740:	0c24      	lsrs	r4, r4, #16
 8004742:	fb05 4406 	mla	r4, r5, r6, r4
 8004746:	4422      	add	r2, r4
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800474e:	f840 3b04 	str.w	r3, [r0], #4
 8004752:	f851 3b04 	ldr.w	r3, [r1], #4
 8004756:	6804      	ldr	r4, [r0, #0]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	b2a6      	uxth	r6, r4
 800475c:	fb05 6303 	mla	r3, r5, r3, r6
 8004760:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004764:	458e      	cmp	lr, r1
 8004766:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800476a:	d8e8      	bhi.n	800473e <__multiply+0xba>
 800476c:	6003      	str	r3, [r0, #0]
 800476e:	f10c 0c04 	add.w	ip, ip, #4
 8004772:	45e2      	cmp	sl, ip
 8004774:	f109 0904 	add.w	r9, r9, #4
 8004778:	d8b7      	bhi.n	80046ea <__multiply+0x66>
 800477a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800477e:	f1b8 0f00 	cmp.w	r8, #0
 8004782:	dd0b      	ble.n	800479c <__multiply+0x118>
 8004784:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 8004788:	f1aa 0a04 	sub.w	sl, sl, #4
 800478c:	b11b      	cbz	r3, 8004796 <__multiply+0x112>
 800478e:	e005      	b.n	800479c <__multiply+0x118>
 8004790:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8004794:	b913      	cbnz	r3, 800479c <__multiply+0x118>
 8004796:	f1b8 0801 	subs.w	r8, r8, #1
 800479a:	d1f9      	bne.n	8004790 <__multiply+0x10c>
 800479c:	9800      	ldr	r0, [sp, #0]
 800479e:	f8c0 8010 	str.w	r8, [r0, #16]
 80047a2:	b003      	add	sp, #12
 80047a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080047a8 <__pow5mult>:
 80047a8:	f012 0303 	ands.w	r3, r2, #3
 80047ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b0:	4614      	mov	r4, r2
 80047b2:	4607      	mov	r7, r0
 80047b4:	d12e      	bne.n	8004814 <__pow5mult+0x6c>
 80047b6:	460d      	mov	r5, r1
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	d01c      	beq.n	80047f6 <__pow5mult+0x4e>
 80047bc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80047be:	b396      	cbz	r6, 8004826 <__pow5mult+0x7e>
 80047c0:	07e3      	lsls	r3, r4, #31
 80047c2:	f04f 0800 	mov.w	r8, #0
 80047c6:	d406      	bmi.n	80047d6 <__pow5mult+0x2e>
 80047c8:	1064      	asrs	r4, r4, #1
 80047ca:	d014      	beq.n	80047f6 <__pow5mult+0x4e>
 80047cc:	6830      	ldr	r0, [r6, #0]
 80047ce:	b1a8      	cbz	r0, 80047fc <__pow5mult+0x54>
 80047d0:	4606      	mov	r6, r0
 80047d2:	07e3      	lsls	r3, r4, #31
 80047d4:	d5f8      	bpl.n	80047c8 <__pow5mult+0x20>
 80047d6:	4632      	mov	r2, r6
 80047d8:	4629      	mov	r1, r5
 80047da:	4638      	mov	r0, r7
 80047dc:	f7ff ff52 	bl	8004684 <__multiply>
 80047e0:	b1b5      	cbz	r5, 8004810 <__pow5mult+0x68>
 80047e2:	686a      	ldr	r2, [r5, #4]
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	1064      	asrs	r4, r4, #1
 80047e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047ec:	6029      	str	r1, [r5, #0]
 80047ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80047f2:	4605      	mov	r5, r0
 80047f4:	d1ea      	bne.n	80047cc <__pow5mult+0x24>
 80047f6:	4628      	mov	r0, r5
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	4632      	mov	r2, r6
 80047fe:	4631      	mov	r1, r6
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff3f 	bl	8004684 <__multiply>
 8004806:	6030      	str	r0, [r6, #0]
 8004808:	f8c0 8000 	str.w	r8, [r0]
 800480c:	4606      	mov	r6, r0
 800480e:	e7e0      	b.n	80047d2 <__pow5mult+0x2a>
 8004810:	4605      	mov	r5, r0
 8004812:	e7d9      	b.n	80047c8 <__pow5mult+0x20>
 8004814:	1e5a      	subs	r2, r3, #1
 8004816:	4d0b      	ldr	r5, [pc, #44]	; (8004844 <__pow5mult+0x9c>)
 8004818:	2300      	movs	r3, #0
 800481a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800481e:	f7ff fe49 	bl	80044b4 <__multadd>
 8004822:	4605      	mov	r5, r0
 8004824:	e7c8      	b.n	80047b8 <__pow5mult+0x10>
 8004826:	2101      	movs	r1, #1
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff fe13 	bl	8004454 <_Balloc>
 800482e:	f240 2171 	movw	r1, #625	; 0x271
 8004832:	2201      	movs	r2, #1
 8004834:	2300      	movs	r3, #0
 8004836:	6141      	str	r1, [r0, #20]
 8004838:	6102      	str	r2, [r0, #16]
 800483a:	4606      	mov	r6, r0
 800483c:	64b8      	str	r0, [r7, #72]	; 0x48
 800483e:	6003      	str	r3, [r0, #0]
 8004840:	e7be      	b.n	80047c0 <__pow5mult+0x18>
 8004842:	bf00      	nop
 8004844:	0800c1e8 	.word	0x0800c1e8

08004848 <__lshift>:
 8004848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800484c:	4691      	mov	r9, r2
 800484e:	690a      	ldr	r2, [r1, #16]
 8004850:	688b      	ldr	r3, [r1, #8]
 8004852:	ea4f 1469 	mov.w	r4, r9, asr #5
 8004856:	eb04 0802 	add.w	r8, r4, r2
 800485a:	f108 0501 	add.w	r5, r8, #1
 800485e:	429d      	cmp	r5, r3
 8004860:	460e      	mov	r6, r1
 8004862:	4607      	mov	r7, r0
 8004864:	6849      	ldr	r1, [r1, #4]
 8004866:	dd04      	ble.n	8004872 <__lshift+0x2a>
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	429d      	cmp	r5, r3
 800486c:	f101 0101 	add.w	r1, r1, #1
 8004870:	dcfa      	bgt.n	8004868 <__lshift+0x20>
 8004872:	4638      	mov	r0, r7
 8004874:	f7ff fdee 	bl	8004454 <_Balloc>
 8004878:	2c00      	cmp	r4, #0
 800487a:	f100 0314 	add.w	r3, r0, #20
 800487e:	dd06      	ble.n	800488e <__lshift+0x46>
 8004880:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8004884:	2100      	movs	r1, #0
 8004886:	f843 1b04 	str.w	r1, [r3], #4
 800488a:	429a      	cmp	r2, r3
 800488c:	d1fb      	bne.n	8004886 <__lshift+0x3e>
 800488e:	6934      	ldr	r4, [r6, #16]
 8004890:	f106 0114 	add.w	r1, r6, #20
 8004894:	f019 091f 	ands.w	r9, r9, #31
 8004898:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800489c:	d01d      	beq.n	80048da <__lshift+0x92>
 800489e:	f1c9 0c20 	rsb	ip, r9, #32
 80048a2:	2200      	movs	r2, #0
 80048a4:	680c      	ldr	r4, [r1, #0]
 80048a6:	fa04 f409 	lsl.w	r4, r4, r9
 80048aa:	4314      	orrs	r4, r2
 80048ac:	f843 4b04 	str.w	r4, [r3], #4
 80048b0:	f851 2b04 	ldr.w	r2, [r1], #4
 80048b4:	458e      	cmp	lr, r1
 80048b6:	fa22 f20c 	lsr.w	r2, r2, ip
 80048ba:	d8f3      	bhi.n	80048a4 <__lshift+0x5c>
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	b10a      	cbz	r2, 80048c4 <__lshift+0x7c>
 80048c0:	f108 0502 	add.w	r5, r8, #2
 80048c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c6:	6872      	ldr	r2, [r6, #4]
 80048c8:	3d01      	subs	r5, #1
 80048ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048ce:	6105      	str	r5, [r0, #16]
 80048d0:	6031      	str	r1, [r6, #0]
 80048d2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80048d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048da:	3b04      	subs	r3, #4
 80048dc:	f851 2b04 	ldr.w	r2, [r1], #4
 80048e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80048e4:	458e      	cmp	lr, r1
 80048e6:	d8f9      	bhi.n	80048dc <__lshift+0x94>
 80048e8:	e7ec      	b.n	80048c4 <__lshift+0x7c>
 80048ea:	bf00      	nop

080048ec <__mcmp>:
 80048ec:	b430      	push	{r4, r5}
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	4605      	mov	r5, r0
 80048f2:	6900      	ldr	r0, [r0, #16]
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	d10f      	bne.n	8004918 <__mcmp+0x2c>
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	3514      	adds	r5, #20
 80048fc:	3114      	adds	r1, #20
 80048fe:	4419      	add	r1, r3
 8004900:	442b      	add	r3, r5
 8004902:	e001      	b.n	8004908 <__mcmp+0x1c>
 8004904:	429d      	cmp	r5, r3
 8004906:	d207      	bcs.n	8004918 <__mcmp+0x2c>
 8004908:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800490c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004910:	4294      	cmp	r4, r2
 8004912:	d0f7      	beq.n	8004904 <__mcmp+0x18>
 8004914:	d302      	bcc.n	800491c <__mcmp+0x30>
 8004916:	2001      	movs	r0, #1
 8004918:	bc30      	pop	{r4, r5}
 800491a:	4770      	bx	lr
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004920:	e7fa      	b.n	8004918 <__mcmp+0x2c>
 8004922:	bf00      	nop

08004924 <__mdiff>:
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	690f      	ldr	r7, [r1, #16]
 800492a:	460e      	mov	r6, r1
 800492c:	6911      	ldr	r1, [r2, #16]
 800492e:	1a7f      	subs	r7, r7, r1
 8004930:	2f00      	cmp	r7, #0
 8004932:	4690      	mov	r8, r2
 8004934:	d117      	bne.n	8004966 <__mdiff+0x42>
 8004936:	0089      	lsls	r1, r1, #2
 8004938:	f106 0514 	add.w	r5, r6, #20
 800493c:	f102 0e14 	add.w	lr, r2, #20
 8004940:	186b      	adds	r3, r5, r1
 8004942:	4471      	add	r1, lr
 8004944:	e001      	b.n	800494a <__mdiff+0x26>
 8004946:	429d      	cmp	r5, r3
 8004948:	d25c      	bcs.n	8004a04 <__mdiff+0xe0>
 800494a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800494e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004952:	42a2      	cmp	r2, r4
 8004954:	d0f7      	beq.n	8004946 <__mdiff+0x22>
 8004956:	d25e      	bcs.n	8004a16 <__mdiff+0xf2>
 8004958:	4633      	mov	r3, r6
 800495a:	462c      	mov	r4, r5
 800495c:	4646      	mov	r6, r8
 800495e:	4675      	mov	r5, lr
 8004960:	4698      	mov	r8, r3
 8004962:	2701      	movs	r7, #1
 8004964:	e005      	b.n	8004972 <__mdiff+0x4e>
 8004966:	db58      	blt.n	8004a1a <__mdiff+0xf6>
 8004968:	f106 0514 	add.w	r5, r6, #20
 800496c:	f108 0414 	add.w	r4, r8, #20
 8004970:	2700      	movs	r7, #0
 8004972:	6871      	ldr	r1, [r6, #4]
 8004974:	f7ff fd6e 	bl	8004454 <_Balloc>
 8004978:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800497c:	6936      	ldr	r6, [r6, #16]
 800497e:	60c7      	str	r7, [r0, #12]
 8004980:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8004984:	46a6      	mov	lr, r4
 8004986:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800498a:	f100 0414 	add.w	r4, r0, #20
 800498e:	2300      	movs	r3, #0
 8004990:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004994:	f855 8b04 	ldr.w	r8, [r5], #4
 8004998:	b28a      	uxth	r2, r1
 800499a:	fa13 f388 	uxtah	r3, r3, r8
 800499e:	0c09      	lsrs	r1, r1, #16
 80049a0:	1a9a      	subs	r2, r3, r2
 80049a2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80049a6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80049aa:	b292      	uxth	r2, r2
 80049ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80049b0:	45f4      	cmp	ip, lr
 80049b2:	f844 2b04 	str.w	r2, [r4], #4
 80049b6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80049ba:	d8e9      	bhi.n	8004990 <__mdiff+0x6c>
 80049bc:	42af      	cmp	r7, r5
 80049be:	d917      	bls.n	80049f0 <__mdiff+0xcc>
 80049c0:	46a4      	mov	ip, r4
 80049c2:	46ae      	mov	lr, r5
 80049c4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80049c8:	fa13 f382 	uxtah	r3, r3, r2
 80049cc:	1419      	asrs	r1, r3, #16
 80049ce:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 80049d8:	4577      	cmp	r7, lr
 80049da:	f84c 2b04 	str.w	r2, [ip], #4
 80049de:	ea4f 4321 	mov.w	r3, r1, asr #16
 80049e2:	d8ef      	bhi.n	80049c4 <__mdiff+0xa0>
 80049e4:	43ed      	mvns	r5, r5
 80049e6:	442f      	add	r7, r5
 80049e8:	f027 0703 	bic.w	r7, r7, #3
 80049ec:	3704      	adds	r7, #4
 80049ee:	443c      	add	r4, r7
 80049f0:	3c04      	subs	r4, #4
 80049f2:	b922      	cbnz	r2, 80049fe <__mdiff+0xda>
 80049f4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 80049f8:	3e01      	subs	r6, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0fa      	beq.n	80049f4 <__mdiff+0xd0>
 80049fe:	6106      	str	r6, [r0, #16]
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	2100      	movs	r1, #0
 8004a06:	f7ff fd25 	bl	8004454 <_Balloc>
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6102      	str	r2, [r0, #16]
 8004a10:	6143      	str	r3, [r0, #20]
 8004a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a16:	4674      	mov	r4, lr
 8004a18:	e7ab      	b.n	8004972 <__mdiff+0x4e>
 8004a1a:	4633      	mov	r3, r6
 8004a1c:	f106 0414 	add.w	r4, r6, #20
 8004a20:	f102 0514 	add.w	r5, r2, #20
 8004a24:	4616      	mov	r6, r2
 8004a26:	2701      	movs	r7, #1
 8004a28:	4698      	mov	r8, r3
 8004a2a:	e7a2      	b.n	8004972 <__mdiff+0x4e>

08004a2c <__ulp>:
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <__ulp+0x50>)
 8004a2e:	ee10 2a90 	vmov	r2, s1
 8004a32:	401a      	ands	r2, r3
 8004a34:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dd04      	ble.n	8004a46 <__ulp+0x1a>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	4619      	mov	r1, r3
 8004a40:	ec41 0b10 	vmov	d0, r0, r1
 8004a44:	4770      	bx	lr
 8004a46:	425b      	negs	r3, r3
 8004a48:	151b      	asrs	r3, r3, #20
 8004a4a:	2b13      	cmp	r3, #19
 8004a4c:	dd0d      	ble.n	8004a6a <__ulp+0x3e>
 8004a4e:	3b14      	subs	r3, #20
 8004a50:	2b1e      	cmp	r3, #30
 8004a52:	bfdd      	ittte	le
 8004a54:	f1c3 031f 	rsble	r3, r3, #31
 8004a58:	2201      	movle	r2, #1
 8004a5a:	fa02 f303 	lslle.w	r3, r2, r3
 8004a5e:	2301      	movgt	r3, #1
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	ec41 0b10 	vmov	d0, r0, r1
 8004a68:	4770      	bx	lr
 8004a6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a6e:	2000      	movs	r0, #0
 8004a70:	fa42 f103 	asr.w	r1, r2, r3
 8004a74:	ec41 0b10 	vmov	d0, r0, r1
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	7ff00000 	.word	0x7ff00000

08004a80 <__b2d>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	6904      	ldr	r4, [r0, #16]
 8004a84:	f100 0614 	add.w	r6, r0, #20
 8004a88:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004a8c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7ff fd9d 	bl	80045d0 <__hi0bits>
 8004a96:	f1c0 0320 	rsb	r3, r0, #32
 8004a9a:	280a      	cmp	r0, #10
 8004a9c:	600b      	str	r3, [r1, #0]
 8004a9e:	f1a4 0104 	sub.w	r1, r4, #4
 8004aa2:	dc17      	bgt.n	8004ad4 <__b2d+0x54>
 8004aa4:	428e      	cmp	r6, r1
 8004aa6:	f1c0 070b 	rsb	r7, r0, #11
 8004aaa:	bf38      	it	cc
 8004aac:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8004ab0:	fa25 fe07 	lsr.w	lr, r5, r7
 8004ab4:	f100 0015 	add.w	r0, r0, #21
 8004ab8:	f04e 537f 	orr.w	r3, lr, #1069547520	; 0x3fc00000
 8004abc:	bf34      	ite	cc
 8004abe:	40f9      	lsrcc	r1, r7
 8004ac0:	2100      	movcs	r1, #0
 8004ac2:	fa05 f000 	lsl.w	r0, r5, r0
 8004ac6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004aca:	ea40 0201 	orr.w	r2, r0, r1
 8004ace:	ec43 2b10 	vmov	d0, r2, r3
 8004ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ad4:	428e      	cmp	r6, r1
 8004ad6:	d21d      	bcs.n	8004b14 <__b2d+0x94>
 8004ad8:	380b      	subs	r0, #11
 8004ada:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8004ade:	d01c      	beq.n	8004b1a <__b2d+0x9a>
 8004ae0:	4085      	lsls	r5, r0
 8004ae2:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8004ae6:	f1c0 0c20 	rsb	ip, r0, #32
 8004aea:	f1a4 0e08 	sub.w	lr, r4, #8
 8004aee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004af2:	fa27 f10c 	lsr.w	r1, r7, ip
 8004af6:	4576      	cmp	r6, lr
 8004af8:	ea45 0301 	orr.w	r3, r5, r1
 8004afc:	d21e      	bcs.n	8004b3c <__b2d+0xbc>
 8004afe:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 8004b02:	fa07 f000 	lsl.w	r0, r7, r0
 8004b06:	fa21 f10c 	lsr.w	r1, r1, ip
 8004b0a:	4308      	orrs	r0, r1
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	ec43 2b10 	vmov	d0, r2, r3
 8004b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b14:	380b      	subs	r0, #11
 8004b16:	d108      	bne.n	8004b2a <__b2d+0xaa>
 8004b18:	4607      	mov	r7, r0
 8004b1a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8004b1e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b22:	463a      	mov	r2, r7
 8004b24:	ec43 2b10 	vmov	d0, r2, r3
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2a:	fa05 f000 	lsl.w	r0, r5, r0
 8004b2e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004b32:	2000      	movs	r0, #0
 8004b34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004b38:	4602      	mov	r2, r0
 8004b3a:	e7e8      	b.n	8004b0e <__b2d+0x8e>
 8004b3c:	fa07 f000 	lsl.w	r0, r7, r0
 8004b40:	4602      	mov	r2, r0
 8004b42:	e7e4      	b.n	8004b0e <__b2d+0x8e>

08004b44 <__d2b>:
 8004b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b48:	ec57 6b10 	vmov	r6, r7, d0
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	4688      	mov	r8, r1
 8004b50:	2101      	movs	r1, #1
 8004b52:	463c      	mov	r4, r7
 8004b54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004b58:	4617      	mov	r7, r2
 8004b5a:	f7ff fc7b 	bl	8004454 <_Balloc>
 8004b5e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004b62:	4681      	mov	r9, r0
 8004b64:	b10d      	cbz	r5, 8004b6a <__d2b+0x26>
 8004b66:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8004b6a:	9401      	str	r4, [sp, #4]
 8004b6c:	b31e      	cbz	r6, 8004bb6 <__d2b+0x72>
 8004b6e:	a802      	add	r0, sp, #8
 8004b70:	f840 6d08 	str.w	r6, [r0, #-8]!
 8004b74:	f7ff fd4c 	bl	8004610 <__lo0bits>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d134      	bne.n	8004be6 <__d2b+0xa2>
 8004b7c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8004b80:	f8c9 2014 	str.w	r2, [r9, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf0c      	ite	eq
 8004b88:	2101      	moveq	r1, #1
 8004b8a:	2102      	movne	r1, #2
 8004b8c:	f8c9 3018 	str.w	r3, [r9, #24]
 8004b90:	f8c9 1010 	str.w	r1, [r9, #16]
 8004b94:	b9dd      	cbnz	r5, 8004bce <__d2b+0x8a>
 8004b96:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8004b9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004b9e:	f8c8 0000 	str.w	r0, [r8]
 8004ba2:	6918      	ldr	r0, [r3, #16]
 8004ba4:	f7ff fd14 	bl	80045d0 <__hi0bits>
 8004ba8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004bac:	6038      	str	r0, [r7, #0]
 8004bae:	4648      	mov	r0, r9
 8004bb0:	b003      	add	sp, #12
 8004bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bb6:	a801      	add	r0, sp, #4
 8004bb8:	f7ff fd2a 	bl	8004610 <__lo0bits>
 8004bbc:	9b01      	ldr	r3, [sp, #4]
 8004bbe:	f8c9 3014 	str.w	r3, [r9, #20]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	3020      	adds	r0, #32
 8004bc6:	f8c9 1010 	str.w	r1, [r9, #16]
 8004bca:	2d00      	cmp	r5, #0
 8004bcc:	d0e3      	beq.n	8004b96 <__d2b+0x52>
 8004bce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bd2:	4405      	add	r5, r0
 8004bd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bd8:	f8c8 5000 	str.w	r5, [r8]
 8004bdc:	6038      	str	r0, [r7, #0]
 8004bde:	4648      	mov	r0, r9
 8004be0:	b003      	add	sp, #12
 8004be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004be6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8004bea:	f1c0 0220 	rsb	r2, r0, #32
 8004bee:	fa03 f202 	lsl.w	r2, r3, r2
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	40c3      	lsrs	r3, r0
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	f8c9 2014 	str.w	r2, [r9, #20]
 8004bfc:	e7c2      	b.n	8004b84 <__d2b+0x40>
 8004bfe:	bf00      	nop

08004c00 <__ratio>:
 8004c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c04:	b083      	sub	sp, #12
 8004c06:	4688      	mov	r8, r1
 8004c08:	4669      	mov	r1, sp
 8004c0a:	4681      	mov	r9, r0
 8004c0c:	f7ff ff38 	bl	8004a80 <__b2d>
 8004c10:	4640      	mov	r0, r8
 8004c12:	a901      	add	r1, sp, #4
 8004c14:	ec55 4b10 	vmov	r4, r5, d0
 8004c18:	f7ff ff32 	bl	8004a80 <__b2d>
 8004c1c:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8004c20:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004c24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004c28:	1acb      	subs	r3, r1, r3
 8004c2a:	1a80      	subs	r0, r0, r2
 8004c2c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	ec57 6b10 	vmov	r6, r7, d0
 8004c36:	dd0d      	ble.n	8004c54 <__ratio+0x54>
 8004c38:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8004c3c:	464d      	mov	r5, r9
 8004c3e:	4632      	mov	r2, r6
 8004c40:	463b      	mov	r3, r7
 8004c42:	4620      	mov	r0, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	f001 ff6f 	bl	8006b28 <__aeabi_ddiv>
 8004c4a:	ec41 0b10 	vmov	d0, r0, r1
 8004c4e:	b003      	add	sp, #12
 8004c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c54:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8004c58:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 8004c5c:	460f      	mov	r7, r1
 8004c5e:	e7ee      	b.n	8004c3e <__ratio+0x3e>

08004c60 <_mprec_log10>:
 8004c60:	2817      	cmp	r0, #23
 8004c62:	b5d0      	push	{r4, r6, r7, lr}
 8004c64:	4604      	mov	r4, r0
 8004c66:	dd0c      	ble.n	8004c82 <_mprec_log10+0x22>
 8004c68:	490a      	ldr	r1, [pc, #40]	; (8004c94 <_mprec_log10+0x34>)
 8004c6a:	4f0b      	ldr	r7, [pc, #44]	; (8004c98 <_mprec_log10+0x38>)
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	2600      	movs	r6, #0
 8004c70:	4632      	mov	r2, r6
 8004c72:	463b      	mov	r3, r7
 8004c74:	f001 fe2e 	bl	80068d4 <__aeabi_dmul>
 8004c78:	3c01      	subs	r4, #1
 8004c7a:	d1f9      	bne.n	8004c70 <_mprec_log10+0x10>
 8004c7c:	ec41 0b10 	vmov	d0, r0, r1
 8004c80:	bdd0      	pop	{r4, r6, r7, pc}
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <_mprec_log10+0x3c>)
 8004c84:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8004c88:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004c8c:	ec41 0b10 	vmov	d0, r0, r1
 8004c90:	bdd0      	pop	{r4, r6, r7, pc}
 8004c92:	bf00      	nop
 8004c94:	3ff00000 	.word	0x3ff00000
 8004c98:	40240000 	.word	0x40240000
 8004c9c:	0800c1e8 	.word	0x0800c1e8

08004ca0 <__copybits>:
 8004ca0:	b470      	push	{r4, r5, r6}
 8004ca2:	6914      	ldr	r4, [r2, #16]
 8004ca4:	1e4e      	subs	r6, r1, #1
 8004ca6:	f102 0314 	add.w	r3, r2, #20
 8004caa:	1176      	asrs	r6, r6, #5
 8004cac:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8004cb0:	3601      	adds	r6, #1
 8004cb2:	428b      	cmp	r3, r1
 8004cb4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004cb8:	d20c      	bcs.n	8004cd4 <__copybits+0x34>
 8004cba:	1f04      	subs	r4, r0, #4
 8004cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cc0:	f844 5f04 	str.w	r5, [r4, #4]!
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	d8f9      	bhi.n	8004cbc <__copybits+0x1c>
 8004cc8:	1a8b      	subs	r3, r1, r2
 8004cca:	3b15      	subs	r3, #21
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4418      	add	r0, r3
 8004cd4:	4286      	cmp	r6, r0
 8004cd6:	d904      	bls.n	8004ce2 <__copybits+0x42>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f840 3b04 	str.w	r3, [r0], #4
 8004cde:	4286      	cmp	r6, r0
 8004ce0:	d8fb      	bhi.n	8004cda <__copybits+0x3a>
 8004ce2:	bc70      	pop	{r4, r5, r6}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <__any_on>:
 8004ce8:	6903      	ldr	r3, [r0, #16]
 8004cea:	114a      	asrs	r2, r1, #5
 8004cec:	4293      	cmp	r3, r2
 8004cee:	b410      	push	{r4}
 8004cf0:	f100 0414 	add.w	r4, r0, #20
 8004cf4:	da10      	bge.n	8004d18 <__any_on+0x30>
 8004cf6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cfa:	429c      	cmp	r4, r3
 8004cfc:	d221      	bcs.n	8004d42 <__any_on+0x5a>
 8004cfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8004d02:	3b04      	subs	r3, #4
 8004d04:	b118      	cbz	r0, 8004d0e <__any_on+0x26>
 8004d06:	e015      	b.n	8004d34 <__any_on+0x4c>
 8004d08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004d0c:	b992      	cbnz	r2, 8004d34 <__any_on+0x4c>
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d3fa      	bcc.n	8004d08 <__any_on+0x20>
 8004d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	dd10      	ble.n	8004d3c <__any_on+0x54>
 8004d1a:	f011 011f 	ands.w	r1, r1, #31
 8004d1e:	d00d      	beq.n	8004d3c <__any_on+0x54>
 8004d20:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 8004d24:	fa20 f301 	lsr.w	r3, r0, r1
 8004d28:	fa03 f101 	lsl.w	r1, r3, r1
 8004d2c:	4288      	cmp	r0, r1
 8004d2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d32:	d0e2      	beq.n	8004cfa <__any_on+0x12>
 8004d34:	2001      	movs	r0, #1
 8004d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004d40:	e7db      	b.n	8004cfa <__any_on+0x12>
 8004d42:	2000      	movs	r0, #0
 8004d44:	e7e5      	b.n	8004d12 <__any_on+0x2a>
 8004d46:	bf00      	nop

08004d48 <_putc_r>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	4606      	mov	r6, r0
 8004d50:	b118      	cbz	r0, 8004d5a <_putc_r+0x12>
 8004d52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d54:	b90b      	cbnz	r3, 8004d5a <_putc_r+0x12>
 8004d56:	f7fe fb9f 	bl	8003498 <__sinit>
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	60a3      	str	r3, [r4, #8]
 8004d62:	db05      	blt.n	8004d70 <_putc_r+0x28>
 8004d64:	b2e8      	uxtb	r0, r5
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	701d      	strb	r5, [r3, #0]
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	69a2      	ldr	r2, [r4, #24]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	db02      	blt.n	8004d7c <_putc_r+0x34>
 8004d76:	b2e8      	uxtb	r0, r5
 8004d78:	280a      	cmp	r0, #10
 8004d7a:	d1f4      	bne.n	8004d66 <_putc_r+0x1e>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4630      	mov	r0, r6
 8004d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d86:	f001 ba15 	b.w	80061b4 <__swbuf_r>
 8004d8a:	bf00      	nop

08004d8c <putc>:
 8004d8c:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <putc+0x48>)
 8004d8e:	b570      	push	{r4, r5, r6, lr}
 8004d90:	681d      	ldr	r5, [r3, #0]
 8004d92:	4606      	mov	r6, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	b125      	cbz	r5, 8004da2 <putc+0x16>
 8004d98:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d9a:	b913      	cbnz	r3, 8004da2 <putc+0x16>
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f7fe fb7b 	bl	8003498 <__sinit>
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	60a3      	str	r3, [r4, #8]
 8004daa:	db05      	blt.n	8004db8 <putc+0x2c>
 8004dac:	b2f0      	uxtb	r0, r6
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	6022      	str	r2, [r4, #0]
 8004db4:	701e      	strb	r6, [r3, #0]
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	69a2      	ldr	r2, [r4, #24]
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	db02      	blt.n	8004dc4 <putc+0x38>
 8004dbe:	b2f0      	uxtb	r0, r6
 8004dc0:	280a      	cmp	r0, #10
 8004dc2:	d1f4      	bne.n	8004dae <putc+0x22>
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dce:	f001 b9f1 	b.w	80061b4 <__swbuf_r>
 8004dd2:	bf00      	nop
 8004dd4:	20000008 	.word	0x20000008

08004dd8 <_realloc_r>:
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	f000 8095 	beq.w	8004f08 <_realloc_r+0x130>
 8004dde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de2:	460d      	mov	r5, r1
 8004de4:	4616      	mov	r6, r2
 8004de6:	b083      	sub	sp, #12
 8004de8:	4680      	mov	r8, r0
 8004dea:	f106 070b 	add.w	r7, r6, #11
 8004dee:	f7ff fb2d 	bl	800444c <__malloc_lock>
 8004df2:	f855 ec04 	ldr.w	lr, [r5, #-4]
 8004df6:	2f16      	cmp	r7, #22
 8004df8:	f02e 0403 	bic.w	r4, lr, #3
 8004dfc:	f1a5 0908 	sub.w	r9, r5, #8
 8004e00:	d83c      	bhi.n	8004e7c <_realloc_r+0xa4>
 8004e02:	2210      	movs	r2, #16
 8004e04:	4617      	mov	r7, r2
 8004e06:	42be      	cmp	r6, r7
 8004e08:	d83d      	bhi.n	8004e86 <_realloc_r+0xae>
 8004e0a:	4294      	cmp	r4, r2
 8004e0c:	da43      	bge.n	8004e96 <_realloc_r+0xbe>
 8004e0e:	4bc4      	ldr	r3, [pc, #784]	; (8005120 <_realloc_r+0x348>)
 8004e10:	6899      	ldr	r1, [r3, #8]
 8004e12:	eb09 0004 	add.w	r0, r9, r4
 8004e16:	4288      	cmp	r0, r1
 8004e18:	f000 80b4 	beq.w	8004f84 <_realloc_r+0x1ac>
 8004e1c:	6843      	ldr	r3, [r0, #4]
 8004e1e:	f023 0101 	bic.w	r1, r3, #1
 8004e22:	4401      	add	r1, r0
 8004e24:	6849      	ldr	r1, [r1, #4]
 8004e26:	07c9      	lsls	r1, r1, #31
 8004e28:	d54c      	bpl.n	8004ec4 <_realloc_r+0xec>
 8004e2a:	f01e 0f01 	tst.w	lr, #1
 8004e2e:	f000 809b 	beq.w	8004f68 <_realloc_r+0x190>
 8004e32:	4631      	mov	r1, r6
 8004e34:	4640      	mov	r0, r8
 8004e36:	f7fe ff0f 	bl	8003c58 <_malloc_r>
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d03a      	beq.n	8004eb6 <_realloc_r+0xde>
 8004e40:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	444b      	add	r3, r9
 8004e4a:	f1a0 0208 	sub.w	r2, r0, #8
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f000 8121 	beq.w	8005096 <_realloc_r+0x2be>
 8004e54:	1f22      	subs	r2, r4, #4
 8004e56:	2a24      	cmp	r2, #36	; 0x24
 8004e58:	f200 8107 	bhi.w	800506a <_realloc_r+0x292>
 8004e5c:	2a13      	cmp	r2, #19
 8004e5e:	f200 80db 	bhi.w	8005018 <_realloc_r+0x240>
 8004e62:	4603      	mov	r3, r0
 8004e64:	462a      	mov	r2, r5
 8004e66:	6811      	ldr	r1, [r2, #0]
 8004e68:	6019      	str	r1, [r3, #0]
 8004e6a:	6851      	ldr	r1, [r2, #4]
 8004e6c:	6059      	str	r1, [r3, #4]
 8004e6e:	6892      	ldr	r2, [r2, #8]
 8004e70:	609a      	str	r2, [r3, #8]
 8004e72:	4629      	mov	r1, r5
 8004e74:	4640      	mov	r0, r8
 8004e76:	f7fe fb7f 	bl	8003578 <_free_r>
 8004e7a:	e01c      	b.n	8004eb6 <_realloc_r+0xde>
 8004e7c:	f027 0707 	bic.w	r7, r7, #7
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	463a      	mov	r2, r7
 8004e84:	dabf      	bge.n	8004e06 <_realloc_r+0x2e>
 8004e86:	2600      	movs	r6, #0
 8004e88:	230c      	movs	r3, #12
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f8c8 3000 	str.w	r3, [r8]
 8004e90:	b003      	add	sp, #12
 8004e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e96:	462e      	mov	r6, r5
 8004e98:	1be3      	subs	r3, r4, r7
 8004e9a:	2b0f      	cmp	r3, #15
 8004e9c:	d81e      	bhi.n	8004edc <_realloc_r+0x104>
 8004e9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	4323      	orrs	r3, r4
 8004ea8:	444c      	add	r4, r9
 8004eaa:	f8c9 3004 	str.w	r3, [r9, #4]
 8004eae:	6863      	ldr	r3, [r4, #4]
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff faca 	bl	8004450 <__malloc_unlock>
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	b003      	add	sp, #12
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	f023 0303 	bic.w	r3, r3, #3
 8004ec8:	18e1      	adds	r1, r4, r3
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	db1f      	blt.n	8004f0e <_realloc_r+0x136>
 8004ece:	68c3      	ldr	r3, [r0, #12]
 8004ed0:	6882      	ldr	r2, [r0, #8]
 8004ed2:	462e      	mov	r6, r5
 8004ed4:	60d3      	str	r3, [r2, #12]
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	e7dd      	b.n	8004e98 <_realloc_r+0xc0>
 8004edc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8004ee0:	eb09 0107 	add.w	r1, r9, r7
 8004ee4:	f002 0201 	and.w	r2, r2, #1
 8004ee8:	444c      	add	r4, r9
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	4317      	orrs	r7, r2
 8004ef0:	f8c9 7004 	str.w	r7, [r9, #4]
 8004ef4:	604b      	str	r3, [r1, #4]
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	3108      	adds	r1, #8
 8004efe:	6063      	str	r3, [r4, #4]
 8004f00:	4640      	mov	r0, r8
 8004f02:	f7fe fb39 	bl	8003578 <_free_r>
 8004f06:	e7d6      	b.n	8004eb6 <_realloc_r+0xde>
 8004f08:	4611      	mov	r1, r2
 8004f0a:	f7fe bea5 	b.w	8003c58 <_malloc_r>
 8004f0e:	f01e 0f01 	tst.w	lr, #1
 8004f12:	d18e      	bne.n	8004e32 <_realloc_r+0x5a>
 8004f14:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8004f18:	eba9 0a01 	sub.w	sl, r9, r1
 8004f1c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004f20:	f021 0103 	bic.w	r1, r1, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	4423      	add	r3, r4
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	db25      	blt.n	8004f78 <_realloc_r+0x1a0>
 8004f2c:	68c2      	ldr	r2, [r0, #12]
 8004f2e:	6881      	ldr	r1, [r0, #8]
 8004f30:	4656      	mov	r6, sl
 8004f32:	60ca      	str	r2, [r1, #12]
 8004f34:	6091      	str	r1, [r2, #8]
 8004f36:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004f3a:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8004f3e:	1f22      	subs	r2, r4, #4
 8004f40:	2a24      	cmp	r2, #36	; 0x24
 8004f42:	60c1      	str	r1, [r0, #12]
 8004f44:	6088      	str	r0, [r1, #8]
 8004f46:	f200 8094 	bhi.w	8005072 <_realloc_r+0x29a>
 8004f4a:	2a13      	cmp	r2, #19
 8004f4c:	d96f      	bls.n	800502e <_realloc_r+0x256>
 8004f4e:	6829      	ldr	r1, [r5, #0]
 8004f50:	f8ca 1008 	str.w	r1, [sl, #8]
 8004f54:	6869      	ldr	r1, [r5, #4]
 8004f56:	f8ca 100c 	str.w	r1, [sl, #12]
 8004f5a:	2a1b      	cmp	r2, #27
 8004f5c:	f200 80a2 	bhi.w	80050a4 <_realloc_r+0x2cc>
 8004f60:	3508      	adds	r5, #8
 8004f62:	f10a 0210 	add.w	r2, sl, #16
 8004f66:	e063      	b.n	8005030 <_realloc_r+0x258>
 8004f68:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8004f6c:	eba9 0a03 	sub.w	sl, r9, r3
 8004f70:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004f74:	f021 0103 	bic.w	r1, r1, #3
 8004f78:	1863      	adds	r3, r4, r1
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	f6ff af59 	blt.w	8004e32 <_realloc_r+0x5a>
 8004f80:	4656      	mov	r6, sl
 8004f82:	e7d8      	b.n	8004f36 <_realloc_r+0x15e>
 8004f84:	6841      	ldr	r1, [r0, #4]
 8004f86:	f021 0b03 	bic.w	fp, r1, #3
 8004f8a:	44a3      	add	fp, r4
 8004f8c:	f107 0010 	add.w	r0, r7, #16
 8004f90:	4583      	cmp	fp, r0
 8004f92:	da56      	bge.n	8005042 <_realloc_r+0x26a>
 8004f94:	f01e 0f01 	tst.w	lr, #1
 8004f98:	f47f af4b 	bne.w	8004e32 <_realloc_r+0x5a>
 8004f9c:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8004fa0:	eba9 0a01 	sub.w	sl, r9, r1
 8004fa4:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004fa8:	f021 0103 	bic.w	r1, r1, #3
 8004fac:	448b      	add	fp, r1
 8004fae:	4558      	cmp	r0, fp
 8004fb0:	dce2      	bgt.n	8004f78 <_realloc_r+0x1a0>
 8004fb2:	4656      	mov	r6, sl
 8004fb4:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004fb8:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8004fbc:	1f22      	subs	r2, r4, #4
 8004fbe:	2a24      	cmp	r2, #36	; 0x24
 8004fc0:	60c1      	str	r1, [r0, #12]
 8004fc2:	6088      	str	r0, [r1, #8]
 8004fc4:	f200 808f 	bhi.w	80050e6 <_realloc_r+0x30e>
 8004fc8:	2a13      	cmp	r2, #19
 8004fca:	f240 808a 	bls.w	80050e2 <_realloc_r+0x30a>
 8004fce:	6829      	ldr	r1, [r5, #0]
 8004fd0:	f8ca 1008 	str.w	r1, [sl, #8]
 8004fd4:	6869      	ldr	r1, [r5, #4]
 8004fd6:	f8ca 100c 	str.w	r1, [sl, #12]
 8004fda:	2a1b      	cmp	r2, #27
 8004fdc:	f200 808a 	bhi.w	80050f4 <_realloc_r+0x31c>
 8004fe0:	3508      	adds	r5, #8
 8004fe2:	f10a 0210 	add.w	r2, sl, #16
 8004fe6:	6829      	ldr	r1, [r5, #0]
 8004fe8:	6011      	str	r1, [r2, #0]
 8004fea:	6869      	ldr	r1, [r5, #4]
 8004fec:	6051      	str	r1, [r2, #4]
 8004fee:	68a9      	ldr	r1, [r5, #8]
 8004ff0:	6091      	str	r1, [r2, #8]
 8004ff2:	eb0a 0107 	add.w	r1, sl, r7
 8004ff6:	ebab 0207 	sub.w	r2, fp, r7
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	6099      	str	r1, [r3, #8]
 8005000:	604a      	str	r2, [r1, #4]
 8005002:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	431f      	orrs	r7, r3
 800500c:	4640      	mov	r0, r8
 800500e:	f8ca 7004 	str.w	r7, [sl, #4]
 8005012:	f7ff fa1d 	bl	8004450 <__malloc_unlock>
 8005016:	e751      	b.n	8004ebc <_realloc_r+0xe4>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	6003      	str	r3, [r0, #0]
 800501c:	686b      	ldr	r3, [r5, #4]
 800501e:	6043      	str	r3, [r0, #4]
 8005020:	2a1b      	cmp	r2, #27
 8005022:	d82d      	bhi.n	8005080 <_realloc_r+0x2a8>
 8005024:	f100 0308 	add.w	r3, r0, #8
 8005028:	f105 0208 	add.w	r2, r5, #8
 800502c:	e71b      	b.n	8004e66 <_realloc_r+0x8e>
 800502e:	4632      	mov	r2, r6
 8005030:	6829      	ldr	r1, [r5, #0]
 8005032:	6011      	str	r1, [r2, #0]
 8005034:	6869      	ldr	r1, [r5, #4]
 8005036:	6051      	str	r1, [r2, #4]
 8005038:	68a9      	ldr	r1, [r5, #8]
 800503a:	6091      	str	r1, [r2, #8]
 800503c:	461c      	mov	r4, r3
 800503e:	46d1      	mov	r9, sl
 8005040:	e72a      	b.n	8004e98 <_realloc_r+0xc0>
 8005042:	eb09 0107 	add.w	r1, r9, r7
 8005046:	ebab 0b07 	sub.w	fp, fp, r7
 800504a:	f04b 0201 	orr.w	r2, fp, #1
 800504e:	6099      	str	r1, [r3, #8]
 8005050:	604a      	str	r2, [r1, #4]
 8005052:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	431f      	orrs	r7, r3
 800505c:	4640      	mov	r0, r8
 800505e:	f845 7c04 	str.w	r7, [r5, #-4]
 8005062:	f7ff f9f5 	bl	8004450 <__malloc_unlock>
 8005066:	462e      	mov	r6, r5
 8005068:	e728      	b.n	8004ebc <_realloc_r+0xe4>
 800506a:	4629      	mov	r1, r5
 800506c:	f7ff f98a 	bl	8004384 <memmove>
 8005070:	e6ff      	b.n	8004e72 <_realloc_r+0x9a>
 8005072:	4629      	mov	r1, r5
 8005074:	4630      	mov	r0, r6
 8005076:	461c      	mov	r4, r3
 8005078:	46d1      	mov	r9, sl
 800507a:	f7ff f983 	bl	8004384 <memmove>
 800507e:	e70b      	b.n	8004e98 <_realloc_r+0xc0>
 8005080:	68ab      	ldr	r3, [r5, #8]
 8005082:	6083      	str	r3, [r0, #8]
 8005084:	68eb      	ldr	r3, [r5, #12]
 8005086:	60c3      	str	r3, [r0, #12]
 8005088:	2a24      	cmp	r2, #36	; 0x24
 800508a:	d017      	beq.n	80050bc <_realloc_r+0x2e4>
 800508c:	f100 0310 	add.w	r3, r0, #16
 8005090:	f105 0210 	add.w	r2, r5, #16
 8005094:	e6e7      	b.n	8004e66 <_realloc_r+0x8e>
 8005096:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	441c      	add	r4, r3
 80050a0:	462e      	mov	r6, r5
 80050a2:	e6f9      	b.n	8004e98 <_realloc_r+0xc0>
 80050a4:	68a9      	ldr	r1, [r5, #8]
 80050a6:	f8ca 1010 	str.w	r1, [sl, #16]
 80050aa:	68e9      	ldr	r1, [r5, #12]
 80050ac:	f8ca 1014 	str.w	r1, [sl, #20]
 80050b0:	2a24      	cmp	r2, #36	; 0x24
 80050b2:	d00c      	beq.n	80050ce <_realloc_r+0x2f6>
 80050b4:	3510      	adds	r5, #16
 80050b6:	f10a 0218 	add.w	r2, sl, #24
 80050ba:	e7b9      	b.n	8005030 <_realloc_r+0x258>
 80050bc:	692b      	ldr	r3, [r5, #16]
 80050be:	6103      	str	r3, [r0, #16]
 80050c0:	696b      	ldr	r3, [r5, #20]
 80050c2:	6143      	str	r3, [r0, #20]
 80050c4:	f105 0218 	add.w	r2, r5, #24
 80050c8:	f100 0318 	add.w	r3, r0, #24
 80050cc:	e6cb      	b.n	8004e66 <_realloc_r+0x8e>
 80050ce:	692a      	ldr	r2, [r5, #16]
 80050d0:	f8ca 2018 	str.w	r2, [sl, #24]
 80050d4:	696a      	ldr	r2, [r5, #20]
 80050d6:	f8ca 201c 	str.w	r2, [sl, #28]
 80050da:	3518      	adds	r5, #24
 80050dc:	f10a 0220 	add.w	r2, sl, #32
 80050e0:	e7a6      	b.n	8005030 <_realloc_r+0x258>
 80050e2:	4632      	mov	r2, r6
 80050e4:	e77f      	b.n	8004fe6 <_realloc_r+0x20e>
 80050e6:	4629      	mov	r1, r5
 80050e8:	4630      	mov	r0, r6
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	f7ff f94a 	bl	8004384 <memmove>
 80050f0:	9b01      	ldr	r3, [sp, #4]
 80050f2:	e77e      	b.n	8004ff2 <_realloc_r+0x21a>
 80050f4:	68a9      	ldr	r1, [r5, #8]
 80050f6:	f8ca 1010 	str.w	r1, [sl, #16]
 80050fa:	68e9      	ldr	r1, [r5, #12]
 80050fc:	f8ca 1014 	str.w	r1, [sl, #20]
 8005100:	2a24      	cmp	r2, #36	; 0x24
 8005102:	d003      	beq.n	800510c <_realloc_r+0x334>
 8005104:	3510      	adds	r5, #16
 8005106:	f10a 0218 	add.w	r2, sl, #24
 800510a:	e76c      	b.n	8004fe6 <_realloc_r+0x20e>
 800510c:	692a      	ldr	r2, [r5, #16]
 800510e:	f8ca 2018 	str.w	r2, [sl, #24]
 8005112:	696a      	ldr	r2, [r5, #20]
 8005114:	f8ca 201c 	str.w	r2, [sl, #28]
 8005118:	3518      	adds	r5, #24
 800511a:	f10a 0220 	add.w	r2, sl, #32
 800511e:	e762      	b.n	8004fe6 <_realloc_r+0x20e>
 8005120:	200004b4 	.word	0x200004b4

08005124 <__sread>:
 8005124:	b510      	push	{r4, lr}
 8005126:	460c      	mov	r4, r1
 8005128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512c:	f002 fc28 	bl	8007980 <_read_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	db03      	blt.n	800513c <__sread+0x18>
 8005134:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005136:	4403      	add	r3, r0
 8005138:	6523      	str	r3, [r4, #80]	; 0x50
 800513a:	bd10      	pop	{r4, pc}
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop

08005148 <__seofread>:
 8005148:	2000      	movs	r0, #0
 800514a:	4770      	bx	lr

0800514c <__swrite>:
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	4616      	mov	r6, r2
 8005152:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005156:	461f      	mov	r7, r3
 8005158:	05d3      	lsls	r3, r2, #23
 800515a:	460c      	mov	r4, r1
 800515c:	4605      	mov	r5, r0
 800515e:	d507      	bpl.n	8005170 <__swrite+0x24>
 8005160:	2200      	movs	r2, #0
 8005162:	2302      	movs	r3, #2
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	f002 fb42 	bl	80077f0 <_lseek_r>
 800516c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005174:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005178:	81a2      	strh	r2, [r4, #12]
 800517a:	463b      	mov	r3, r7
 800517c:	4632      	mov	r2, r6
 800517e:	4628      	mov	r0, r5
 8005180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	f002 bc86 	b.w	8007a94 <_write_r>

08005188 <__sseek>:
 8005188:	b510      	push	{r4, lr}
 800518a:	460c      	mov	r4, r1
 800518c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005190:	f002 fb2e 	bl	80077f0 <_lseek_r>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	1c42      	adds	r2, r0, #1
 8005198:	bf0e      	itee	eq
 800519a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800519e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051a2:	6520      	strne	r0, [r4, #80]	; 0x50
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <__sclose>:
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	f002 bb16 	b.w	80077dc <_close_r>
	...
 80051c0:	eba2 0003 	sub.w	r0, r2, r3
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop

080051c8 <strcmp>:
 80051c8:	7802      	ldrb	r2, [r0, #0]
 80051ca:	780b      	ldrb	r3, [r1, #0]
 80051cc:	2a01      	cmp	r2, #1
 80051ce:	bf28      	it	cs
 80051d0:	429a      	cmpcs	r2, r3
 80051d2:	d1f5      	bne.n	80051c0 <__sclose+0x18>
 80051d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80051d8:	ea40 0401 	orr.w	r4, r0, r1
 80051dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80051e0:	f06f 0c00 	mvn.w	ip, #0
 80051e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80051e8:	b312      	cbz	r2, 8005230 <strcmp+0x68>
 80051ea:	ea80 0401 	eor.w	r4, r0, r1
 80051ee:	f014 0f07 	tst.w	r4, #7
 80051f2:	d16a      	bne.n	80052ca <strcmp+0x102>
 80051f4:	f000 0407 	and.w	r4, r0, #7
 80051f8:	f020 0007 	bic.w	r0, r0, #7
 80051fc:	f004 0503 	and.w	r5, r4, #3
 8005200:	f021 0107 	bic.w	r1, r1, #7
 8005204:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8005208:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 800520c:	f014 0f04 	tst.w	r4, #4
 8005210:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005214:	fa0c f405 	lsl.w	r4, ip, r5
 8005218:	ea62 0204 	orn	r2, r2, r4
 800521c:	ea66 0604 	orn	r6, r6, r4
 8005220:	d00a      	beq.n	8005238 <strcmp+0x70>
 8005222:	ea63 0304 	orn	r3, r3, r4
 8005226:	4662      	mov	r2, ip
 8005228:	ea67 0704 	orn	r7, r7, r4
 800522c:	4666      	mov	r6, ip
 800522e:	e003      	b.n	8005238 <strcmp+0x70>
 8005230:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8005234:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8005238:	fa82 f54c 	uadd8	r5, r2, ip
 800523c:	ea82 0406 	eor.w	r4, r2, r6
 8005240:	faa4 f48c 	sel	r4, r4, ip
 8005244:	bb6c      	cbnz	r4, 80052a2 <strcmp+0xda>
 8005246:	fa83 f54c 	uadd8	r5, r3, ip
 800524a:	ea83 0507 	eor.w	r5, r3, r7
 800524e:	faa5 f58c 	sel	r5, r5, ip
 8005252:	b995      	cbnz	r5, 800527a <strcmp+0xb2>
 8005254:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8005258:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800525c:	fa82 f54c 	uadd8	r5, r2, ip
 8005260:	ea82 0406 	eor.w	r4, r2, r6
 8005264:	faa4 f48c 	sel	r4, r4, ip
 8005268:	fa83 f54c 	uadd8	r5, r3, ip
 800526c:	ea83 0507 	eor.w	r5, r3, r7
 8005270:	faa5 f58c 	sel	r5, r5, ip
 8005274:	4325      	orrs	r5, r4
 8005276:	d0db      	beq.n	8005230 <strcmp+0x68>
 8005278:	b99c      	cbnz	r4, 80052a2 <strcmp+0xda>
 800527a:	ba2d      	rev	r5, r5
 800527c:	fab5 f485 	clz	r4, r5
 8005280:	f024 0407 	bic.w	r4, r4, #7
 8005284:	fa27 f104 	lsr.w	r1, r7, r4
 8005288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800528c:	fa23 f304 	lsr.w	r3, r3, r4
 8005290:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005294:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005298:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800529c:	eba0 0001 	sub.w	r0, r0, r1
 80052a0:	4770      	bx	lr
 80052a2:	ba24      	rev	r4, r4
 80052a4:	fab4 f484 	clz	r4, r4
 80052a8:	f024 0407 	bic.w	r4, r4, #7
 80052ac:	fa26 f104 	lsr.w	r1, r6, r4
 80052b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052b4:	fa22 f204 	lsr.w	r2, r2, r4
 80052b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80052bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80052c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80052c4:	eba0 0001 	sub.w	r0, r0, r1
 80052c8:	4770      	bx	lr
 80052ca:	f014 0f03 	tst.w	r4, #3
 80052ce:	d13c      	bne.n	800534a <strcmp+0x182>
 80052d0:	f010 0403 	ands.w	r4, r0, #3
 80052d4:	d128      	bne.n	8005328 <strcmp+0x160>
 80052d6:	f850 2b08 	ldr.w	r2, [r0], #8
 80052da:	f851 3b08 	ldr.w	r3, [r1], #8
 80052de:	fa82 f54c 	uadd8	r5, r2, ip
 80052e2:	ea82 0503 	eor.w	r5, r2, r3
 80052e6:	faa5 f58c 	sel	r5, r5, ip
 80052ea:	b95d      	cbnz	r5, 8005304 <strcmp+0x13c>
 80052ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80052f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052f4:	fa82 f54c 	uadd8	r5, r2, ip
 80052f8:	ea82 0503 	eor.w	r5, r2, r3
 80052fc:	faa5 f58c 	sel	r5, r5, ip
 8005300:	2d00      	cmp	r5, #0
 8005302:	d0e8      	beq.n	80052d6 <strcmp+0x10e>
 8005304:	ba2d      	rev	r5, r5
 8005306:	fab5 f485 	clz	r4, r5
 800530a:	f024 0407 	bic.w	r4, r4, #7
 800530e:	fa23 f104 	lsr.w	r1, r3, r4
 8005312:	fa22 f204 	lsr.w	r2, r2, r4
 8005316:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800531a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800531e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005322:	eba0 0001 	sub.w	r0, r0, r1
 8005326:	4770      	bx	lr
 8005328:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800532c:	f020 0003 	bic.w	r0, r0, #3
 8005330:	f850 2b08 	ldr.w	r2, [r0], #8
 8005334:	f021 0103 	bic.w	r1, r1, #3
 8005338:	f851 3b08 	ldr.w	r3, [r1], #8
 800533c:	fa0c f404 	lsl.w	r4, ip, r4
 8005340:	ea62 0204 	orn	r2, r2, r4
 8005344:	ea63 0304 	orn	r3, r3, r4
 8005348:	e7c9      	b.n	80052de <strcmp+0x116>
 800534a:	f010 0403 	ands.w	r4, r0, #3
 800534e:	d01a      	beq.n	8005386 <strcmp+0x1be>
 8005350:	eba1 0104 	sub.w	r1, r1, r4
 8005354:	f020 0003 	bic.w	r0, r0, #3
 8005358:	07e4      	lsls	r4, r4, #31
 800535a:	f850 2b04 	ldr.w	r2, [r0], #4
 800535e:	d006      	beq.n	800536e <strcmp+0x1a6>
 8005360:	d20f      	bcs.n	8005382 <strcmp+0x1ba>
 8005362:	788b      	ldrb	r3, [r1, #2]
 8005364:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8005368:	1ae4      	subs	r4, r4, r3
 800536a:	d106      	bne.n	800537a <strcmp+0x1b2>
 800536c:	b12b      	cbz	r3, 800537a <strcmp+0x1b2>
 800536e:	78cb      	ldrb	r3, [r1, #3]
 8005370:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8005374:	1ae4      	subs	r4, r4, r3
 8005376:	d100      	bne.n	800537a <strcmp+0x1b2>
 8005378:	b91b      	cbnz	r3, 8005382 <strcmp+0x1ba>
 800537a:	4620      	mov	r0, r4
 800537c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8005380:	4770      	bx	lr
 8005382:	f101 0104 	add.w	r1, r1, #4
 8005386:	f850 2b04 	ldr.w	r2, [r0], #4
 800538a:	07cc      	lsls	r4, r1, #31
 800538c:	f021 0103 	bic.w	r1, r1, #3
 8005390:	f851 3b04 	ldr.w	r3, [r1], #4
 8005394:	d848      	bhi.n	8005428 <strcmp+0x260>
 8005396:	d224      	bcs.n	80053e2 <strcmp+0x21a>
 8005398:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800539c:	fa82 f54c 	uadd8	r5, r2, ip
 80053a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 80053a4:	faa5 f58c 	sel	r5, r5, ip
 80053a8:	d10a      	bne.n	80053c0 <strcmp+0x1f8>
 80053aa:	b965      	cbnz	r5, 80053c6 <strcmp+0x1fe>
 80053ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80053b0:	ea84 0402 	eor.w	r4, r4, r2
 80053b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 80053b8:	d10e      	bne.n	80053d8 <strcmp+0x210>
 80053ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80053be:	e7eb      	b.n	8005398 <strcmp+0x1d0>
 80053c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80053c4:	e055      	b.n	8005472 <strcmp+0x2aa>
 80053c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80053ca:	d14d      	bne.n	8005468 <strcmp+0x2a0>
 80053cc:	7808      	ldrb	r0, [r1, #0]
 80053ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80053d2:	f1c0 0000 	rsb	r0, r0, #0
 80053d6:	4770      	bx	lr
 80053d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80053dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80053e0:	e047      	b.n	8005472 <strcmp+0x2aa>
 80053e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80053e6:	fa82 f54c 	uadd8	r5, r2, ip
 80053ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80053ee:	faa5 f58c 	sel	r5, r5, ip
 80053f2:	d10a      	bne.n	800540a <strcmp+0x242>
 80053f4:	b965      	cbnz	r5, 8005410 <strcmp+0x248>
 80053f6:	f851 3b04 	ldr.w	r3, [r1], #4
 80053fa:	ea84 0402 	eor.w	r4, r4, r2
 80053fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8005402:	d10c      	bne.n	800541e <strcmp+0x256>
 8005404:	f850 2b04 	ldr.w	r2, [r0], #4
 8005408:	e7eb      	b.n	80053e2 <strcmp+0x21a>
 800540a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800540e:	e030      	b.n	8005472 <strcmp+0x2aa>
 8005410:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8005414:	d128      	bne.n	8005468 <strcmp+0x2a0>
 8005416:	880b      	ldrh	r3, [r1, #0]
 8005418:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800541c:	e029      	b.n	8005472 <strcmp+0x2aa>
 800541e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8005422:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8005426:	e024      	b.n	8005472 <strcmp+0x2aa>
 8005428:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800542c:	fa82 f54c 	uadd8	r5, r2, ip
 8005430:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8005434:	faa5 f58c 	sel	r5, r5, ip
 8005438:	d10a      	bne.n	8005450 <strcmp+0x288>
 800543a:	b965      	cbnz	r5, 8005456 <strcmp+0x28e>
 800543c:	f851 3b04 	ldr.w	r3, [r1], #4
 8005440:	ea84 0402 	eor.w	r4, r4, r2
 8005444:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8005448:	d109      	bne.n	800545e <strcmp+0x296>
 800544a:	f850 2b04 	ldr.w	r2, [r0], #4
 800544e:	e7eb      	b.n	8005428 <strcmp+0x260>
 8005450:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8005454:	e00d      	b.n	8005472 <strcmp+0x2aa>
 8005456:	f015 0fff 	tst.w	r5, #255	; 0xff
 800545a:	d105      	bne.n	8005468 <strcmp+0x2a0>
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8005462:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005466:	e004      	b.n	8005472 <strcmp+0x2aa>
 8005468:	f04f 0000 	mov.w	r0, #0
 800546c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005470:	4770      	bx	lr
 8005472:	ba12      	rev	r2, r2
 8005474:	ba1b      	rev	r3, r3
 8005476:	fa82 f44c 	uadd8	r4, r2, ip
 800547a:	ea82 0403 	eor.w	r4, r2, r3
 800547e:	faa4 f58c 	sel	r5, r4, ip
 8005482:	fab5 f485 	clz	r4, r5
 8005486:	fa02 f204 	lsl.w	r2, r2, r4
 800548a:	fa03 f304 	lsl.w	r3, r3, r4
 800548e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8005492:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8005496:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800549a:	4770      	bx	lr

0800549c <__sprint_r.part.0>:
 800549c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80054a2:	049c      	lsls	r4, r3, #18
 80054a4:	4693      	mov	fp, r2
 80054a6:	d52f      	bpl.n	8005508 <__sprint_r.part.0+0x6c>
 80054a8:	6893      	ldr	r3, [r2, #8]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	b353      	cbz	r3, 8005504 <__sprint_r.part.0+0x68>
 80054ae:	460e      	mov	r6, r1
 80054b0:	4607      	mov	r7, r0
 80054b2:	f102 0908 	add.w	r9, r2, #8
 80054b6:	e919 0420 	ldmdb	r9, {r5, sl}
 80054ba:	ea5f 089a 	movs.w	r8, sl, lsr #2
 80054be:	d017      	beq.n	80054f0 <__sprint_r.part.0+0x54>
 80054c0:	3d04      	subs	r5, #4
 80054c2:	2400      	movs	r4, #0
 80054c4:	e001      	b.n	80054ca <__sprint_r.part.0+0x2e>
 80054c6:	45a0      	cmp	r8, r4
 80054c8:	d010      	beq.n	80054ec <__sprint_r.part.0+0x50>
 80054ca:	4632      	mov	r2, r6
 80054cc:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80054d0:	4638      	mov	r0, r7
 80054d2:	f000 ff97 	bl	8006404 <_fputwc_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	f104 0401 	add.w	r4, r4, #1
 80054dc:	d1f3      	bne.n	80054c6 <__sprint_r.part.0+0x2a>
 80054de:	2300      	movs	r3, #0
 80054e0:	f8cb 3008 	str.w	r3, [fp, #8]
 80054e4:	f8cb 3004 	str.w	r3, [fp, #4]
 80054e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	f8db 3008 	ldr.w	r3, [fp, #8]
 80054f0:	f02a 0a03 	bic.w	sl, sl, #3
 80054f4:	eba3 030a 	sub.w	r3, r3, sl
 80054f8:	f8cb 3008 	str.w	r3, [fp, #8]
 80054fc:	f109 0908 	add.w	r9, r9, #8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1d8      	bne.n	80054b6 <__sprint_r.part.0+0x1a>
 8005504:	2000      	movs	r0, #0
 8005506:	e7ea      	b.n	80054de <__sprint_r.part.0+0x42>
 8005508:	f7fe f91c 	bl	8003744 <__sfvwrite_r>
 800550c:	2300      	movs	r3, #0
 800550e:	f8cb 3008 	str.w	r3, [fp, #8]
 8005512:	f8cb 3004 	str.w	r3, [fp, #4]
 8005516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551a:	bf00      	nop

0800551c <__sprint_r>:
 800551c:	6893      	ldr	r3, [r2, #8]
 800551e:	b103      	cbz	r3, 8005522 <__sprint_r+0x6>
 8005520:	e7bc      	b.n	800549c <__sprint_r.part.0>
 8005522:	b410      	push	{r4}
 8005524:	4618      	mov	r0, r3
 8005526:	6053      	str	r3, [r2, #4]
 8005528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop

08005530 <_vfiprintf_r>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	b0ad      	sub	sp, #180	; 0xb4
 8005536:	461d      	mov	r5, r3
 8005538:	9101      	str	r1, [sp, #4]
 800553a:	4691      	mov	r9, r2
 800553c:	9308      	str	r3, [sp, #32]
 800553e:	9006      	str	r0, [sp, #24]
 8005540:	b118      	cbz	r0, 800554a <_vfiprintf_r+0x1a>
 8005542:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80e0 	beq.w	800570a <_vfiprintf_r+0x1da>
 800554a:	9c01      	ldr	r4, [sp, #4]
 800554c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005550:	b281      	uxth	r1, r0
 8005552:	048b      	lsls	r3, r1, #18
 8005554:	d407      	bmi.n	8005566 <_vfiprintf_r+0x36>
 8005556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005558:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
 800555c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005560:	81a1      	strh	r1, [r4, #12]
 8005562:	6663      	str	r3, [r4, #100]	; 0x64
 8005564:	b289      	uxth	r1, r1
 8005566:	070f      	lsls	r7, r1, #28
 8005568:	f140 80b1 	bpl.w	80056ce <_vfiprintf_r+0x19e>
 800556c:	9b01      	ldr	r3, [sp, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 80ac 	beq.w	80056ce <_vfiprintf_r+0x19e>
 8005576:	f001 011a 	and.w	r1, r1, #26
 800557a:	290a      	cmp	r1, #10
 800557c:	f000 80b5 	beq.w	80056ea <_vfiprintf_r+0x1ba>
 8005580:	2300      	movs	r3, #0
 8005582:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8005586:	930b      	str	r3, [sp, #44]	; 0x2c
 8005588:	9311      	str	r3, [sp, #68]	; 0x44
 800558a:	9310      	str	r3, [sp, #64]	; 0x40
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8005592:	46da      	mov	sl, fp
 8005594:	f899 3000 	ldrb.w	r3, [r9]
 8005598:	464c      	mov	r4, r9
 800559a:	b1fb      	cbz	r3, 80055dc <_vfiprintf_r+0xac>
 800559c:	2b25      	cmp	r3, #37	; 0x25
 800559e:	d102      	bne.n	80055a6 <_vfiprintf_r+0x76>
 80055a0:	e01c      	b.n	80055dc <_vfiprintf_r+0xac>
 80055a2:	2b25      	cmp	r3, #37	; 0x25
 80055a4:	d003      	beq.n	80055ae <_vfiprintf_r+0x7e>
 80055a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f9      	bne.n	80055a2 <_vfiprintf_r+0x72>
 80055ae:	eba4 0509 	sub.w	r5, r4, r9
 80055b2:	b19d      	cbz	r5, 80055dc <_vfiprintf_r+0xac>
 80055b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055b8:	f8ca 9000 	str.w	r9, [sl]
 80055bc:	3301      	adds	r3, #1
 80055be:	442a      	add	r2, r5
 80055c0:	2b07      	cmp	r3, #7
 80055c2:	f8ca 5004 	str.w	r5, [sl, #4]
 80055c6:	9211      	str	r2, [sp, #68]	; 0x44
 80055c8:	9310      	str	r3, [sp, #64]	; 0x40
 80055ca:	dd7a      	ble.n	80056c2 <_vfiprintf_r+0x192>
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	f040 848f 	bne.w	8005ef0 <_vfiprintf_r+0x9c0>
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	9210      	str	r2, [sp, #64]	; 0x40
 80055d6:	442b      	add	r3, r5
 80055d8:	46da      	mov	sl, fp
 80055da:	9304      	str	r3, [sp, #16]
 80055dc:	7823      	ldrb	r3, [r4, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 83b1 	beq.w	8005d46 <_vfiprintf_r+0x816>
 80055e4:	2000      	movs	r0, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80055ee:	f104 0901 	add.w	r9, r4, #1
 80055f2:	7862      	ldrb	r2, [r4, #1]
 80055f4:	4605      	mov	r5, r0
 80055f6:	4606      	mov	r6, r0
 80055f8:	4603      	mov	r3, r0
 80055fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055fe:	f109 0901 	add.w	r9, r9, #1
 8005602:	f1a2 0120 	sub.w	r1, r2, #32
 8005606:	2958      	cmp	r1, #88	; 0x58
 8005608:	f200 830e 	bhi.w	8005c28 <_vfiprintf_r+0x6f8>
 800560c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005610:	030c0237 	.word	0x030c0237
 8005614:	02eb030c 	.word	0x02eb030c
 8005618:	030c030c 	.word	0x030c030c
 800561c:	030c030c 	.word	0x030c030c
 8005620:	030c030c 	.word	0x030c030c
 8005624:	02f0029e 	.word	0x02f0029e
 8005628:	0082030c 	.word	0x0082030c
 800562c:	030c0277 	.word	0x030c0277
 8005630:	01d401cf 	.word	0x01d401cf
 8005634:	01d401d4 	.word	0x01d401d4
 8005638:	01d401d4 	.word	0x01d401d4
 800563c:	01d401d4 	.word	0x01d401d4
 8005640:	01d401d4 	.word	0x01d401d4
 8005644:	030c030c 	.word	0x030c030c
 8005648:	030c030c 	.word	0x030c030c
 800564c:	030c030c 	.word	0x030c030c
 8005650:	030c030c 	.word	0x030c030c
 8005654:	030c030c 	.word	0x030c030c
 8005658:	030c023f 	.word	0x030c023f
 800565c:	030c030c 	.word	0x030c030c
 8005660:	030c030c 	.word	0x030c030c
 8005664:	030c030c 	.word	0x030c030c
 8005668:	030c030c 	.word	0x030c030c
 800566c:	0246030c 	.word	0x0246030c
 8005670:	030c030c 	.word	0x030c030c
 8005674:	030c030c 	.word	0x030c030c
 8005678:	024a030c 	.word	0x024a030c
 800567c:	030c030c 	.word	0x030c030c
 8005680:	030c0252 	.word	0x030c0252
 8005684:	030c030c 	.word	0x030c030c
 8005688:	030c030c 	.word	0x030c030c
 800568c:	030c030c 	.word	0x030c030c
 8005690:	030c030c 	.word	0x030c030c
 8005694:	01e2030c 	.word	0x01e2030c
 8005698:	030c01f6 	.word	0x030c01f6
 800569c:	030c030c 	.word	0x030c030c
 80056a0:	01f60307 	.word	0x01f60307
 80056a4:	030c030c 	.word	0x030c030c
 80056a8:	030c0291 	.word	0x030c0291
 80056ac:	008702f5 	.word	0x008702f5
 80056b0:	02c302b1 	.word	0x02c302b1
 80056b4:	02c8030c 	.word	0x02c8030c
 80056b8:	01bd030c 	.word	0x01bd030c
 80056bc:	030c030c 	.word	0x030c030c
 80056c0:	02aa      	.short	0x02aa
 80056c2:	f10a 0a08 	add.w	sl, sl, #8
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	442b      	add	r3, r5
 80056ca:	9304      	str	r3, [sp, #16]
 80056cc:	e786      	b.n	80055dc <_vfiprintf_r+0xac>
 80056ce:	9c01      	ldr	r4, [sp, #4]
 80056d0:	9806      	ldr	r0, [sp, #24]
 80056d2:	4621      	mov	r1, r4
 80056d4:	f7fc fcbc 	bl	8002050 <__swsetup_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f040 8340 	bne.w	8005d5e <_vfiprintf_r+0x82e>
 80056de:	89a1      	ldrh	r1, [r4, #12]
 80056e0:	f001 011a 	and.w	r1, r1, #26
 80056e4:	290a      	cmp	r1, #10
 80056e6:	f47f af4b 	bne.w	8005580 <_vfiprintf_r+0x50>
 80056ea:	9901      	ldr	r1, [sp, #4]
 80056ec:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f6ff af45 	blt.w	8005580 <_vfiprintf_r+0x50>
 80056f6:	462b      	mov	r3, r5
 80056f8:	464a      	mov	r2, r9
 80056fa:	9806      	ldr	r0, [sp, #24]
 80056fc:	f000 fd24 	bl	8006148 <__sbprintf>
 8005700:	9004      	str	r0, [sp, #16]
 8005702:	9804      	ldr	r0, [sp, #16]
 8005704:	b02d      	add	sp, #180	; 0xb4
 8005706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570a:	f7fd fec5 	bl	8003498 <__sinit>
 800570e:	e71c      	b.n	800554a <_vfiprintf_r+0x1a>
 8005710:	4276      	negs	r6, r6
 8005712:	9208      	str	r2, [sp, #32]
 8005714:	f043 0304 	orr.w	r3, r3, #4
 8005718:	f899 2000 	ldrb.w	r2, [r9]
 800571c:	e76f      	b.n	80055fe <_vfiprintf_r+0xce>
 800571e:	9607      	str	r6, [sp, #28]
 8005720:	f013 0220 	ands.w	r2, r3, #32
 8005724:	f040 845a 	bne.w	8005fdc <_vfiprintf_r+0xaac>
 8005728:	f013 0110 	ands.w	r1, r3, #16
 800572c:	f040 83f1 	bne.w	8005f12 <_vfiprintf_r+0x9e2>
 8005730:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8005734:	f000 83ed 	beq.w	8005f12 <_vfiprintf_r+0x9e2>
 8005738:	9808      	ldr	r0, [sp, #32]
 800573a:	460a      	mov	r2, r1
 800573c:	4601      	mov	r1, r0
 800573e:	3104      	adds	r1, #4
 8005740:	8806      	ldrh	r6, [r0, #0]
 8005742:	9108      	str	r1, [sp, #32]
 8005744:	2700      	movs	r7, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
 800574e:	2500      	movs	r5, #0
 8005750:	1c61      	adds	r1, r4, #1
 8005752:	f000 8175 	beq.w	8005a40 <_vfiprintf_r+0x510>
 8005756:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800575a:	9103      	str	r1, [sp, #12]
 800575c:	ea56 0107 	orrs.w	r1, r6, r7
 8005760:	f040 8173 	bne.w	8005a4a <_vfiprintf_r+0x51a>
 8005764:	2c00      	cmp	r4, #0
 8005766:	f040 8356 	bne.w	8005e16 <_vfiprintf_r+0x8e6>
 800576a:	2a00      	cmp	r2, #0
 800576c:	f040 83b2 	bne.w	8005ed4 <_vfiprintf_r+0x9a4>
 8005770:	f013 0301 	ands.w	r3, r3, #1
 8005774:	9305      	str	r3, [sp, #20]
 8005776:	f000 8447 	beq.w	8006008 <_vfiprintf_r+0xad8>
 800577a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800577e:	2330      	movs	r3, #48	; 0x30
 8005780:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005784:	9b05      	ldr	r3, [sp, #20]
 8005786:	42a3      	cmp	r3, r4
 8005788:	bfb8      	it	lt
 800578a:	4623      	movlt	r3, r4
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	b10d      	cbz	r5, 8005794 <_vfiprintf_r+0x264>
 8005790:	3301      	adds	r3, #1
 8005792:	9302      	str	r3, [sp, #8]
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	f013 0302 	ands.w	r3, r3, #2
 800579a:	9309      	str	r3, [sp, #36]	; 0x24
 800579c:	d002      	beq.n	80057a4 <_vfiprintf_r+0x274>
 800579e:	9b02      	ldr	r3, [sp, #8]
 80057a0:	3302      	adds	r3, #2
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	9b03      	ldr	r3, [sp, #12]
 80057a6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80057aa:	930a      	str	r3, [sp, #40]	; 0x28
 80057ac:	f040 8263 	bne.w	8005c76 <_vfiprintf_r+0x746>
 80057b0:	9b07      	ldr	r3, [sp, #28]
 80057b2:	9a02      	ldr	r2, [sp, #8]
 80057b4:	1a9d      	subs	r5, r3, r2
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	f340 825d 	ble.w	8005c76 <_vfiprintf_r+0x746>
 80057bc:	2d10      	cmp	r5, #16
 80057be:	f340 8477 	ble.w	80060b0 <_vfiprintf_r+0xb80>
 80057c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80057c6:	4eb9      	ldr	r6, [pc, #740]	; (8005aac <_vfiprintf_r+0x57c>)
 80057c8:	46d6      	mov	lr, sl
 80057ca:	2710      	movs	r7, #16
 80057cc:	46a2      	mov	sl, r4
 80057ce:	4619      	mov	r1, r3
 80057d0:	9c06      	ldr	r4, [sp, #24]
 80057d2:	e007      	b.n	80057e4 <_vfiprintf_r+0x2b4>
 80057d4:	f101 0c02 	add.w	ip, r1, #2
 80057d8:	f10e 0e08 	add.w	lr, lr, #8
 80057dc:	4601      	mov	r1, r0
 80057de:	3d10      	subs	r5, #16
 80057e0:	2d10      	cmp	r5, #16
 80057e2:	dd11      	ble.n	8005808 <_vfiprintf_r+0x2d8>
 80057e4:	1c48      	adds	r0, r1, #1
 80057e6:	3210      	adds	r2, #16
 80057e8:	2807      	cmp	r0, #7
 80057ea:	9211      	str	r2, [sp, #68]	; 0x44
 80057ec:	e88e 00c0 	stmia.w	lr, {r6, r7}
 80057f0:	9010      	str	r0, [sp, #64]	; 0x40
 80057f2:	ddef      	ble.n	80057d4 <_vfiprintf_r+0x2a4>
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	f040 8231 	bne.w	8005c5c <_vfiprintf_r+0x72c>
 80057fa:	3d10      	subs	r5, #16
 80057fc:	2d10      	cmp	r5, #16
 80057fe:	4611      	mov	r1, r2
 8005800:	f04f 0c01 	mov.w	ip, #1
 8005804:	46de      	mov	lr, fp
 8005806:	dced      	bgt.n	80057e4 <_vfiprintf_r+0x2b4>
 8005808:	4654      	mov	r4, sl
 800580a:	4661      	mov	r1, ip
 800580c:	46f2      	mov	sl, lr
 800580e:	442a      	add	r2, r5
 8005810:	2907      	cmp	r1, #7
 8005812:	9211      	str	r2, [sp, #68]	; 0x44
 8005814:	f8ca 6000 	str.w	r6, [sl]
 8005818:	f8ca 5004 	str.w	r5, [sl, #4]
 800581c:	9110      	str	r1, [sp, #64]	; 0x40
 800581e:	f300 82e6 	bgt.w	8005dee <_vfiprintf_r+0x8be>
 8005822:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 8005826:	f10a 0a08 	add.w	sl, sl, #8
 800582a:	1c48      	adds	r0, r1, #1
 800582c:	2d00      	cmp	r5, #0
 800582e:	f040 822a 	bne.w	8005c86 <_vfiprintf_r+0x756>
 8005832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8244 	beq.w	8005cc2 <_vfiprintf_r+0x792>
 800583a:	3202      	adds	r2, #2
 800583c:	a90e      	add	r1, sp, #56	; 0x38
 800583e:	2302      	movs	r3, #2
 8005840:	2807      	cmp	r0, #7
 8005842:	9211      	str	r2, [sp, #68]	; 0x44
 8005844:	9010      	str	r0, [sp, #64]	; 0x40
 8005846:	e88a 000a 	stmia.w	sl, {r1, r3}
 800584a:	f340 8236 	ble.w	8005cba <_vfiprintf_r+0x78a>
 800584e:	2a00      	cmp	r2, #0
 8005850:	f040 838b 	bne.w	8005f6a <_vfiprintf_r+0xa3a>
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	2b80      	cmp	r3, #128	; 0x80
 8005858:	f04f 0001 	mov.w	r0, #1
 800585c:	4611      	mov	r1, r2
 800585e:	46da      	mov	sl, fp
 8005860:	f040 8233 	bne.w	8005cca <_vfiprintf_r+0x79a>
 8005864:	9b07      	ldr	r3, [sp, #28]
 8005866:	9d02      	ldr	r5, [sp, #8]
 8005868:	1b5e      	subs	r6, r3, r5
 800586a:	2e00      	cmp	r6, #0
 800586c:	f340 822d 	ble.w	8005cca <_vfiprintf_r+0x79a>
 8005870:	2e10      	cmp	r6, #16
 8005872:	4d8f      	ldr	r5, [pc, #572]	; (8005ab0 <_vfiprintf_r+0x580>)
 8005874:	f340 842f 	ble.w	80060d6 <_vfiprintf_r+0xba6>
 8005878:	46d4      	mov	ip, sl
 800587a:	2710      	movs	r7, #16
 800587c:	46a2      	mov	sl, r4
 800587e:	9c06      	ldr	r4, [sp, #24]
 8005880:	e007      	b.n	8005892 <_vfiprintf_r+0x362>
 8005882:	f101 0e02 	add.w	lr, r1, #2
 8005886:	f10c 0c08 	add.w	ip, ip, #8
 800588a:	4601      	mov	r1, r0
 800588c:	3e10      	subs	r6, #16
 800588e:	2e10      	cmp	r6, #16
 8005890:	dd11      	ble.n	80058b6 <_vfiprintf_r+0x386>
 8005892:	1c48      	adds	r0, r1, #1
 8005894:	3210      	adds	r2, #16
 8005896:	2807      	cmp	r0, #7
 8005898:	9211      	str	r2, [sp, #68]	; 0x44
 800589a:	e88c 00a0 	stmia.w	ip, {r5, r7}
 800589e:	9010      	str	r0, [sp, #64]	; 0x40
 80058a0:	ddef      	ble.n	8005882 <_vfiprintf_r+0x352>
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	f040 8296 	bne.w	8005dd4 <_vfiprintf_r+0x8a4>
 80058a8:	3e10      	subs	r6, #16
 80058aa:	2e10      	cmp	r6, #16
 80058ac:	f04f 0e01 	mov.w	lr, #1
 80058b0:	4611      	mov	r1, r2
 80058b2:	46dc      	mov	ip, fp
 80058b4:	dced      	bgt.n	8005892 <_vfiprintf_r+0x362>
 80058b6:	4654      	mov	r4, sl
 80058b8:	46e2      	mov	sl, ip
 80058ba:	4432      	add	r2, r6
 80058bc:	f1be 0f07 	cmp.w	lr, #7
 80058c0:	9211      	str	r2, [sp, #68]	; 0x44
 80058c2:	e88a 0060 	stmia.w	sl, {r5, r6}
 80058c6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 80058ca:	f300 835b 	bgt.w	8005f84 <_vfiprintf_r+0xa54>
 80058ce:	9b05      	ldr	r3, [sp, #20]
 80058d0:	1ae4      	subs	r4, r4, r3
 80058d2:	2c00      	cmp	r4, #0
 80058d4:	f10a 0a08 	add.w	sl, sl, #8
 80058d8:	f10e 0001 	add.w	r0, lr, #1
 80058dc:	4671      	mov	r1, lr
 80058de:	f300 81f9 	bgt.w	8005cd4 <_vfiprintf_r+0x7a4>
 80058e2:	9905      	ldr	r1, [sp, #20]
 80058e4:	f8ca 8000 	str.w	r8, [sl]
 80058e8:	440a      	add	r2, r1
 80058ea:	2807      	cmp	r0, #7
 80058ec:	9211      	str	r2, [sp, #68]	; 0x44
 80058ee:	f8ca 1004 	str.w	r1, [sl, #4]
 80058f2:	9010      	str	r0, [sp, #64]	; 0x40
 80058f4:	f340 8255 	ble.w	8005da2 <_vfiprintf_r+0x872>
 80058f8:	2a00      	cmp	r2, #0
 80058fa:	f040 82ee 	bne.w	8005eda <_vfiprintf_r+0x9aa>
 80058fe:	9b03      	ldr	r3, [sp, #12]
 8005900:	9210      	str	r2, [sp, #64]	; 0x40
 8005902:	0758      	lsls	r0, r3, #29
 8005904:	d538      	bpl.n	8005978 <_vfiprintf_r+0x448>
 8005906:	9b07      	ldr	r3, [sp, #28]
 8005908:	9902      	ldr	r1, [sp, #8]
 800590a:	1a5c      	subs	r4, r3, r1
 800590c:	2c00      	cmp	r4, #0
 800590e:	f340 82ba 	ble.w	8005e86 <_vfiprintf_r+0x956>
 8005912:	46da      	mov	sl, fp
 8005914:	2c10      	cmp	r4, #16
 8005916:	f340 83da 	ble.w	80060ce <_vfiprintf_r+0xb9e>
 800591a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800591c:	4e63      	ldr	r6, [pc, #396]	; (8005aac <_vfiprintf_r+0x57c>)
 800591e:	9f06      	ldr	r7, [sp, #24]
 8005920:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005924:	2510      	movs	r5, #16
 8005926:	e006      	b.n	8005936 <_vfiprintf_r+0x406>
 8005928:	1c88      	adds	r0, r1, #2
 800592a:	f10a 0a08 	add.w	sl, sl, #8
 800592e:	4619      	mov	r1, r3
 8005930:	3c10      	subs	r4, #16
 8005932:	2c10      	cmp	r4, #16
 8005934:	dd13      	ble.n	800595e <_vfiprintf_r+0x42e>
 8005936:	1c4b      	adds	r3, r1, #1
 8005938:	3210      	adds	r2, #16
 800593a:	2b07      	cmp	r3, #7
 800593c:	9211      	str	r2, [sp, #68]	; 0x44
 800593e:	f8ca 6000 	str.w	r6, [sl]
 8005942:	f8ca 5004 	str.w	r5, [sl, #4]
 8005946:	9310      	str	r3, [sp, #64]	; 0x40
 8005948:	ddee      	ble.n	8005928 <_vfiprintf_r+0x3f8>
 800594a:	2a00      	cmp	r2, #0
 800594c:	f040 820b 	bne.w	8005d66 <_vfiprintf_r+0x836>
 8005950:	3c10      	subs	r4, #16
 8005952:	2c10      	cmp	r4, #16
 8005954:	f04f 0001 	mov.w	r0, #1
 8005958:	4611      	mov	r1, r2
 800595a:	46da      	mov	sl, fp
 800595c:	dceb      	bgt.n	8005936 <_vfiprintf_r+0x406>
 800595e:	4422      	add	r2, r4
 8005960:	2807      	cmp	r0, #7
 8005962:	9211      	str	r2, [sp, #68]	; 0x44
 8005964:	f8ca 6000 	str.w	r6, [sl]
 8005968:	f8ca 4004 	str.w	r4, [sl, #4]
 800596c:	9010      	str	r0, [sp, #64]	; 0x40
 800596e:	f340 8223 	ble.w	8005db8 <_vfiprintf_r+0x888>
 8005972:	2a00      	cmp	r2, #0
 8005974:	f040 8367 	bne.w	8006046 <_vfiprintf_r+0xb16>
 8005978:	9b04      	ldr	r3, [sp, #16]
 800597a:	9a07      	ldr	r2, [sp, #28]
 800597c:	9902      	ldr	r1, [sp, #8]
 800597e:	428a      	cmp	r2, r1
 8005980:	bfac      	ite	ge
 8005982:	189b      	addge	r3, r3, r2
 8005984:	185b      	addlt	r3, r3, r1
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	e21f      	b.n	8005dca <_vfiprintf_r+0x89a>
 800598a:	9607      	str	r6, [sp, #28]
 800598c:	069e      	lsls	r6, r3, #26
 800598e:	f100 8319 	bmi.w	8005fc4 <_vfiprintf_r+0xa94>
 8005992:	9908      	ldr	r1, [sp, #32]
 8005994:	06dd      	lsls	r5, r3, #27
 8005996:	460a      	mov	r2, r1
 8005998:	f100 82b5 	bmi.w	8005f06 <_vfiprintf_r+0x9d6>
 800599c:	0658      	lsls	r0, r3, #25
 800599e:	f140 82b2 	bpl.w	8005f06 <_vfiprintf_r+0x9d6>
 80059a2:	880e      	ldrh	r6, [r1, #0]
 80059a4:	3104      	adds	r1, #4
 80059a6:	2700      	movs	r7, #0
 80059a8:	2201      	movs	r2, #1
 80059aa:	9108      	str	r1, [sp, #32]
 80059ac:	e6cb      	b.n	8005746 <_vfiprintf_r+0x216>
 80059ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b2:	f899 2000 	ldrb.w	r2, [r9]
 80059b6:	e622      	b.n	80055fe <_vfiprintf_r+0xce>
 80059b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80059bc:	2600      	movs	r6, #0
 80059be:	f819 2b01 	ldrb.w	r2, [r9], #1
 80059c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80059c6:	eb01 0646 	add.w	r6, r1, r6, lsl #1
 80059ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80059ce:	2909      	cmp	r1, #9
 80059d0:	d9f5      	bls.n	80059be <_vfiprintf_r+0x48e>
 80059d2:	e616      	b.n	8005602 <_vfiprintf_r+0xd2>
 80059d4:	9908      	ldr	r1, [sp, #32]
 80059d6:	9607      	str	r6, [sp, #28]
 80059d8:	680a      	ldr	r2, [r1, #0]
 80059da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80059de:	f04f 0000 	mov.w	r0, #0
 80059e2:	460a      	mov	r2, r1
 80059e4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 80059e8:	3204      	adds	r2, #4
 80059ea:	2001      	movs	r0, #1
 80059ec:	9002      	str	r0, [sp, #8]
 80059ee:	9208      	str	r2, [sp, #32]
 80059f0:	9005      	str	r0, [sp, #20]
 80059f2:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	2400      	movs	r4, #0
 80059fa:	e6cb      	b.n	8005794 <_vfiprintf_r+0x264>
 80059fc:	9607      	str	r6, [sp, #28]
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f040 8382 	bne.w	8006108 <_vfiprintf_r+0xbd8>
 8005a04:	069e      	lsls	r6, r3, #26
 8005a06:	f100 82d1 	bmi.w	8005fac <_vfiprintf_r+0xa7c>
 8005a0a:	06dd      	lsls	r5, r3, #27
 8005a0c:	f100 828d 	bmi.w	8005f2a <_vfiprintf_r+0x9fa>
 8005a10:	0658      	lsls	r0, r3, #25
 8005a12:	f140 828a 	bpl.w	8005f2a <_vfiprintf_r+0x9fa>
 8005a16:	9d08      	ldr	r5, [sp, #32]
 8005a18:	f9b5 6000 	ldrsh.w	r6, [r5]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	17f7      	asrs	r7, r6, #31
 8005a20:	3204      	adds	r2, #4
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	9208      	str	r2, [sp, #32]
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	f171 0200 	sbcs.w	r2, r1, #0
 8005a2e:	f2c0 82ee 	blt.w	800600e <_vfiprintf_r+0xade>
 8005a32:	1c61      	adds	r1, r4, #1
 8005a34:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 8005a38:	f04f 0201 	mov.w	r2, #1
 8005a3c:	f47f ae8b 	bne.w	8005756 <_vfiprintf_r+0x226>
 8005a40:	ea56 0107 	orrs.w	r1, r6, r7
 8005a44:	f000 81e8 	beq.w	8005e18 <_vfiprintf_r+0x8e8>
 8005a48:	9303      	str	r3, [sp, #12]
 8005a4a:	2a01      	cmp	r2, #1
 8005a4c:	f000 8225 	beq.w	8005e9a <_vfiprintf_r+0x96a>
 8005a50:	2a02      	cmp	r2, #2
 8005a52:	f040 81f5 	bne.w	8005e40 <_vfiprintf_r+0x910>
 8005a56:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a58:	46d8      	mov	r8, fp
 8005a5a:	0933      	lsrs	r3, r6, #4
 8005a5c:	f006 010f 	and.w	r1, r6, #15
 8005a60:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005a64:	093a      	lsrs	r2, r7, #4
 8005a66:	461e      	mov	r6, r3
 8005a68:	4617      	mov	r7, r2
 8005a6a:	5c43      	ldrb	r3, [r0, r1]
 8005a6c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005a70:	ea56 0307 	orrs.w	r3, r6, r7
 8005a74:	d1f1      	bne.n	8005a5a <_vfiprintf_r+0x52a>
 8005a76:	ebab 0308 	sub.w	r3, fp, r8
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	e682      	b.n	8005784 <_vfiprintf_r+0x254>
 8005a7e:	f899 2000 	ldrb.w	r2, [r9]
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	f47f adbb 	bne.w	80055fe <_vfiprintf_r+0xce>
 8005a88:	2001      	movs	r0, #1
 8005a8a:	2520      	movs	r5, #32
 8005a8c:	e5b7      	b.n	80055fe <_vfiprintf_r+0xce>
 8005a8e:	9607      	str	r6, [sp, #28]
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f040 8336 	bne.w	8006102 <_vfiprintf_r+0xbd2>
 8005a96:	f043 0310 	orr.w	r3, r3, #16
 8005a9a:	e7b3      	b.n	8005a04 <_vfiprintf_r+0x4d4>
 8005a9c:	9607      	str	r6, [sp, #28]
 8005a9e:	f043 0310 	orr.w	r3, r3, #16
 8005aa2:	e63d      	b.n	8005720 <_vfiprintf_r+0x1f0>
 8005aa4:	9607      	str	r6, [sp, #28]
 8005aa6:	f043 0310 	orr.w	r3, r3, #16
 8005aaa:	e76f      	b.n	800598c <_vfiprintf_r+0x45c>
 8005aac:	0800c310 	.word	0x0800c310
 8005ab0:	0800c320 	.word	0x0800c320
 8005ab4:	9607      	str	r6, [sp, #28]
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f040 832c 	bne.w	8006114 <_vfiprintf_r+0xbe4>
 8005abc:	49b0      	ldr	r1, [pc, #704]	; (8005d80 <_vfiprintf_r+0x850>)
 8005abe:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ac0:	069f      	lsls	r7, r3, #26
 8005ac2:	f100 8297 	bmi.w	8005ff4 <_vfiprintf_r+0xac4>
 8005ac6:	9808      	ldr	r0, [sp, #32]
 8005ac8:	06de      	lsls	r6, r3, #27
 8005aca:	4601      	mov	r1, r0
 8005acc:	f100 8228 	bmi.w	8005f20 <_vfiprintf_r+0x9f0>
 8005ad0:	065d      	lsls	r5, r3, #25
 8005ad2:	f140 8225 	bpl.w	8005f20 <_vfiprintf_r+0x9f0>
 8005ad6:	3104      	adds	r1, #4
 8005ad8:	8806      	ldrh	r6, [r0, #0]
 8005ada:	9108      	str	r1, [sp, #32]
 8005adc:	2700      	movs	r7, #0
 8005ade:	07d8      	lsls	r0, r3, #31
 8005ae0:	f140 81d9 	bpl.w	8005e96 <_vfiprintf_r+0x966>
 8005ae4:	ea56 0107 	orrs.w	r1, r6, r7
 8005ae8:	f000 81d5 	beq.w	8005e96 <_vfiprintf_r+0x966>
 8005aec:	2130      	movs	r1, #48	; 0x30
 8005aee:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8005af2:	f043 0302 	orr.w	r3, r3, #2
 8005af6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 8005afa:	2202      	movs	r2, #2
 8005afc:	e623      	b.n	8005746 <_vfiprintf_r+0x216>
 8005afe:	f899 2000 	ldrb.w	r2, [r9]
 8005b02:	2a2a      	cmp	r2, #42	; 0x2a
 8005b04:	f109 0701 	add.w	r7, r9, #1
 8005b08:	f000 82f0 	beq.w	80060ec <_vfiprintf_r+0xbbc>
 8005b0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b10:	2909      	cmp	r1, #9
 8005b12:	46b9      	mov	r9, r7
 8005b14:	f04f 0400 	mov.w	r4, #0
 8005b18:	f63f ad73 	bhi.w	8005602 <_vfiprintf_r+0xd2>
 8005b1c:	f819 2b01 	ldrb.w	r2, [r9], #1
 8005b20:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005b24:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8005b28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b2c:	2909      	cmp	r1, #9
 8005b2e:	d9f5      	bls.n	8005b1c <_vfiprintf_r+0x5ec>
 8005b30:	e567      	b.n	8005602 <_vfiprintf_r+0xd2>
 8005b32:	f899 2000 	ldrb.w	r2, [r9]
 8005b36:	2a6c      	cmp	r2, #108	; 0x6c
 8005b38:	bf03      	ittte	eq
 8005b3a:	f899 2001 	ldrbeq.w	r2, [r9, #1]
 8005b3e:	f043 0320 	orreq.w	r3, r3, #32
 8005b42:	f109 0901 	addeq.w	r9, r9, #1
 8005b46:	f043 0310 	orrne.w	r3, r3, #16
 8005b4a:	e558      	b.n	80055fe <_vfiprintf_r+0xce>
 8005b4c:	9908      	ldr	r1, [sp, #32]
 8005b4e:	680e      	ldr	r6, [r1, #0]
 8005b50:	460a      	mov	r2, r1
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	f102 0204 	add.w	r2, r2, #4
 8005b58:	f6ff adda 	blt.w	8005710 <_vfiprintf_r+0x1e0>
 8005b5c:	9208      	str	r2, [sp, #32]
 8005b5e:	f899 2000 	ldrb.w	r2, [r9]
 8005b62:	e54c      	b.n	80055fe <_vfiprintf_r+0xce>
 8005b64:	9607      	str	r6, [sp, #28]
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f040 82da 	bne.w	8006120 <_vfiprintf_r+0xbf0>
 8005b6c:	4985      	ldr	r1, [pc, #532]	; (8005d84 <_vfiprintf_r+0x854>)
 8005b6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b70:	e7a6      	b.n	8005ac0 <_vfiprintf_r+0x590>
 8005b72:	9808      	ldr	r0, [sp, #32]
 8005b74:	4a83      	ldr	r2, [pc, #524]	; (8005d84 <_vfiprintf_r+0x854>)
 8005b76:	9607      	str	r6, [sp, #28]
 8005b78:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b7a:	6806      	ldr	r6, [r0, #0]
 8005b7c:	2278      	movs	r2, #120	; 0x78
 8005b7e:	2130      	movs	r1, #48	; 0x30
 8005b80:	3004      	adds	r0, #4
 8005b82:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8005b86:	f043 0302 	orr.w	r3, r3, #2
 8005b8a:	9008      	str	r0, [sp, #32]
 8005b8c:	2700      	movs	r7, #0
 8005b8e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 8005b92:	2202      	movs	r2, #2
 8005b94:	e5d7      	b.n	8005746 <_vfiprintf_r+0x216>
 8005b96:	f043 0320 	orr.w	r3, r3, #32
 8005b9a:	f899 2000 	ldrb.w	r2, [r9]
 8005b9e:	e52e      	b.n	80055fe <_vfiprintf_r+0xce>
 8005ba0:	9908      	ldr	r1, [sp, #32]
 8005ba2:	9607      	str	r6, [sp, #28]
 8005ba4:	f8d1 8000 	ldr.w	r8, [r1]
 8005ba8:	f04f 0200 	mov.w	r2, #0
 8005bac:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8005bb0:	1d0e      	adds	r6, r1, #4
 8005bb2:	f1b8 0f00 	cmp.w	r8, #0
 8005bb6:	f000 8281 	beq.w	80060bc <_vfiprintf_r+0xb8c>
 8005bba:	1c67      	adds	r7, r4, #1
 8005bbc:	f000 8260 	beq.w	8006080 <_vfiprintf_r+0xb50>
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	9302      	str	r3, [sp, #8]
 8005bc8:	f7fe faf2 	bl	80041b0 <memchr>
 8005bcc:	9b02      	ldr	r3, [sp, #8]
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f000 8284 	beq.w	80060dc <_vfiprintf_r+0xbac>
 8005bd4:	eba0 0208 	sub.w	r2, r0, r8
 8005bd8:	9205      	str	r2, [sp, #20]
 8005bda:	9608      	str	r6, [sp, #32]
 8005bdc:	9303      	str	r3, [sp, #12]
 8005bde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 8005be2:	2400      	movs	r4, #0
 8005be4:	e5ce      	b.n	8005784 <_vfiprintf_r+0x254>
 8005be6:	f043 0301 	orr.w	r3, r3, #1
 8005bea:	f899 2000 	ldrb.w	r2, [r9]
 8005bee:	e506      	b.n	80055fe <_vfiprintf_r+0xce>
 8005bf0:	f899 2000 	ldrb.w	r2, [r9]
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	252b      	movs	r5, #43	; 0x2b
 8005bf8:	e501      	b.n	80055fe <_vfiprintf_r+0xce>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	f040 8287 	bne.w	800610e <_vfiprintf_r+0xbde>
 8005c00:	0699      	lsls	r1, r3, #26
 8005c02:	f100 8231 	bmi.w	8006068 <_vfiprintf_r+0xb38>
 8005c06:	06da      	lsls	r2, r3, #27
 8005c08:	d421      	bmi.n	8005c4e <_vfiprintf_r+0x71e>
 8005c0a:	065b      	lsls	r3, r3, #25
 8005c0c:	d51f      	bpl.n	8005c4e <_vfiprintf_r+0x71e>
 8005c0e:	9a08      	ldr	r2, [sp, #32]
 8005c10:	6813      	ldr	r3, [r2, #0]
 8005c12:	3204      	adds	r2, #4
 8005c14:	9208      	str	r2, [sp, #32]
 8005c16:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e4ba      	b.n	8005594 <_vfiprintf_r+0x64>
 8005c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c22:	f899 2000 	ldrb.w	r2, [r9]
 8005c26:	e4ea      	b.n	80055fe <_vfiprintf_r+0xce>
 8005c28:	9607      	str	r6, [sp, #28]
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f040 8275 	bne.w	800611a <_vfiprintf_r+0xbea>
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	f000 8088 	beq.w	8005d46 <_vfiprintf_r+0x816>
 8005c36:	2101      	movs	r1, #1
 8005c38:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	9102      	str	r1, [sp, #8]
 8005c42:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8005c46:	9105      	str	r1, [sp, #20]
 8005c48:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8005c4c:	e6d3      	b.n	80059f6 <_vfiprintf_r+0x4c6>
 8005c4e:	9a08      	ldr	r2, [sp, #32]
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	3204      	adds	r2, #4
 8005c54:	9208      	str	r2, [sp, #32]
 8005c56:	9a04      	ldr	r2, [sp, #16]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e49b      	b.n	8005594 <_vfiprintf_r+0x64>
 8005c5c:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c5e:	9901      	ldr	r1, [sp, #4]
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7ff fc1b 	bl	800549c <__sprint_r.part.0>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d174      	bne.n	8005d54 <_vfiprintf_r+0x824>
 8005c6a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c6e:	f101 0c01 	add.w	ip, r1, #1
 8005c72:	46de      	mov	lr, fp
 8005c74:	e5b3      	b.n	80057de <_vfiprintf_r+0x2ae>
 8005c76:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005c7a:	1c48      	adds	r0, r1, #1
 8005c7c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	f43f add6 	beq.w	8005832 <_vfiprintf_r+0x302>
 8005c86:	3201      	adds	r2, #1
 8005c88:	f10d 0537 	add.w	r5, sp, #55	; 0x37
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	2807      	cmp	r0, #7
 8005c90:	9211      	str	r2, [sp, #68]	; 0x44
 8005c92:	9010      	str	r0, [sp, #64]	; 0x40
 8005c94:	f8ca 5000 	str.w	r5, [sl]
 8005c98:	f8ca 1004 	str.w	r1, [sl, #4]
 8005c9c:	f340 80b6 	ble.w	8005e0c <_vfiprintf_r+0x8dc>
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	f040 8155 	bne.w	8005f50 <_vfiprintf_r+0xa20>
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f43f add3 	beq.w	8005854 <_vfiprintf_r+0x324>
 8005cae:	ab0e      	add	r3, sp, #56	; 0x38
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	931c      	str	r3, [sp, #112]	; 0x70
 8005cb6:	921d      	str	r2, [sp, #116]	; 0x74
 8005cb8:	46da      	mov	sl, fp
 8005cba:	4601      	mov	r1, r0
 8005cbc:	f10a 0a08 	add.w	sl, sl, #8
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc4:	2b80      	cmp	r3, #128	; 0x80
 8005cc6:	f43f adcd 	beq.w	8005864 <_vfiprintf_r+0x334>
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	1ae4      	subs	r4, r4, r3
 8005cce:	2c00      	cmp	r4, #0
 8005cd0:	f77f ae07 	ble.w	80058e2 <_vfiprintf_r+0x3b2>
 8005cd4:	2c10      	cmp	r4, #16
 8005cd6:	4d2c      	ldr	r5, [pc, #176]	; (8005d88 <_vfiprintf_r+0x858>)
 8005cd8:	dd1d      	ble.n	8005d16 <_vfiprintf_r+0x7e6>
 8005cda:	46d6      	mov	lr, sl
 8005cdc:	2610      	movs	r6, #16
 8005cde:	9f06      	ldr	r7, [sp, #24]
 8005ce0:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005ce4:	e006      	b.n	8005cf4 <_vfiprintf_r+0x7c4>
 8005ce6:	1c88      	adds	r0, r1, #2
 8005ce8:	f10e 0e08 	add.w	lr, lr, #8
 8005cec:	4619      	mov	r1, r3
 8005cee:	3c10      	subs	r4, #16
 8005cf0:	2c10      	cmp	r4, #16
 8005cf2:	dd0f      	ble.n	8005d14 <_vfiprintf_r+0x7e4>
 8005cf4:	1c4b      	adds	r3, r1, #1
 8005cf6:	3210      	adds	r2, #16
 8005cf8:	2b07      	cmp	r3, #7
 8005cfa:	9211      	str	r2, [sp, #68]	; 0x44
 8005cfc:	e88e 0060 	stmia.w	lr, {r5, r6}
 8005d00:	9310      	str	r3, [sp, #64]	; 0x40
 8005d02:	ddf0      	ble.n	8005ce6 <_vfiprintf_r+0x7b6>
 8005d04:	b9a2      	cbnz	r2, 8005d30 <_vfiprintf_r+0x800>
 8005d06:	3c10      	subs	r4, #16
 8005d08:	2c10      	cmp	r4, #16
 8005d0a:	f04f 0001 	mov.w	r0, #1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	46de      	mov	lr, fp
 8005d12:	dcef      	bgt.n	8005cf4 <_vfiprintf_r+0x7c4>
 8005d14:	46f2      	mov	sl, lr
 8005d16:	4422      	add	r2, r4
 8005d18:	2807      	cmp	r0, #7
 8005d1a:	9211      	str	r2, [sp, #68]	; 0x44
 8005d1c:	f8ca 5000 	str.w	r5, [sl]
 8005d20:	f8ca 4004 	str.w	r4, [sl, #4]
 8005d24:	9010      	str	r0, [sp, #64]	; 0x40
 8005d26:	dc31      	bgt.n	8005d8c <_vfiprintf_r+0x85c>
 8005d28:	f10a 0a08 	add.w	sl, sl, #8
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	e5d8      	b.n	80058e2 <_vfiprintf_r+0x3b2>
 8005d30:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d32:	4651      	mov	r1, sl
 8005d34:	4638      	mov	r0, r7
 8005d36:	f7ff fbb1 	bl	800549c <__sprint_r.part.0>
 8005d3a:	b958      	cbnz	r0, 8005d54 <_vfiprintf_r+0x824>
 8005d3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d40:	1c48      	adds	r0, r1, #1
 8005d42:	46de      	mov	lr, fp
 8005d44:	e7d3      	b.n	8005cee <_vfiprintf_r+0x7be>
 8005d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d48:	b123      	cbz	r3, 8005d54 <_vfiprintf_r+0x824>
 8005d4a:	9806      	ldr	r0, [sp, #24]
 8005d4c:	9901      	ldr	r1, [sp, #4]
 8005d4e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d50:	f7ff fba4 	bl	800549c <__sprint_r.part.0>
 8005d54:	9b01      	ldr	r3, [sp, #4]
 8005d56:	899b      	ldrh	r3, [r3, #12]
 8005d58:	065b      	lsls	r3, r3, #25
 8005d5a:	f57f acd2 	bpl.w	8005702 <_vfiprintf_r+0x1d2>
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	e4cd      	b.n	8005702 <_vfiprintf_r+0x1d2>
 8005d66:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d68:	4641      	mov	r1, r8
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7ff fb96 	bl	800549c <__sprint_r.part.0>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d1ef      	bne.n	8005d54 <_vfiprintf_r+0x824>
 8005d74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d78:	1c48      	adds	r0, r1, #1
 8005d7a:	46da      	mov	sl, fp
 8005d7c:	e5d8      	b.n	8005930 <_vfiprintf_r+0x400>
 8005d7e:	bf00      	nop
 8005d80:	0801b534 	.word	0x0801b534
 8005d84:	0801b548 	.word	0x0801b548
 8005d88:	0800c320 	.word	0x0800c320
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	f040 8100 	bne.w	8005f92 <_vfiprintf_r+0xa62>
 8005d92:	9a05      	ldr	r2, [sp, #20]
 8005d94:	921d      	str	r2, [sp, #116]	; 0x74
 8005d96:	2301      	movs	r3, #1
 8005d98:	9211      	str	r2, [sp, #68]	; 0x44
 8005d9a:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
 8005d9e:	9310      	str	r3, [sp, #64]	; 0x40
 8005da0:	46da      	mov	sl, fp
 8005da2:	f10a 0a08 	add.w	sl, sl, #8
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	0759      	lsls	r1, r3, #29
 8005daa:	d505      	bpl.n	8005db8 <_vfiprintf_r+0x888>
 8005dac:	9b07      	ldr	r3, [sp, #28]
 8005dae:	9902      	ldr	r1, [sp, #8]
 8005db0:	1a5c      	subs	r4, r3, r1
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	f73f adae 	bgt.w	8005914 <_vfiprintf_r+0x3e4>
 8005db8:	9b04      	ldr	r3, [sp, #16]
 8005dba:	9907      	ldr	r1, [sp, #28]
 8005dbc:	9802      	ldr	r0, [sp, #8]
 8005dbe:	4281      	cmp	r1, r0
 8005dc0:	bfac      	ite	ge
 8005dc2:	185b      	addge	r3, r3, r1
 8005dc4:	181b      	addlt	r3, r3, r0
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	bb7a      	cbnz	r2, 8005e2a <_vfiprintf_r+0x8fa>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	9310      	str	r3, [sp, #64]	; 0x40
 8005dce:	46da      	mov	sl, fp
 8005dd0:	f7ff bbe0 	b.w	8005594 <_vfiprintf_r+0x64>
 8005dd4:	aa0f      	add	r2, sp, #60	; 0x3c
 8005dd6:	9901      	ldr	r1, [sp, #4]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fb5f 	bl	800549c <__sprint_r.part.0>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d1b8      	bne.n	8005d54 <_vfiprintf_r+0x824>
 8005de2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005de6:	f101 0e01 	add.w	lr, r1, #1
 8005dea:	46dc      	mov	ip, fp
 8005dec:	e54e      	b.n	800588c <_vfiprintf_r+0x35c>
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	f040 811c 	bne.w	800602c <_vfiprintf_r+0xafc>
 8005df4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	f000 8111 	beq.w	8006020 <_vfiprintf_r+0xaf0>
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 8005e04:	4610      	mov	r0, r2
 8005e06:	921d      	str	r2, [sp, #116]	; 0x74
 8005e08:	911c      	str	r1, [sp, #112]	; 0x70
 8005e0a:	46da      	mov	sl, fp
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	f10a 0a08 	add.w	sl, sl, #8
 8005e12:	3001      	adds	r0, #1
 8005e14:	e50d      	b.n	8005832 <_vfiprintf_r+0x302>
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	2a01      	cmp	r2, #1
 8005e1a:	f000 8090 	beq.w	8005f3e <_vfiprintf_r+0xa0e>
 8005e1e:	2a02      	cmp	r2, #2
 8005e20:	d10b      	bne.n	8005e3a <_vfiprintf_r+0x90a>
 8005e22:	9303      	str	r3, [sp, #12]
 8005e24:	2600      	movs	r6, #0
 8005e26:	2700      	movs	r7, #0
 8005e28:	e615      	b.n	8005a56 <_vfiprintf_r+0x526>
 8005e2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e2c:	9901      	ldr	r1, [sp, #4]
 8005e2e:	9806      	ldr	r0, [sp, #24]
 8005e30:	f7ff fb34 	bl	800549c <__sprint_r.part.0>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d0c8      	beq.n	8005dca <_vfiprintf_r+0x89a>
 8005e38:	e78c      	b.n	8005d54 <_vfiprintf_r+0x824>
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	2600      	movs	r6, #0
 8005e3e:	2700      	movs	r7, #0
 8005e40:	4659      	mov	r1, fp
 8005e42:	e000      	b.n	8005e46 <_vfiprintf_r+0x916>
 8005e44:	4641      	mov	r1, r8
 8005e46:	08f2      	lsrs	r2, r6, #3
 8005e48:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8005e4c:	08f8      	lsrs	r0, r7, #3
 8005e4e:	f006 0307 	and.w	r3, r6, #7
 8005e52:	4607      	mov	r7, r0
 8005e54:	4616      	mov	r6, r2
 8005e56:	3330      	adds	r3, #48	; 0x30
 8005e58:	ea56 0207 	orrs.w	r2, r6, r7
 8005e5c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005e60:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8005e64:	d1ee      	bne.n	8005e44 <_vfiprintf_r+0x914>
 8005e66:	9a03      	ldr	r2, [sp, #12]
 8005e68:	07d6      	lsls	r6, r2, #31
 8005e6a:	f57f ae04 	bpl.w	8005a76 <_vfiprintf_r+0x546>
 8005e6e:	2b30      	cmp	r3, #48	; 0x30
 8005e70:	f43f ae01 	beq.w	8005a76 <_vfiprintf_r+0x546>
 8005e74:	3902      	subs	r1, #2
 8005e76:	2330      	movs	r3, #48	; 0x30
 8005e78:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005e7c:	ebab 0301 	sub.w	r3, fp, r1
 8005e80:	9305      	str	r3, [sp, #20]
 8005e82:	4688      	mov	r8, r1
 8005e84:	e47e      	b.n	8005784 <_vfiprintf_r+0x254>
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	9a07      	ldr	r2, [sp, #28]
 8005e8a:	428a      	cmp	r2, r1
 8005e8c:	bfac      	ite	ge
 8005e8e:	189b      	addge	r3, r3, r2
 8005e90:	185b      	addlt	r3, r3, r1
 8005e92:	9304      	str	r3, [sp, #16]
 8005e94:	e799      	b.n	8005dca <_vfiprintf_r+0x89a>
 8005e96:	2202      	movs	r2, #2
 8005e98:	e455      	b.n	8005746 <_vfiprintf_r+0x216>
 8005e9a:	2f00      	cmp	r7, #0
 8005e9c:	bf08      	it	eq
 8005e9e:	2e0a      	cmpeq	r6, #10
 8005ea0:	d34c      	bcc.n	8005f3c <_vfiprintf_r+0xa0c>
 8005ea2:	46d8      	mov	r8, fp
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	4639      	mov	r1, r7
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f000 ffea 	bl	8006e84 <__aeabi_uldivmod>
 8005eb0:	3230      	adds	r2, #48	; 0x30
 8005eb2:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	4639      	mov	r1, r7
 8005eba:	2300      	movs	r3, #0
 8005ebc:	220a      	movs	r2, #10
 8005ebe:	f000 ffe1 	bl	8006e84 <__aeabi_uldivmod>
 8005ec2:	4606      	mov	r6, r0
 8005ec4:	460f      	mov	r7, r1
 8005ec6:	ea56 0307 	orrs.w	r3, r6, r7
 8005eca:	d1eb      	bne.n	8005ea4 <_vfiprintf_r+0x974>
 8005ecc:	ebab 0308 	sub.w	r3, fp, r8
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	e457      	b.n	8005784 <_vfiprintf_r+0x254>
 8005ed4:	9405      	str	r4, [sp, #20]
 8005ed6:	46d8      	mov	r8, fp
 8005ed8:	e454      	b.n	8005784 <_vfiprintf_r+0x254>
 8005eda:	aa0f      	add	r2, sp, #60	; 0x3c
 8005edc:	9901      	ldr	r1, [sp, #4]
 8005ede:	9806      	ldr	r0, [sp, #24]
 8005ee0:	f7ff fadc 	bl	800549c <__sprint_r.part.0>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f47f af35 	bne.w	8005d54 <_vfiprintf_r+0x824>
 8005eea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005eec:	46da      	mov	sl, fp
 8005eee:	e75a      	b.n	8005da6 <_vfiprintf_r+0x876>
 8005ef0:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ef2:	9901      	ldr	r1, [sp, #4]
 8005ef4:	9806      	ldr	r0, [sp, #24]
 8005ef6:	f7ff fad1 	bl	800549c <__sprint_r.part.0>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f47f af2a 	bne.w	8005d54 <_vfiprintf_r+0x824>
 8005f00:	46da      	mov	sl, fp
 8005f02:	f7ff bbe0 	b.w	80056c6 <_vfiprintf_r+0x196>
 8005f06:	3104      	adds	r1, #4
 8005f08:	6816      	ldr	r6, [r2, #0]
 8005f0a:	9108      	str	r1, [sp, #32]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	2700      	movs	r7, #0
 8005f10:	e419      	b.n	8005746 <_vfiprintf_r+0x216>
 8005f12:	9808      	ldr	r0, [sp, #32]
 8005f14:	4601      	mov	r1, r0
 8005f16:	3104      	adds	r1, #4
 8005f18:	6806      	ldr	r6, [r0, #0]
 8005f1a:	9108      	str	r1, [sp, #32]
 8005f1c:	2700      	movs	r7, #0
 8005f1e:	e412      	b.n	8005746 <_vfiprintf_r+0x216>
 8005f20:	680e      	ldr	r6, [r1, #0]
 8005f22:	3104      	adds	r1, #4
 8005f24:	9108      	str	r1, [sp, #32]
 8005f26:	2700      	movs	r7, #0
 8005f28:	e5d9      	b.n	8005ade <_vfiprintf_r+0x5ae>
 8005f2a:	9908      	ldr	r1, [sp, #32]
 8005f2c:	680e      	ldr	r6, [r1, #0]
 8005f2e:	460a      	mov	r2, r1
 8005f30:	17f7      	asrs	r7, r6, #31
 8005f32:	3204      	adds	r2, #4
 8005f34:	9208      	str	r2, [sp, #32]
 8005f36:	4630      	mov	r0, r6
 8005f38:	4639      	mov	r1, r7
 8005f3a:	e575      	b.n	8005a28 <_vfiprintf_r+0x4f8>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005f44:	3630      	adds	r6, #48	; 0x30
 8005f46:	2301      	movs	r3, #1
 8005f48:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	e419      	b.n	8005784 <_vfiprintf_r+0x254>
 8005f50:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f52:	9901      	ldr	r1, [sp, #4]
 8005f54:	9806      	ldr	r0, [sp, #24]
 8005f56:	f7ff faa1 	bl	800549c <__sprint_r.part.0>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f47f aefa 	bne.w	8005d54 <_vfiprintf_r+0x824>
 8005f60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f64:	1c48      	adds	r0, r1, #1
 8005f66:	46da      	mov	sl, fp
 8005f68:	e463      	b.n	8005832 <_vfiprintf_r+0x302>
 8005f6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f6c:	9901      	ldr	r1, [sp, #4]
 8005f6e:	9806      	ldr	r0, [sp, #24]
 8005f70:	f7ff fa94 	bl	800549c <__sprint_r.part.0>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f47f aeed 	bne.w	8005d54 <_vfiprintf_r+0x824>
 8005f7a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005f7e:	1c48      	adds	r0, r1, #1
 8005f80:	46da      	mov	sl, fp
 8005f82:	e69e      	b.n	8005cc2 <_vfiprintf_r+0x792>
 8005f84:	2a00      	cmp	r2, #0
 8005f86:	f040 8086 	bne.w	8006096 <_vfiprintf_r+0xb66>
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	46da      	mov	sl, fp
 8005f90:	e69b      	b.n	8005cca <_vfiprintf_r+0x79a>
 8005f92:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f94:	9901      	ldr	r1, [sp, #4]
 8005f96:	9806      	ldr	r0, [sp, #24]
 8005f98:	f7ff fa80 	bl	800549c <__sprint_r.part.0>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f47f aed9 	bne.w	8005d54 <_vfiprintf_r+0x824>
 8005fa2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005fa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	46da      	mov	sl, fp
 8005faa:	e49a      	b.n	80058e2 <_vfiprintf_r+0x3b2>
 8005fac:	9e08      	ldr	r6, [sp, #32]
 8005fae:	3607      	adds	r6, #7
 8005fb0:	f026 0607 	bic.w	r6, r6, #7
 8005fb4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005fb8:	f106 0208 	add.w	r2, r6, #8
 8005fbc:	9208      	str	r2, [sp, #32]
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	e531      	b.n	8005a28 <_vfiprintf_r+0x4f8>
 8005fc4:	9e08      	ldr	r6, [sp, #32]
 8005fc6:	3607      	adds	r6, #7
 8005fc8:	f026 0207 	bic.w	r2, r6, #7
 8005fcc:	f102 0108 	add.w	r1, r2, #8
 8005fd0:	e9d2 6700 	ldrd	r6, r7, [r2]
 8005fd4:	9108      	str	r1, [sp, #32]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f7ff bbb5 	b.w	8005746 <_vfiprintf_r+0x216>
 8005fdc:	9e08      	ldr	r6, [sp, #32]
 8005fde:	3607      	adds	r6, #7
 8005fe0:	f026 0207 	bic.w	r2, r6, #7
 8005fe4:	f102 0108 	add.w	r1, r2, #8
 8005fe8:	e9d2 6700 	ldrd	r6, r7, [r2]
 8005fec:	9108      	str	r1, [sp, #32]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f7ff bba9 	b.w	8005746 <_vfiprintf_r+0x216>
 8005ff4:	9e08      	ldr	r6, [sp, #32]
 8005ff6:	3607      	adds	r6, #7
 8005ff8:	f026 0107 	bic.w	r1, r6, #7
 8005ffc:	f101 0008 	add.w	r0, r1, #8
 8006000:	9008      	str	r0, [sp, #32]
 8006002:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006006:	e56a      	b.n	8005ade <_vfiprintf_r+0x5ae>
 8006008:	46d8      	mov	r8, fp
 800600a:	f7ff bbbb 	b.w	8005784 <_vfiprintf_r+0x254>
 800600e:	252d      	movs	r5, #45	; 0x2d
 8006010:	4276      	negs	r6, r6
 8006012:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006016:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 800601a:	2201      	movs	r2, #1
 800601c:	f7ff bb98 	b.w	8005750 <_vfiprintf_r+0x220>
 8006020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006022:	b9d3      	cbnz	r3, 800605a <_vfiprintf_r+0xb2a>
 8006024:	4611      	mov	r1, r2
 8006026:	2001      	movs	r0, #1
 8006028:	46da      	mov	sl, fp
 800602a:	e64e      	b.n	8005cca <_vfiprintf_r+0x79a>
 800602c:	aa0f      	add	r2, sp, #60	; 0x3c
 800602e:	9901      	ldr	r1, [sp, #4]
 8006030:	9806      	ldr	r0, [sp, #24]
 8006032:	f7ff fa33 	bl	800549c <__sprint_r.part.0>
 8006036:	2800      	cmp	r0, #0
 8006038:	f47f ae8c 	bne.w	8005d54 <_vfiprintf_r+0x824>
 800603c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800603e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006040:	1c48      	adds	r0, r1, #1
 8006042:	46da      	mov	sl, fp
 8006044:	e61a      	b.n	8005c7c <_vfiprintf_r+0x74c>
 8006046:	aa0f      	add	r2, sp, #60	; 0x3c
 8006048:	9901      	ldr	r1, [sp, #4]
 800604a:	9806      	ldr	r0, [sp, #24]
 800604c:	f7ff fa26 	bl	800549c <__sprint_r.part.0>
 8006050:	2800      	cmp	r0, #0
 8006052:	f47f ae7f 	bne.w	8005d54 <_vfiprintf_r+0x824>
 8006056:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006058:	e6ae      	b.n	8005db8 <_vfiprintf_r+0x888>
 800605a:	ab0e      	add	r3, sp, #56	; 0x38
 800605c:	2202      	movs	r2, #2
 800605e:	931c      	str	r3, [sp, #112]	; 0x70
 8006060:	921d      	str	r2, [sp, #116]	; 0x74
 8006062:	2001      	movs	r0, #1
 8006064:	46da      	mov	sl, fp
 8006066:	e628      	b.n	8005cba <_vfiprintf_r+0x78a>
 8006068:	9a08      	ldr	r2, [sp, #32]
 800606a:	9904      	ldr	r1, [sp, #16]
 800606c:	6813      	ldr	r3, [r2, #0]
 800606e:	17cd      	asrs	r5, r1, #31
 8006070:	4608      	mov	r0, r1
 8006072:	3204      	adds	r2, #4
 8006074:	4629      	mov	r1, r5
 8006076:	9208      	str	r2, [sp, #32]
 8006078:	e9c3 0100 	strd	r0, r1, [r3]
 800607c:	f7ff ba8a 	b.w	8005594 <_vfiprintf_r+0x64>
 8006080:	4640      	mov	r0, r8
 8006082:	9608      	str	r6, [sp, #32]
 8006084:	9303      	str	r3, [sp, #12]
 8006086:	f7fa fbdb 	bl	8000840 <strlen>
 800608a:	2400      	movs	r4, #0
 800608c:	9005      	str	r0, [sp, #20]
 800608e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 8006092:	f7ff bb77 	b.w	8005784 <_vfiprintf_r+0x254>
 8006096:	aa0f      	add	r2, sp, #60	; 0x3c
 8006098:	9901      	ldr	r1, [sp, #4]
 800609a:	9806      	ldr	r0, [sp, #24]
 800609c:	f7ff f9fe 	bl	800549c <__sprint_r.part.0>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f47f ae57 	bne.w	8005d54 <_vfiprintf_r+0x824>
 80060a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80060a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060aa:	1c48      	adds	r0, r1, #1
 80060ac:	46da      	mov	sl, fp
 80060ae:	e60c      	b.n	8005cca <_vfiprintf_r+0x79a>
 80060b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80060b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060b4:	4e1c      	ldr	r6, [pc, #112]	; (8006128 <_vfiprintf_r+0xbf8>)
 80060b6:	3101      	adds	r1, #1
 80060b8:	f7ff bba9 	b.w	800580e <_vfiprintf_r+0x2de>
 80060bc:	2c06      	cmp	r4, #6
 80060be:	bf28      	it	cs
 80060c0:	2406      	movcs	r4, #6
 80060c2:	9405      	str	r4, [sp, #20]
 80060c4:	9608      	str	r6, [sp, #32]
 80060c6:	9402      	str	r4, [sp, #8]
 80060c8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800612c <_vfiprintf_r+0xbfc>
 80060cc:	e493      	b.n	80059f6 <_vfiprintf_r+0x4c6>
 80060ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80060d0:	4e15      	ldr	r6, [pc, #84]	; (8006128 <_vfiprintf_r+0xbf8>)
 80060d2:	3001      	adds	r0, #1
 80060d4:	e443      	b.n	800595e <_vfiprintf_r+0x42e>
 80060d6:	4686      	mov	lr, r0
 80060d8:	f7ff bbef 	b.w	80058ba <_vfiprintf_r+0x38a>
 80060dc:	9405      	str	r4, [sp, #20]
 80060de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
 80060e2:	9608      	str	r6, [sp, #32]
 80060e4:	9303      	str	r3, [sp, #12]
 80060e6:	4604      	mov	r4, r0
 80060e8:	f7ff bb4c 	b.w	8005784 <_vfiprintf_r+0x254>
 80060ec:	9908      	ldr	r1, [sp, #32]
 80060ee:	f899 2001 	ldrb.w	r2, [r9, #1]
 80060f2:	680c      	ldr	r4, [r1, #0]
 80060f4:	3104      	adds	r1, #4
 80060f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80060fa:	46b9      	mov	r9, r7
 80060fc:	9108      	str	r1, [sp, #32]
 80060fe:	f7ff ba7e 	b.w	80055fe <_vfiprintf_r+0xce>
 8006102:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 8006106:	e4c6      	b.n	8005a96 <_vfiprintf_r+0x566>
 8006108:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 800610c:	e47a      	b.n	8005a04 <_vfiprintf_r+0x4d4>
 800610e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 8006112:	e575      	b.n	8005c00 <_vfiprintf_r+0x6d0>
 8006114:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 8006118:	e4d0      	b.n	8005abc <_vfiprintf_r+0x58c>
 800611a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 800611e:	e587      	b.n	8005c30 <_vfiprintf_r+0x700>
 8006120:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
 8006124:	e522      	b.n	8005b6c <_vfiprintf_r+0x63c>
 8006126:	bf00      	nop
 8006128:	0800c310 	.word	0x0800c310
 800612c:	0801b55c 	.word	0x0801b55c

08006130 <vfiprintf>:
 8006130:	b410      	push	{r4}
 8006132:	4c04      	ldr	r4, [pc, #16]	; (8006144 <vfiprintf+0x14>)
 8006134:	4613      	mov	r3, r2
 8006136:	460a      	mov	r2, r1
 8006138:	4601      	mov	r1, r0
 800613a:	6820      	ldr	r0, [r4, #0]
 800613c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006140:	f7ff b9f6 	b.w	8005530 <_vfiprintf_r>
 8006144:	20000008 	.word	0x20000008

08006148 <__sbprintf>:
 8006148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006150:	8989      	ldrh	r1, [r1, #12]
 8006152:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006154:	89e5      	ldrh	r5, [r4, #14]
 8006156:	9619      	str	r6, [sp, #100]	; 0x64
 8006158:	f021 0102 	bic.w	r1, r1, #2
 800615c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800615e:	f8ad 500e 	strh.w	r5, [sp, #14]
 8006162:	2500      	movs	r5, #0
 8006164:	69e7      	ldr	r7, [r4, #28]
 8006166:	f8ad 100c 	strh.w	r1, [sp, #12]
 800616a:	9609      	str	r6, [sp, #36]	; 0x24
 800616c:	9506      	str	r5, [sp, #24]
 800616e:	ae1a      	add	r6, sp, #104	; 0x68
 8006170:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8006174:	4669      	mov	r1, sp
 8006176:	9600      	str	r6, [sp, #0]
 8006178:	9604      	str	r6, [sp, #16]
 800617a:	9502      	str	r5, [sp, #8]
 800617c:	9505      	str	r5, [sp, #20]
 800617e:	9707      	str	r7, [sp, #28]
 8006180:	4606      	mov	r6, r0
 8006182:	f7ff f9d5 	bl	8005530 <_vfiprintf_r>
 8006186:	1e05      	subs	r5, r0, #0
 8006188:	db07      	blt.n	800619a <__sbprintf+0x52>
 800618a:	4630      	mov	r0, r6
 800618c:	4669      	mov	r1, sp
 800618e:	f7fd f871 	bl	8003274 <_fflush_r>
 8006192:	2800      	cmp	r0, #0
 8006194:	bf18      	it	ne
 8006196:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800619a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800619e:	065b      	lsls	r3, r3, #25
 80061a0:	d503      	bpl.n	80061aa <__sbprintf+0x62>
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a8:	81a3      	strh	r3, [r4, #12]
 80061aa:	4628      	mov	r0, r5
 80061ac:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80061b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b2:	bf00      	nop

080061b4 <__swbuf_r>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	460d      	mov	r5, r1
 80061b8:	4614      	mov	r4, r2
 80061ba:	4606      	mov	r6, r0
 80061bc:	b110      	cbz	r0, 80061c4 <__swbuf_r+0x10>
 80061be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d04b      	beq.n	800625c <__swbuf_r+0xa8>
 80061c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061c8:	69a3      	ldr	r3, [r4, #24]
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	b291      	uxth	r1, r2
 80061ce:	0708      	lsls	r0, r1, #28
 80061d0:	d539      	bpl.n	8006246 <__swbuf_r+0x92>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d036      	beq.n	8006246 <__swbuf_r+0x92>
 80061d8:	b2ed      	uxtb	r5, r5
 80061da:	0489      	lsls	r1, r1, #18
 80061dc:	462f      	mov	r7, r5
 80061de:	d515      	bpl.n	800620c <__swbuf_r+0x58>
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	6961      	ldr	r1, [r4, #20]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	428b      	cmp	r3, r1
 80061e8:	da1c      	bge.n	8006224 <__swbuf_r+0x70>
 80061ea:	3301      	adds	r3, #1
 80061ec:	68a1      	ldr	r1, [r4, #8]
 80061ee:	1c50      	adds	r0, r2, #1
 80061f0:	3901      	subs	r1, #1
 80061f2:	60a1      	str	r1, [r4, #8]
 80061f4:	6020      	str	r0, [r4, #0]
 80061f6:	7015      	strb	r5, [r2, #0]
 80061f8:	6962      	ldr	r2, [r4, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d01a      	beq.n	8006234 <__swbuf_r+0x80>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	d501      	bpl.n	8006208 <__swbuf_r+0x54>
 8006204:	2d0a      	cmp	r5, #10
 8006206:	d015      	beq.n	8006234 <__swbuf_r+0x80>
 8006208:	4638      	mov	r0, r7
 800620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800620c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800620e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006212:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8006216:	81a2      	strh	r2, [r4, #12]
 8006218:	6822      	ldr	r2, [r4, #0]
 800621a:	6661      	str	r1, [r4, #100]	; 0x64
 800621c:	6961      	ldr	r1, [r4, #20]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	428b      	cmp	r3, r1
 8006222:	dbe2      	blt.n	80061ea <__swbuf_r+0x36>
 8006224:	4621      	mov	r1, r4
 8006226:	4630      	mov	r0, r6
 8006228:	f7fd f824 	bl	8003274 <_fflush_r>
 800622c:	b940      	cbnz	r0, 8006240 <__swbuf_r+0x8c>
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	2301      	movs	r3, #1
 8006232:	e7db      	b.n	80061ec <__swbuf_r+0x38>
 8006234:	4621      	mov	r1, r4
 8006236:	4630      	mov	r0, r6
 8006238:	f7fd f81c 	bl	8003274 <_fflush_r>
 800623c:	2800      	cmp	r0, #0
 800623e:	d0e3      	beq.n	8006208 <__swbuf_r+0x54>
 8006240:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006244:	e7e0      	b.n	8006208 <__swbuf_r+0x54>
 8006246:	4621      	mov	r1, r4
 8006248:	4630      	mov	r0, r6
 800624a:	f7fb ff01 	bl	8002050 <__swsetup_r>
 800624e:	2800      	cmp	r0, #0
 8006250:	d1f6      	bne.n	8006240 <__swbuf_r+0x8c>
 8006252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	b291      	uxth	r1, r2
 800625a:	e7bd      	b.n	80061d8 <__swbuf_r+0x24>
 800625c:	f7fd f91c 	bl	8003498 <__sinit>
 8006260:	e7b0      	b.n	80061c4 <__swbuf_r+0x10>
 8006262:	bf00      	nop

08006264 <__swbuf>:
 8006264:	4b02      	ldr	r3, [pc, #8]	; (8006270 <__swbuf+0xc>)
 8006266:	460a      	mov	r2, r1
 8006268:	4601      	mov	r1, r0
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	f7ff bfa2 	b.w	80061b4 <__swbuf_r>
 8006270:	20000008 	.word	0x20000008

08006274 <_calloc_r>:
 8006274:	b510      	push	{r4, lr}
 8006276:	fb02 f101 	mul.w	r1, r2, r1
 800627a:	f7fd fced 	bl	8003c58 <_malloc_r>
 800627e:	4604      	mov	r4, r0
 8006280:	b1d8      	cbz	r0, 80062ba <_calloc_r+0x46>
 8006282:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006286:	f022 0203 	bic.w	r2, r2, #3
 800628a:	3a04      	subs	r2, #4
 800628c:	2a24      	cmp	r2, #36	; 0x24
 800628e:	d818      	bhi.n	80062c2 <_calloc_r+0x4e>
 8006290:	2a13      	cmp	r2, #19
 8006292:	d914      	bls.n	80062be <_calloc_r+0x4a>
 8006294:	2300      	movs	r3, #0
 8006296:	2a1b      	cmp	r2, #27
 8006298:	6003      	str	r3, [r0, #0]
 800629a:	6043      	str	r3, [r0, #4]
 800629c:	d916      	bls.n	80062cc <_calloc_r+0x58>
 800629e:	2a24      	cmp	r2, #36	; 0x24
 80062a0:	6083      	str	r3, [r0, #8]
 80062a2:	60c3      	str	r3, [r0, #12]
 80062a4:	bf11      	iteee	ne
 80062a6:	f100 0210 	addne.w	r2, r0, #16
 80062aa:	6103      	streq	r3, [r0, #16]
 80062ac:	6143      	streq	r3, [r0, #20]
 80062ae:	f100 0218 	addeq.w	r2, r0, #24
 80062b2:	2300      	movs	r3, #0
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	6053      	str	r3, [r2, #4]
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	4620      	mov	r0, r4
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	4602      	mov	r2, r0
 80062c0:	e7f7      	b.n	80062b2 <_calloc_r+0x3e>
 80062c2:	2100      	movs	r1, #0
 80062c4:	f7fa f8c4 	bl	8000450 <memset>
 80062c8:	4620      	mov	r0, r4
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	f100 0208 	add.w	r2, r0, #8
 80062d0:	e7ef      	b.n	80062b2 <_calloc_r+0x3e>
 80062d2:	bf00      	nop

080062d4 <_fclose_r>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	b139      	cbz	r1, 80062e8 <_fclose_r+0x14>
 80062d8:	4605      	mov	r5, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	b108      	cbz	r0, 80062e2 <_fclose_r+0xe>
 80062de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062e0:	b383      	cbz	r3, 8006344 <_fclose_r+0x70>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	b913      	cbnz	r3, 80062ee <_fclose_r+0x1a>
 80062e8:	2600      	movs	r6, #0
 80062ea:	4630      	mov	r0, r6
 80062ec:	bd70      	pop	{r4, r5, r6, pc}
 80062ee:	4621      	mov	r1, r4
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7fc ff1f 	bl	8003134 <__sflush_r>
 80062f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062f8:	4606      	mov	r6, r0
 80062fa:	b133      	cbz	r3, 800630a <_fclose_r+0x36>
 80062fc:	69e1      	ldr	r1, [r4, #28]
 80062fe:	4628      	mov	r0, r5
 8006300:	4798      	blx	r3
 8006302:	2800      	cmp	r0, #0
 8006304:	bfb8      	it	lt
 8006306:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	061b      	lsls	r3, r3, #24
 800630e:	d41c      	bmi.n	800634a <_fclose_r+0x76>
 8006310:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006312:	b141      	cbz	r1, 8006326 <_fclose_r+0x52>
 8006314:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006318:	4299      	cmp	r1, r3
 800631a:	d002      	beq.n	8006322 <_fclose_r+0x4e>
 800631c:	4628      	mov	r0, r5
 800631e:	f7fd f92b 	bl	8003578 <_free_r>
 8006322:	2300      	movs	r3, #0
 8006324:	6323      	str	r3, [r4, #48]	; 0x30
 8006326:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006328:	b121      	cbz	r1, 8006334 <_fclose_r+0x60>
 800632a:	4628      	mov	r0, r5
 800632c:	f7fd f924 	bl	8003578 <_free_r>
 8006330:	2300      	movs	r3, #0
 8006332:	6463      	str	r3, [r4, #68]	; 0x44
 8006334:	f7fd f8b4 	bl	80034a0 <__sfp_lock_acquire>
 8006338:	2300      	movs	r3, #0
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	f7fd f8b2 	bl	80034a4 <__sfp_lock_release>
 8006340:	4630      	mov	r0, r6
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f7fd f8a8 	bl	8003498 <__sinit>
 8006348:	e7cb      	b.n	80062e2 <_fclose_r+0xe>
 800634a:	6921      	ldr	r1, [r4, #16]
 800634c:	4628      	mov	r0, r5
 800634e:	f7fd f913 	bl	8003578 <_free_r>
 8006352:	e7dd      	b.n	8006310 <_fclose_r+0x3c>

08006354 <fclose>:
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <fclose+0xc>)
 8006356:	4601      	mov	r1, r0
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f7ff bfbb 	b.w	80062d4 <_fclose_r>
 800635e:	bf00      	nop
 8006360:	20000008 	.word	0x20000008

08006364 <__fputwc>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	4680      	mov	r8, r0
 800636c:	4689      	mov	r9, r1
 800636e:	4614      	mov	r4, r2
 8006370:	f7fd fbd4 	bl	8003b1c <__locale_mb_cur_max>
 8006374:	2801      	cmp	r0, #1
 8006376:	d036      	beq.n	80063e6 <__fputwc+0x82>
 8006378:	464a      	mov	r2, r9
 800637a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800637e:	a901      	add	r1, sp, #4
 8006380:	4640      	mov	r0, r8
 8006382:	f000 f873 	bl	800646c <_wcrtomb_r>
 8006386:	1c42      	adds	r2, r0, #1
 8006388:	4606      	mov	r6, r0
 800638a:	d025      	beq.n	80063d8 <__fputwc+0x74>
 800638c:	b3a8      	cbz	r0, 80063fa <__fputwc+0x96>
 800638e:	f89d e004 	ldrb.w	lr, [sp, #4]
 8006392:	2500      	movs	r5, #0
 8006394:	f10d 0a04 	add.w	sl, sp, #4
 8006398:	e009      	b.n	80063ae <__fputwc+0x4a>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	f883 e000 	strb.w	lr, [r3]
 80063a4:	3501      	adds	r5, #1
 80063a6:	42b5      	cmp	r5, r6
 80063a8:	d227      	bcs.n	80063fa <__fputwc+0x96>
 80063aa:	f815 e00a 	ldrb.w	lr, [r5, sl]
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	60a3      	str	r3, [r4, #8]
 80063b6:	daf0      	bge.n	800639a <__fputwc+0x36>
 80063b8:	69a7      	ldr	r7, [r4, #24]
 80063ba:	42bb      	cmp	r3, r7
 80063bc:	4671      	mov	r1, lr
 80063be:	4622      	mov	r2, r4
 80063c0:	4640      	mov	r0, r8
 80063c2:	db02      	blt.n	80063ca <__fputwc+0x66>
 80063c4:	f1be 0f0a 	cmp.w	lr, #10
 80063c8:	d1e7      	bne.n	800639a <__fputwc+0x36>
 80063ca:	f7ff fef3 	bl	80061b4 <__swbuf_r>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d1e8      	bne.n	80063a4 <__fputwc+0x40>
 80063d2:	b002      	add	sp, #8
 80063d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	b002      	add	sp, #8
 80063e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80063ea:	2bfe      	cmp	r3, #254	; 0xfe
 80063ec:	d8c4      	bhi.n	8006378 <__fputwc+0x14>
 80063ee:	fa5f fe89 	uxtb.w	lr, r9
 80063f2:	4606      	mov	r6, r0
 80063f4:	f88d e004 	strb.w	lr, [sp, #4]
 80063f8:	e7cb      	b.n	8006392 <__fputwc+0x2e>
 80063fa:	4648      	mov	r0, r9
 80063fc:	b002      	add	sp, #8
 80063fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006402:	bf00      	nop

08006404 <_fputwc_r>:
 8006404:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8006408:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800640c:	d10b      	bne.n	8006426 <_fputwc_r+0x22>
 800640e:	b410      	push	{r4}
 8006410:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006412:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006416:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800641a:	6654      	str	r4, [r2, #100]	; 0x64
 800641c:	8193      	strh	r3, [r2, #12]
 800641e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006422:	f7ff bf9f 	b.w	8006364 <__fputwc>
 8006426:	f7ff bf9d 	b.w	8006364 <__fputwc>
 800642a:	bf00      	nop

0800642c <fputwc>:
 800642c:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <fputwc+0x3c>)
 800642e:	b570      	push	{r4, r5, r6, lr}
 8006430:	681d      	ldr	r5, [r3, #0]
 8006432:	4606      	mov	r6, r0
 8006434:	460c      	mov	r4, r1
 8006436:	b10d      	cbz	r5, 800643c <fputwc+0x10>
 8006438:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800643a:	b18b      	cbz	r3, 8006460 <fputwc+0x34>
 800643c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006440:	049a      	lsls	r2, r3, #18
 8006442:	d406      	bmi.n	8006452 <fputwc+0x26>
 8006444:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800644a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800644e:	81a3      	strh	r3, [r4, #12]
 8006450:	6662      	str	r2, [r4, #100]	; 0x64
 8006452:	4622      	mov	r2, r4
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800645c:	f7ff bf82 	b.w	8006364 <__fputwc>
 8006460:	4628      	mov	r0, r5
 8006462:	f7fd f819 	bl	8003498 <__sinit>
 8006466:	e7e9      	b.n	800643c <fputwc+0x10>
 8006468:	20000008 	.word	0x20000008

0800646c <_wcrtomb_r>:
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	4605      	mov	r5, r0
 8006472:	b086      	sub	sp, #24
 8006474:	461e      	mov	r6, r3
 8006476:	460c      	mov	r4, r1
 8006478:	b1a1      	cbz	r1, 80064a4 <_wcrtomb_r+0x38>
 800647a:	4b10      	ldr	r3, [pc, #64]	; (80064bc <_wcrtomb_r+0x50>)
 800647c:	4617      	mov	r7, r2
 800647e:	f8d3 8000 	ldr.w	r8, [r3]
 8006482:	f7fd fb47 	bl	8003b14 <__locale_charset>
 8006486:	9600      	str	r6, [sp, #0]
 8006488:	4603      	mov	r3, r0
 800648a:	463a      	mov	r2, r7
 800648c:	4621      	mov	r1, r4
 800648e:	4628      	mov	r0, r5
 8006490:	47c0      	blx	r8
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	d103      	bne.n	800649e <_wcrtomb_r+0x32>
 8006496:	2200      	movs	r2, #0
 8006498:	238a      	movs	r3, #138	; 0x8a
 800649a:	6032      	str	r2, [r6, #0]
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	b006      	add	sp, #24
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <_wcrtomb_r+0x50>)
 80064a6:	681f      	ldr	r7, [r3, #0]
 80064a8:	f7fd fb34 	bl	8003b14 <__locale_charset>
 80064ac:	9600      	str	r6, [sp, #0]
 80064ae:	4603      	mov	r3, r0
 80064b0:	4622      	mov	r2, r4
 80064b2:	a903      	add	r1, sp, #12
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	e7eb      	b.n	8006492 <_wcrtomb_r+0x26>
 80064ba:	bf00      	nop
 80064bc:	200008c4 	.word	0x200008c4

080064c0 <wcrtomb>:
 80064c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c4:	4b12      	ldr	r3, [pc, #72]	; (8006510 <wcrtomb+0x50>)
 80064c6:	b086      	sub	sp, #24
 80064c8:	4616      	mov	r6, r2
 80064ca:	681d      	ldr	r5, [r3, #0]
 80064cc:	4604      	mov	r4, r0
 80064ce:	b1a0      	cbz	r0, 80064fa <wcrtomb+0x3a>
 80064d0:	4b10      	ldr	r3, [pc, #64]	; (8006514 <wcrtomb+0x54>)
 80064d2:	460f      	mov	r7, r1
 80064d4:	f8d3 8000 	ldr.w	r8, [r3]
 80064d8:	f7fd fb1c 	bl	8003b14 <__locale_charset>
 80064dc:	9600      	str	r6, [sp, #0]
 80064de:	4603      	mov	r3, r0
 80064e0:	463a      	mov	r2, r7
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	47c0      	blx	r8
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d103      	bne.n	80064f4 <wcrtomb+0x34>
 80064ec:	2200      	movs	r2, #0
 80064ee:	238a      	movs	r3, #138	; 0x8a
 80064f0:	6032      	str	r2, [r6, #0]
 80064f2:	602b      	str	r3, [r5, #0]
 80064f4:	b006      	add	sp, #24
 80064f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <wcrtomb+0x54>)
 80064fc:	681f      	ldr	r7, [r3, #0]
 80064fe:	f7fd fb09 	bl	8003b14 <__locale_charset>
 8006502:	9600      	str	r6, [sp, #0]
 8006504:	4603      	mov	r3, r0
 8006506:	4622      	mov	r2, r4
 8006508:	a903      	add	r1, sp, #12
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	e7eb      	b.n	80064e8 <wcrtomb+0x28>
 8006510:	20000008 	.word	0x20000008
 8006514:	200008c4 	.word	0x200008c4

08006518 <__ascii_wctomb>:
 8006518:	b121      	cbz	r1, 8006524 <__ascii_wctomb+0xc>
 800651a:	2aff      	cmp	r2, #255	; 0xff
 800651c:	d804      	bhi.n	8006528 <__ascii_wctomb+0x10>
 800651e:	700a      	strb	r2, [r1, #0]
 8006520:	2001      	movs	r0, #1
 8006522:	4770      	bx	lr
 8006524:	4608      	mov	r0, r1
 8006526:	4770      	bx	lr
 8006528:	238a      	movs	r3, #138	; 0x8a
 800652a:	6003      	str	r3, [r0, #0]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop

08006534 <_wctomb_r>:
 8006534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006538:	4c09      	ldr	r4, [pc, #36]	; (8006560 <_wctomb_r+0x2c>)
 800653a:	b082      	sub	sp, #8
 800653c:	4698      	mov	r8, r3
 800653e:	4605      	mov	r5, r0
 8006540:	460e      	mov	r6, r1
 8006542:	4617      	mov	r7, r2
 8006544:	6824      	ldr	r4, [r4, #0]
 8006546:	f7fd fae5 	bl	8003b14 <__locale_charset>
 800654a:	f8cd 8000 	str.w	r8, [sp]
 800654e:	4603      	mov	r3, r0
 8006550:	463a      	mov	r2, r7
 8006552:	4631      	mov	r1, r6
 8006554:	4628      	mov	r0, r5
 8006556:	47a0      	blx	r4
 8006558:	b002      	add	sp, #8
 800655a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800655e:	bf00      	nop
 8006560:	200008c4 	.word	0x200008c4

08006564 <__aeabi_drsub>:
 8006564:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006568:	e002      	b.n	8006570 <__adddf3>
 800656a:	bf00      	nop

0800656c <__aeabi_dsub>:
 800656c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006570 <__adddf3>:
 8006570:	b530      	push	{r4, r5, lr}
 8006572:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006576:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800657a:	ea94 0f05 	teq	r4, r5
 800657e:	bf08      	it	eq
 8006580:	ea90 0f02 	teqeq	r0, r2
 8006584:	bf1f      	itttt	ne
 8006586:	ea54 0c00 	orrsne.w	ip, r4, r0
 800658a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800658e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006592:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006596:	f000 80e2 	beq.w	800675e <__adddf3+0x1ee>
 800659a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800659e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80065a2:	bfb8      	it	lt
 80065a4:	426d      	neglt	r5, r5
 80065a6:	dd0c      	ble.n	80065c2 <__adddf3+0x52>
 80065a8:	442c      	add	r4, r5
 80065aa:	ea80 0202 	eor.w	r2, r0, r2
 80065ae:	ea81 0303 	eor.w	r3, r1, r3
 80065b2:	ea82 0000 	eor.w	r0, r2, r0
 80065b6:	ea83 0101 	eor.w	r1, r3, r1
 80065ba:	ea80 0202 	eor.w	r2, r0, r2
 80065be:	ea81 0303 	eor.w	r3, r1, r3
 80065c2:	2d36      	cmp	r5, #54	; 0x36
 80065c4:	bf88      	it	hi
 80065c6:	bd30      	pophi	{r4, r5, pc}
 80065c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80065cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80065d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80065d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80065d8:	d002      	beq.n	80065e0 <__adddf3+0x70>
 80065da:	4240      	negs	r0, r0
 80065dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80065e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80065e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80065e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80065ec:	d002      	beq.n	80065f4 <__adddf3+0x84>
 80065ee:	4252      	negs	r2, r2
 80065f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80065f4:	ea94 0f05 	teq	r4, r5
 80065f8:	f000 80a7 	beq.w	800674a <__adddf3+0x1da>
 80065fc:	f1a4 0401 	sub.w	r4, r4, #1
 8006600:	f1d5 0e20 	rsbs	lr, r5, #32
 8006604:	db0d      	blt.n	8006622 <__adddf3+0xb2>
 8006606:	fa02 fc0e 	lsl.w	ip, r2, lr
 800660a:	fa22 f205 	lsr.w	r2, r2, r5
 800660e:	1880      	adds	r0, r0, r2
 8006610:	f141 0100 	adc.w	r1, r1, #0
 8006614:	fa03 f20e 	lsl.w	r2, r3, lr
 8006618:	1880      	adds	r0, r0, r2
 800661a:	fa43 f305 	asr.w	r3, r3, r5
 800661e:	4159      	adcs	r1, r3
 8006620:	e00e      	b.n	8006640 <__adddf3+0xd0>
 8006622:	f1a5 0520 	sub.w	r5, r5, #32
 8006626:	f10e 0e20 	add.w	lr, lr, #32
 800662a:	2a01      	cmp	r2, #1
 800662c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006630:	bf28      	it	cs
 8006632:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006636:	fa43 f305 	asr.w	r3, r3, r5
 800663a:	18c0      	adds	r0, r0, r3
 800663c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006644:	d507      	bpl.n	8006656 <__adddf3+0xe6>
 8006646:	f04f 0e00 	mov.w	lr, #0
 800664a:	f1dc 0c00 	rsbs	ip, ip, #0
 800664e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006652:	eb6e 0101 	sbc.w	r1, lr, r1
 8006656:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800665a:	d31b      	bcc.n	8006694 <__adddf3+0x124>
 800665c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006660:	d30c      	bcc.n	800667c <__adddf3+0x10c>
 8006662:	0849      	lsrs	r1, r1, #1
 8006664:	ea5f 0030 	movs.w	r0, r0, rrx
 8006668:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800666c:	f104 0401 	add.w	r4, r4, #1
 8006670:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006674:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006678:	f080 809a 	bcs.w	80067b0 <__adddf3+0x240>
 800667c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006680:	bf08      	it	eq
 8006682:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006686:	f150 0000 	adcs.w	r0, r0, #0
 800668a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800668e:	ea41 0105 	orr.w	r1, r1, r5
 8006692:	bd30      	pop	{r4, r5, pc}
 8006694:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006698:	4140      	adcs	r0, r0
 800669a:	eb41 0101 	adc.w	r1, r1, r1
 800669e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80066a2:	f1a4 0401 	sub.w	r4, r4, #1
 80066a6:	d1e9      	bne.n	800667c <__adddf3+0x10c>
 80066a8:	f091 0f00 	teq	r1, #0
 80066ac:	bf04      	itt	eq
 80066ae:	4601      	moveq	r1, r0
 80066b0:	2000      	moveq	r0, #0
 80066b2:	fab1 f381 	clz	r3, r1
 80066b6:	bf08      	it	eq
 80066b8:	3320      	addeq	r3, #32
 80066ba:	f1a3 030b 	sub.w	r3, r3, #11
 80066be:	f1b3 0220 	subs.w	r2, r3, #32
 80066c2:	da0c      	bge.n	80066de <__adddf3+0x16e>
 80066c4:	320c      	adds	r2, #12
 80066c6:	dd08      	ble.n	80066da <__adddf3+0x16a>
 80066c8:	f102 0c14 	add.w	ip, r2, #20
 80066cc:	f1c2 020c 	rsb	r2, r2, #12
 80066d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80066d4:	fa21 f102 	lsr.w	r1, r1, r2
 80066d8:	e00c      	b.n	80066f4 <__adddf3+0x184>
 80066da:	f102 0214 	add.w	r2, r2, #20
 80066de:	bfd8      	it	le
 80066e0:	f1c2 0c20 	rsble	ip, r2, #32
 80066e4:	fa01 f102 	lsl.w	r1, r1, r2
 80066e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80066ec:	bfdc      	itt	le
 80066ee:	ea41 010c 	orrle.w	r1, r1, ip
 80066f2:	4090      	lslle	r0, r2
 80066f4:	1ae4      	subs	r4, r4, r3
 80066f6:	bfa2      	ittt	ge
 80066f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80066fc:	4329      	orrge	r1, r5
 80066fe:	bd30      	popge	{r4, r5, pc}
 8006700:	ea6f 0404 	mvn.w	r4, r4
 8006704:	3c1f      	subs	r4, #31
 8006706:	da1c      	bge.n	8006742 <__adddf3+0x1d2>
 8006708:	340c      	adds	r4, #12
 800670a:	dc0e      	bgt.n	800672a <__adddf3+0x1ba>
 800670c:	f104 0414 	add.w	r4, r4, #20
 8006710:	f1c4 0220 	rsb	r2, r4, #32
 8006714:	fa20 f004 	lsr.w	r0, r0, r4
 8006718:	fa01 f302 	lsl.w	r3, r1, r2
 800671c:	ea40 0003 	orr.w	r0, r0, r3
 8006720:	fa21 f304 	lsr.w	r3, r1, r4
 8006724:	ea45 0103 	orr.w	r1, r5, r3
 8006728:	bd30      	pop	{r4, r5, pc}
 800672a:	f1c4 040c 	rsb	r4, r4, #12
 800672e:	f1c4 0220 	rsb	r2, r4, #32
 8006732:	fa20 f002 	lsr.w	r0, r0, r2
 8006736:	fa01 f304 	lsl.w	r3, r1, r4
 800673a:	ea40 0003 	orr.w	r0, r0, r3
 800673e:	4629      	mov	r1, r5
 8006740:	bd30      	pop	{r4, r5, pc}
 8006742:	fa21 f004 	lsr.w	r0, r1, r4
 8006746:	4629      	mov	r1, r5
 8006748:	bd30      	pop	{r4, r5, pc}
 800674a:	f094 0f00 	teq	r4, #0
 800674e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006752:	bf06      	itte	eq
 8006754:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006758:	3401      	addeq	r4, #1
 800675a:	3d01      	subne	r5, #1
 800675c:	e74e      	b.n	80065fc <__adddf3+0x8c>
 800675e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006762:	bf18      	it	ne
 8006764:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006768:	d029      	beq.n	80067be <__adddf3+0x24e>
 800676a:	ea94 0f05 	teq	r4, r5
 800676e:	bf08      	it	eq
 8006770:	ea90 0f02 	teqeq	r0, r2
 8006774:	d005      	beq.n	8006782 <__adddf3+0x212>
 8006776:	ea54 0c00 	orrs.w	ip, r4, r0
 800677a:	bf04      	itt	eq
 800677c:	4619      	moveq	r1, r3
 800677e:	4610      	moveq	r0, r2
 8006780:	bd30      	pop	{r4, r5, pc}
 8006782:	ea91 0f03 	teq	r1, r3
 8006786:	bf1e      	ittt	ne
 8006788:	2100      	movne	r1, #0
 800678a:	2000      	movne	r0, #0
 800678c:	bd30      	popne	{r4, r5, pc}
 800678e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006792:	d105      	bne.n	80067a0 <__adddf3+0x230>
 8006794:	0040      	lsls	r0, r0, #1
 8006796:	4149      	adcs	r1, r1
 8006798:	bf28      	it	cs
 800679a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800679e:	bd30      	pop	{r4, r5, pc}
 80067a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80067a4:	bf3c      	itt	cc
 80067a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80067aa:	bd30      	popcc	{r4, r5, pc}
 80067ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80067b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80067b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067b8:	f04f 0000 	mov.w	r0, #0
 80067bc:	bd30      	pop	{r4, r5, pc}
 80067be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80067c2:	bf1a      	itte	ne
 80067c4:	4619      	movne	r1, r3
 80067c6:	4610      	movne	r0, r2
 80067c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80067cc:	bf1c      	itt	ne
 80067ce:	460b      	movne	r3, r1
 80067d0:	4602      	movne	r2, r0
 80067d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80067d6:	bf06      	itte	eq
 80067d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80067dc:	ea91 0f03 	teqeq	r1, r3
 80067e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80067e4:	bd30      	pop	{r4, r5, pc}
 80067e6:	bf00      	nop

080067e8 <__aeabi_ui2d>:
 80067e8:	f090 0f00 	teq	r0, #0
 80067ec:	bf04      	itt	eq
 80067ee:	2100      	moveq	r1, #0
 80067f0:	4770      	bxeq	lr
 80067f2:	b530      	push	{r4, r5, lr}
 80067f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80067f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80067fc:	f04f 0500 	mov.w	r5, #0
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	e750      	b.n	80066a8 <__adddf3+0x138>
 8006806:	bf00      	nop

08006808 <__aeabi_i2d>:
 8006808:	f090 0f00 	teq	r0, #0
 800680c:	bf04      	itt	eq
 800680e:	2100      	moveq	r1, #0
 8006810:	4770      	bxeq	lr
 8006812:	b530      	push	{r4, r5, lr}
 8006814:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006818:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800681c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006820:	bf48      	it	mi
 8006822:	4240      	negmi	r0, r0
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	e73e      	b.n	80066a8 <__adddf3+0x138>
 800682a:	bf00      	nop

0800682c <__aeabi_f2d>:
 800682c:	0042      	lsls	r2, r0, #1
 800682e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006832:	ea4f 0131 	mov.w	r1, r1, rrx
 8006836:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800683a:	bf1f      	itttt	ne
 800683c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006840:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006844:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006848:	4770      	bxne	lr
 800684a:	f092 0f00 	teq	r2, #0
 800684e:	bf14      	ite	ne
 8006850:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006854:	4770      	bxeq	lr
 8006856:	b530      	push	{r4, r5, lr}
 8006858:	f44f 7460 	mov.w	r4, #896	; 0x380
 800685c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006864:	e720      	b.n	80066a8 <__adddf3+0x138>
 8006866:	bf00      	nop

08006868 <__aeabi_ul2d>:
 8006868:	ea50 0201 	orrs.w	r2, r0, r1
 800686c:	bf08      	it	eq
 800686e:	4770      	bxeq	lr
 8006870:	b530      	push	{r4, r5, lr}
 8006872:	f04f 0500 	mov.w	r5, #0
 8006876:	e00a      	b.n	800688e <__aeabi_l2d+0x16>

08006878 <__aeabi_l2d>:
 8006878:	ea50 0201 	orrs.w	r2, r0, r1
 800687c:	bf08      	it	eq
 800687e:	4770      	bxeq	lr
 8006880:	b530      	push	{r4, r5, lr}
 8006882:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006886:	d502      	bpl.n	800688e <__aeabi_l2d+0x16>
 8006888:	4240      	negs	r0, r0
 800688a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800688e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006892:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006896:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800689a:	f43f aedc 	beq.w	8006656 <__adddf3+0xe6>
 800689e:	f04f 0203 	mov.w	r2, #3
 80068a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80068a6:	bf18      	it	ne
 80068a8:	3203      	addne	r2, #3
 80068aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80068ae:	bf18      	it	ne
 80068b0:	3203      	addne	r2, #3
 80068b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80068b6:	f1c2 0320 	rsb	r3, r2, #32
 80068ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80068be:	fa20 f002 	lsr.w	r0, r0, r2
 80068c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80068c6:	ea40 000e 	orr.w	r0, r0, lr
 80068ca:	fa21 f102 	lsr.w	r1, r1, r2
 80068ce:	4414      	add	r4, r2
 80068d0:	e6c1      	b.n	8006656 <__adddf3+0xe6>
 80068d2:	bf00      	nop

080068d4 <__aeabi_dmul>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80068da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80068de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80068e2:	bf1d      	ittte	ne
 80068e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80068e8:	ea94 0f0c 	teqne	r4, ip
 80068ec:	ea95 0f0c 	teqne	r5, ip
 80068f0:	f000 f8de 	bleq	8006ab0 <__aeabi_dmul+0x1dc>
 80068f4:	442c      	add	r4, r5
 80068f6:	ea81 0603 	eor.w	r6, r1, r3
 80068fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80068fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006902:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006906:	bf18      	it	ne
 8006908:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800690c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006914:	d038      	beq.n	8006988 <__aeabi_dmul+0xb4>
 8006916:	fba0 ce02 	umull	ip, lr, r0, r2
 800691a:	f04f 0500 	mov.w	r5, #0
 800691e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006922:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006926:	fbe0 e503 	umlal	lr, r5, r0, r3
 800692a:	f04f 0600 	mov.w	r6, #0
 800692e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006932:	f09c 0f00 	teq	ip, #0
 8006936:	bf18      	it	ne
 8006938:	f04e 0e01 	orrne.w	lr, lr, #1
 800693c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006940:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006944:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006948:	d204      	bcs.n	8006954 <__aeabi_dmul+0x80>
 800694a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800694e:	416d      	adcs	r5, r5
 8006950:	eb46 0606 	adc.w	r6, r6, r6
 8006954:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006958:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800695c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006960:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006964:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006968:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800696c:	bf88      	it	hi
 800696e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006972:	d81e      	bhi.n	80069b2 <__aeabi_dmul+0xde>
 8006974:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006978:	bf08      	it	eq
 800697a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800697e:	f150 0000 	adcs.w	r0, r0, #0
 8006982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800698c:	ea46 0101 	orr.w	r1, r6, r1
 8006990:	ea40 0002 	orr.w	r0, r0, r2
 8006994:	ea81 0103 	eor.w	r1, r1, r3
 8006998:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800699c:	bfc2      	ittt	gt
 800699e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80069a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80069a6:	bd70      	popgt	{r4, r5, r6, pc}
 80069a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80069ac:	f04f 0e00 	mov.w	lr, #0
 80069b0:	3c01      	subs	r4, #1
 80069b2:	f300 80ab 	bgt.w	8006b0c <__aeabi_dmul+0x238>
 80069b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80069ba:	bfde      	ittt	le
 80069bc:	2000      	movle	r0, #0
 80069be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80069c2:	bd70      	pople	{r4, r5, r6, pc}
 80069c4:	f1c4 0400 	rsb	r4, r4, #0
 80069c8:	3c20      	subs	r4, #32
 80069ca:	da35      	bge.n	8006a38 <__aeabi_dmul+0x164>
 80069cc:	340c      	adds	r4, #12
 80069ce:	dc1b      	bgt.n	8006a08 <__aeabi_dmul+0x134>
 80069d0:	f104 0414 	add.w	r4, r4, #20
 80069d4:	f1c4 0520 	rsb	r5, r4, #32
 80069d8:	fa00 f305 	lsl.w	r3, r0, r5
 80069dc:	fa20 f004 	lsr.w	r0, r0, r4
 80069e0:	fa01 f205 	lsl.w	r2, r1, r5
 80069e4:	ea40 0002 	orr.w	r0, r0, r2
 80069e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80069ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80069f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80069f4:	fa21 f604 	lsr.w	r6, r1, r4
 80069f8:	eb42 0106 	adc.w	r1, r2, r6
 80069fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006a00:	bf08      	it	eq
 8006a02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	f1c4 040c 	rsb	r4, r4, #12
 8006a0c:	f1c4 0520 	rsb	r5, r4, #32
 8006a10:	fa00 f304 	lsl.w	r3, r0, r4
 8006a14:	fa20 f005 	lsr.w	r0, r0, r5
 8006a18:	fa01 f204 	lsl.w	r2, r1, r4
 8006a1c:	ea40 0002 	orr.w	r0, r0, r2
 8006a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006a24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006a28:	f141 0100 	adc.w	r1, r1, #0
 8006a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006a30:	bf08      	it	eq
 8006a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f1c4 0520 	rsb	r5, r4, #32
 8006a3c:	fa00 f205 	lsl.w	r2, r0, r5
 8006a40:	ea4e 0e02 	orr.w	lr, lr, r2
 8006a44:	fa20 f304 	lsr.w	r3, r0, r4
 8006a48:	fa01 f205 	lsl.w	r2, r1, r5
 8006a4c:	ea43 0302 	orr.w	r3, r3, r2
 8006a50:	fa21 f004 	lsr.w	r0, r1, r4
 8006a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006a58:	fa21 f204 	lsr.w	r2, r1, r4
 8006a5c:	ea20 0002 	bic.w	r0, r0, r2
 8006a60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006a64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006a68:	bf08      	it	eq
 8006a6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f094 0f00 	teq	r4, #0
 8006a74:	d10f      	bne.n	8006a96 <__aeabi_dmul+0x1c2>
 8006a76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006a7a:	0040      	lsls	r0, r0, #1
 8006a7c:	eb41 0101 	adc.w	r1, r1, r1
 8006a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a84:	bf08      	it	eq
 8006a86:	3c01      	subeq	r4, #1
 8006a88:	d0f7      	beq.n	8006a7a <__aeabi_dmul+0x1a6>
 8006a8a:	ea41 0106 	orr.w	r1, r1, r6
 8006a8e:	f095 0f00 	teq	r5, #0
 8006a92:	bf18      	it	ne
 8006a94:	4770      	bxne	lr
 8006a96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006a9a:	0052      	lsls	r2, r2, #1
 8006a9c:	eb43 0303 	adc.w	r3, r3, r3
 8006aa0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006aa4:	bf08      	it	eq
 8006aa6:	3d01      	subeq	r5, #1
 8006aa8:	d0f7      	beq.n	8006a9a <__aeabi_dmul+0x1c6>
 8006aaa:	ea43 0306 	orr.w	r3, r3, r6
 8006aae:	4770      	bx	lr
 8006ab0:	ea94 0f0c 	teq	r4, ip
 8006ab4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006ab8:	bf18      	it	ne
 8006aba:	ea95 0f0c 	teqne	r5, ip
 8006abe:	d00c      	beq.n	8006ada <__aeabi_dmul+0x206>
 8006ac0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ac4:	bf18      	it	ne
 8006ac6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006aca:	d1d1      	bne.n	8006a70 <__aeabi_dmul+0x19c>
 8006acc:	ea81 0103 	eor.w	r1, r1, r3
 8006ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ad4:	f04f 0000 	mov.w	r0, #0
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ade:	bf06      	itte	eq
 8006ae0:	4610      	moveq	r0, r2
 8006ae2:	4619      	moveq	r1, r3
 8006ae4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ae8:	d019      	beq.n	8006b1e <__aeabi_dmul+0x24a>
 8006aea:	ea94 0f0c 	teq	r4, ip
 8006aee:	d102      	bne.n	8006af6 <__aeabi_dmul+0x222>
 8006af0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006af4:	d113      	bne.n	8006b1e <__aeabi_dmul+0x24a>
 8006af6:	ea95 0f0c 	teq	r5, ip
 8006afa:	d105      	bne.n	8006b08 <__aeabi_dmul+0x234>
 8006afc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006b00:	bf1c      	itt	ne
 8006b02:	4610      	movne	r0, r2
 8006b04:	4619      	movne	r1, r3
 8006b06:	d10a      	bne.n	8006b1e <__aeabi_dmul+0x24a>
 8006b08:	ea81 0103 	eor.w	r1, r1, r3
 8006b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006b14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b18:	f04f 0000 	mov.w	r0, #0
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006b22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006b26:	bd70      	pop	{r4, r5, r6, pc}

08006b28 <__aeabi_ddiv>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006b2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006b32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006b36:	bf1d      	ittte	ne
 8006b38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006b3c:	ea94 0f0c 	teqne	r4, ip
 8006b40:	ea95 0f0c 	teqne	r5, ip
 8006b44:	f000 f8a7 	bleq	8006c96 <__aeabi_ddiv+0x16e>
 8006b48:	eba4 0405 	sub.w	r4, r4, r5
 8006b4c:	ea81 0e03 	eor.w	lr, r1, r3
 8006b50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006b54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006b58:	f000 8088 	beq.w	8006c6c <__aeabi_ddiv+0x144>
 8006b5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006b60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006b64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006b68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006b6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006b70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006b74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006b78:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006b7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006b80:	429d      	cmp	r5, r3
 8006b82:	bf08      	it	eq
 8006b84:	4296      	cmpeq	r6, r2
 8006b86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006b8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006b8e:	d202      	bcs.n	8006b96 <__aeabi_ddiv+0x6e>
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8006b96:	1ab6      	subs	r6, r6, r2
 8006b98:	eb65 0503 	sbc.w	r5, r5, r3
 8006b9c:	085b      	lsrs	r3, r3, #1
 8006b9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006ba2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ba6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006baa:	ebb6 0e02 	subs.w	lr, r6, r2
 8006bae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006bb2:	bf22      	ittt	cs
 8006bb4:	1ab6      	subcs	r6, r6, r2
 8006bb6:	4675      	movcs	r5, lr
 8006bb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	ea4f 0232 	mov.w	r2, r2, rrx
 8006bc2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006bc6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006bca:	bf22      	ittt	cs
 8006bcc:	1ab6      	subcs	r6, r6, r2
 8006bce:	4675      	movcs	r5, lr
 8006bd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8006bda:	ebb6 0e02 	subs.w	lr, r6, r2
 8006bde:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006be2:	bf22      	ittt	cs
 8006be4:	1ab6      	subcs	r6, r6, r2
 8006be6:	4675      	movcs	r5, lr
 8006be8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	ea4f 0232 	mov.w	r2, r2, rrx
 8006bf2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006bfa:	bf22      	ittt	cs
 8006bfc:	1ab6      	subcs	r6, r6, r2
 8006bfe:	4675      	movcs	r5, lr
 8006c00:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006c04:	ea55 0e06 	orrs.w	lr, r5, r6
 8006c08:	d018      	beq.n	8006c3c <__aeabi_ddiv+0x114>
 8006c0a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006c0e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006c12:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006c16:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006c1a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006c1e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006c22:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006c26:	d1c0      	bne.n	8006baa <__aeabi_ddiv+0x82>
 8006c28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006c2c:	d10b      	bne.n	8006c46 <__aeabi_ddiv+0x11e>
 8006c2e:	ea41 0100 	orr.w	r1, r1, r0
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8006c3a:	e7b6      	b.n	8006baa <__aeabi_ddiv+0x82>
 8006c3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006c40:	bf04      	itt	eq
 8006c42:	4301      	orreq	r1, r0
 8006c44:	2000      	moveq	r0, #0
 8006c46:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006c4a:	bf88      	it	hi
 8006c4c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006c50:	f63f aeaf 	bhi.w	80069b2 <__aeabi_dmul+0xde>
 8006c54:	ebb5 0c03 	subs.w	ip, r5, r3
 8006c58:	bf04      	itt	eq
 8006c5a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8006c5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006c62:	f150 0000 	adcs.w	r0, r0, #0
 8006c66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006c70:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006c74:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006c78:	bfc2      	ittt	gt
 8006c7a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006c7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006c82:	bd70      	popgt	{r4, r5, r6, pc}
 8006c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006c88:	f04f 0e00 	mov.w	lr, #0
 8006c8c:	3c01      	subs	r4, #1
 8006c8e:	e690      	b.n	80069b2 <__aeabi_dmul+0xde>
 8006c90:	ea45 0e06 	orr.w	lr, r5, r6
 8006c94:	e68d      	b.n	80069b2 <__aeabi_dmul+0xde>
 8006c96:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006c9a:	ea94 0f0c 	teq	r4, ip
 8006c9e:	bf08      	it	eq
 8006ca0:	ea95 0f0c 	teqeq	r5, ip
 8006ca4:	f43f af3b 	beq.w	8006b1e <__aeabi_dmul+0x24a>
 8006ca8:	ea94 0f0c 	teq	r4, ip
 8006cac:	d10a      	bne.n	8006cc4 <__aeabi_ddiv+0x19c>
 8006cae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006cb2:	f47f af34 	bne.w	8006b1e <__aeabi_dmul+0x24a>
 8006cb6:	ea95 0f0c 	teq	r5, ip
 8006cba:	f47f af25 	bne.w	8006b08 <__aeabi_dmul+0x234>
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	e72c      	b.n	8006b1e <__aeabi_dmul+0x24a>
 8006cc4:	ea95 0f0c 	teq	r5, ip
 8006cc8:	d106      	bne.n	8006cd8 <__aeabi_ddiv+0x1b0>
 8006cca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006cce:	f43f aefd 	beq.w	8006acc <__aeabi_dmul+0x1f8>
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	e722      	b.n	8006b1e <__aeabi_dmul+0x24a>
 8006cd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006cdc:	bf18      	it	ne
 8006cde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ce2:	f47f aec5 	bne.w	8006a70 <__aeabi_dmul+0x19c>
 8006ce6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006cea:	f47f af0d 	bne.w	8006b08 <__aeabi_dmul+0x234>
 8006cee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8006cf2:	f47f aeeb 	bne.w	8006acc <__aeabi_dmul+0x1f8>
 8006cf6:	e712      	b.n	8006b1e <__aeabi_dmul+0x24a>

08006cf8 <__gedf2>:
 8006cf8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006cfc:	e006      	b.n	8006d0c <__cmpdf2+0x4>
 8006cfe:	bf00      	nop

08006d00 <__ledf2>:
 8006d00:	f04f 0c01 	mov.w	ip, #1
 8006d04:	e002      	b.n	8006d0c <__cmpdf2+0x4>
 8006d06:	bf00      	nop

08006d08 <__cmpdf2>:
 8006d08:	f04f 0c01 	mov.w	ip, #1
 8006d0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8006d10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006d18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006d1c:	bf18      	it	ne
 8006d1e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8006d22:	d01b      	beq.n	8006d5c <__cmpdf2+0x54>
 8006d24:	b001      	add	sp, #4
 8006d26:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006d2a:	bf0c      	ite	eq
 8006d2c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8006d30:	ea91 0f03 	teqne	r1, r3
 8006d34:	bf02      	ittt	eq
 8006d36:	ea90 0f02 	teqeq	r0, r2
 8006d3a:	2000      	moveq	r0, #0
 8006d3c:	4770      	bxeq	lr
 8006d3e:	f110 0f00 	cmn.w	r0, #0
 8006d42:	ea91 0f03 	teq	r1, r3
 8006d46:	bf58      	it	pl
 8006d48:	4299      	cmppl	r1, r3
 8006d4a:	bf08      	it	eq
 8006d4c:	4290      	cmpeq	r0, r2
 8006d4e:	bf2c      	ite	cs
 8006d50:	17d8      	asrcs	r0, r3, #31
 8006d52:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006d56:	f040 0001 	orr.w	r0, r0, #1
 8006d5a:	4770      	bx	lr
 8006d5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006d64:	d102      	bne.n	8006d6c <__cmpdf2+0x64>
 8006d66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006d6a:	d107      	bne.n	8006d7c <__cmpdf2+0x74>
 8006d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006d70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006d74:	d1d6      	bne.n	8006d24 <__cmpdf2+0x1c>
 8006d76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006d7a:	d0d3      	beq.n	8006d24 <__cmpdf2+0x1c>
 8006d7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop

08006d84 <__aeabi_cdrcmple>:
 8006d84:	4684      	mov	ip, r0
 8006d86:	4610      	mov	r0, r2
 8006d88:	4662      	mov	r2, ip
 8006d8a:	468c      	mov	ip, r1
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4663      	mov	r3, ip
 8006d90:	e000      	b.n	8006d94 <__aeabi_cdcmpeq>
 8006d92:	bf00      	nop

08006d94 <__aeabi_cdcmpeq>:
 8006d94:	b501      	push	{r0, lr}
 8006d96:	f7ff ffb7 	bl	8006d08 <__cmpdf2>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	bf48      	it	mi
 8006d9e:	f110 0f00 	cmnmi.w	r0, #0
 8006da2:	bd01      	pop	{r0, pc}

08006da4 <__aeabi_dcmpeq>:
 8006da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006da8:	f7ff fff4 	bl	8006d94 <__aeabi_cdcmpeq>
 8006dac:	bf0c      	ite	eq
 8006dae:	2001      	moveq	r0, #1
 8006db0:	2000      	movne	r0, #0
 8006db2:	f85d fb08 	ldr.w	pc, [sp], #8
 8006db6:	bf00      	nop

08006db8 <__aeabi_dcmplt>:
 8006db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006dbc:	f7ff ffea 	bl	8006d94 <__aeabi_cdcmpeq>
 8006dc0:	bf34      	ite	cc
 8006dc2:	2001      	movcc	r0, #1
 8006dc4:	2000      	movcs	r0, #0
 8006dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8006dca:	bf00      	nop

08006dcc <__aeabi_dcmple>:
 8006dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006dd0:	f7ff ffe0 	bl	8006d94 <__aeabi_cdcmpeq>
 8006dd4:	bf94      	ite	ls
 8006dd6:	2001      	movls	r0, #1
 8006dd8:	2000      	movhi	r0, #0
 8006dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8006dde:	bf00      	nop

08006de0 <__aeabi_dcmpge>:
 8006de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006de4:	f7ff ffce 	bl	8006d84 <__aeabi_cdrcmple>
 8006de8:	bf94      	ite	ls
 8006dea:	2001      	movls	r0, #1
 8006dec:	2000      	movhi	r0, #0
 8006dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8006df2:	bf00      	nop

08006df4 <__aeabi_dcmpgt>:
 8006df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006df8:	f7ff ffc4 	bl	8006d84 <__aeabi_cdrcmple>
 8006dfc:	bf34      	ite	cc
 8006dfe:	2001      	movcc	r0, #1
 8006e00:	2000      	movcs	r0, #0
 8006e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8006e06:	bf00      	nop

08006e08 <__aeabi_dcmpun>:
 8006e08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006e0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006e10:	d102      	bne.n	8006e18 <__aeabi_dcmpun+0x10>
 8006e12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006e16:	d10a      	bne.n	8006e2e <__aeabi_dcmpun+0x26>
 8006e18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006e1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006e20:	d102      	bne.n	8006e28 <__aeabi_dcmpun+0x20>
 8006e22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006e26:	d102      	bne.n	8006e2e <__aeabi_dcmpun+0x26>
 8006e28:	f04f 0000 	mov.w	r0, #0
 8006e2c:	4770      	bx	lr
 8006e2e:	f04f 0001 	mov.w	r0, #1
 8006e32:	4770      	bx	lr

08006e34 <__aeabi_d2iz>:
 8006e34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006e38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8006e3c:	d215      	bcs.n	8006e6a <__aeabi_d2iz+0x36>
 8006e3e:	d511      	bpl.n	8006e64 <__aeabi_d2iz+0x30>
 8006e40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8006e44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006e48:	d912      	bls.n	8006e70 <__aeabi_d2iz+0x3c>
 8006e4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006e56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006e5a:	fa23 f002 	lsr.w	r0, r3, r2
 8006e5e:	bf18      	it	ne
 8006e60:	4240      	negne	r0, r0
 8006e62:	4770      	bx	lr
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	4770      	bx	lr
 8006e6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006e6e:	d105      	bne.n	8006e7c <__aeabi_d2iz+0x48>
 8006e70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8006e74:	bf08      	it	eq
 8006e76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8006e7a:	4770      	bx	lr
 8006e7c:	f04f 0000 	mov.w	r0, #0
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop

08006e84 <__aeabi_uldivmod>:
 8006e84:	b953      	cbnz	r3, 8006e9c <__aeabi_uldivmod+0x18>
 8006e86:	b94a      	cbnz	r2, 8006e9c <__aeabi_uldivmod+0x18>
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	bf08      	it	eq
 8006e8c:	2800      	cmpeq	r0, #0
 8006e8e:	bf1c      	itt	ne
 8006e90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8006e94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8006e98:	f000 b97a 	b.w	8007190 <__aeabi_idiv0>
 8006e9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006ea0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006ea4:	f000 f806 	bl	8006eb4 <__udivmoddi4>
 8006ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb0:	b004      	add	sp, #16
 8006eb2:	4770      	bx	lr

08006eb4 <__udivmoddi4>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	468c      	mov	ip, r1
 8006eba:	460d      	mov	r5, r1
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	9e08      	ldr	r6, [sp, #32]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d151      	bne.n	8006f68 <__udivmoddi4+0xb4>
 8006ec4:	428a      	cmp	r2, r1
 8006ec6:	4617      	mov	r7, r2
 8006ec8:	d96d      	bls.n	8006fa6 <__udivmoddi4+0xf2>
 8006eca:	fab2 fe82 	clz	lr, r2
 8006ece:	f1be 0f00 	cmp.w	lr, #0
 8006ed2:	d00b      	beq.n	8006eec <__udivmoddi4+0x38>
 8006ed4:	f1ce 0c20 	rsb	ip, lr, #32
 8006ed8:	fa01 f50e 	lsl.w	r5, r1, lr
 8006edc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006ee0:	fa02 f70e 	lsl.w	r7, r2, lr
 8006ee4:	ea4c 0c05 	orr.w	ip, ip, r5
 8006ee8:	fa00 f40e 	lsl.w	r4, r0, lr
 8006eec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8006ef0:	0c25      	lsrs	r5, r4, #16
 8006ef2:	fbbc f8fa 	udiv	r8, ip, sl
 8006ef6:	fa1f f987 	uxth.w	r9, r7
 8006efa:	fb0a cc18 	mls	ip, sl, r8, ip
 8006efe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8006f02:	fb08 f309 	mul.w	r3, r8, r9
 8006f06:	42ab      	cmp	r3, r5
 8006f08:	d90a      	bls.n	8006f20 <__udivmoddi4+0x6c>
 8006f0a:	19ed      	adds	r5, r5, r7
 8006f0c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8006f10:	f080 8123 	bcs.w	800715a <__udivmoddi4+0x2a6>
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	f240 8120 	bls.w	800715a <__udivmoddi4+0x2a6>
 8006f1a:	f1a8 0802 	sub.w	r8, r8, #2
 8006f1e:	443d      	add	r5, r7
 8006f20:	1aed      	subs	r5, r5, r3
 8006f22:	b2a4      	uxth	r4, r4
 8006f24:	fbb5 f0fa 	udiv	r0, r5, sl
 8006f28:	fb0a 5510 	mls	r5, sl, r0, r5
 8006f2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8006f30:	fb00 f909 	mul.w	r9, r0, r9
 8006f34:	45a1      	cmp	r9, r4
 8006f36:	d909      	bls.n	8006f4c <__udivmoddi4+0x98>
 8006f38:	19e4      	adds	r4, r4, r7
 8006f3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f3e:	f080 810a 	bcs.w	8007156 <__udivmoddi4+0x2a2>
 8006f42:	45a1      	cmp	r9, r4
 8006f44:	f240 8107 	bls.w	8007156 <__udivmoddi4+0x2a2>
 8006f48:	3802      	subs	r0, #2
 8006f4a:	443c      	add	r4, r7
 8006f4c:	eba4 0409 	sub.w	r4, r4, r9
 8006f50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8006f54:	2100      	movs	r1, #0
 8006f56:	2e00      	cmp	r6, #0
 8006f58:	d061      	beq.n	800701e <__udivmoddi4+0x16a>
 8006f5a:	fa24 f40e 	lsr.w	r4, r4, lr
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6034      	str	r4, [r6, #0]
 8006f62:	6073      	str	r3, [r6, #4]
 8006f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f68:	428b      	cmp	r3, r1
 8006f6a:	d907      	bls.n	8006f7c <__udivmoddi4+0xc8>
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d054      	beq.n	800701a <__udivmoddi4+0x166>
 8006f70:	2100      	movs	r1, #0
 8006f72:	e886 0021 	stmia.w	r6, {r0, r5}
 8006f76:	4608      	mov	r0, r1
 8006f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7c:	fab3 f183 	clz	r1, r3
 8006f80:	2900      	cmp	r1, #0
 8006f82:	f040 808e 	bne.w	80070a2 <__udivmoddi4+0x1ee>
 8006f86:	42ab      	cmp	r3, r5
 8006f88:	d302      	bcc.n	8006f90 <__udivmoddi4+0xdc>
 8006f8a:	4282      	cmp	r2, r0
 8006f8c:	f200 80fa 	bhi.w	8007184 <__udivmoddi4+0x2d0>
 8006f90:	1a84      	subs	r4, r0, r2
 8006f92:	eb65 0503 	sbc.w	r5, r5, r3
 8006f96:	2001      	movs	r0, #1
 8006f98:	46ac      	mov	ip, r5
 8006f9a:	2e00      	cmp	r6, #0
 8006f9c:	d03f      	beq.n	800701e <__udivmoddi4+0x16a>
 8006f9e:	e886 1010 	stmia.w	r6, {r4, ip}
 8006fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa6:	b912      	cbnz	r2, 8006fae <__udivmoddi4+0xfa>
 8006fa8:	2701      	movs	r7, #1
 8006faa:	fbb7 f7f2 	udiv	r7, r7, r2
 8006fae:	fab7 fe87 	clz	lr, r7
 8006fb2:	f1be 0f00 	cmp.w	lr, #0
 8006fb6:	d134      	bne.n	8007022 <__udivmoddi4+0x16e>
 8006fb8:	1beb      	subs	r3, r5, r7
 8006fba:	0c3a      	lsrs	r2, r7, #16
 8006fbc:	fa1f fc87 	uxth.w	ip, r7
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	fbb3 f8f2 	udiv	r8, r3, r2
 8006fc6:	0c25      	lsrs	r5, r4, #16
 8006fc8:	fb02 3318 	mls	r3, r2, r8, r3
 8006fcc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8006fd0:	fb0c f308 	mul.w	r3, ip, r8
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	d907      	bls.n	8006fe8 <__udivmoddi4+0x134>
 8006fd8:	19ed      	adds	r5, r5, r7
 8006fda:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8006fde:	d202      	bcs.n	8006fe6 <__udivmoddi4+0x132>
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	f200 80d1 	bhi.w	8007188 <__udivmoddi4+0x2d4>
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	1aed      	subs	r5, r5, r3
 8006fea:	b2a3      	uxth	r3, r4
 8006fec:	fbb5 f0f2 	udiv	r0, r5, r2
 8006ff0:	fb02 5510 	mls	r5, r2, r0, r5
 8006ff4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8006ff8:	fb0c fc00 	mul.w	ip, ip, r0
 8006ffc:	45a4      	cmp	ip, r4
 8006ffe:	d907      	bls.n	8007010 <__udivmoddi4+0x15c>
 8007000:	19e4      	adds	r4, r4, r7
 8007002:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007006:	d202      	bcs.n	800700e <__udivmoddi4+0x15a>
 8007008:	45a4      	cmp	ip, r4
 800700a:	f200 80b8 	bhi.w	800717e <__udivmoddi4+0x2ca>
 800700e:	4618      	mov	r0, r3
 8007010:	eba4 040c 	sub.w	r4, r4, ip
 8007014:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007018:	e79d      	b.n	8006f56 <__udivmoddi4+0xa2>
 800701a:	4631      	mov	r1, r6
 800701c:	4630      	mov	r0, r6
 800701e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007022:	f1ce 0420 	rsb	r4, lr, #32
 8007026:	fa05 f30e 	lsl.w	r3, r5, lr
 800702a:	fa07 f70e 	lsl.w	r7, r7, lr
 800702e:	fa20 f804 	lsr.w	r8, r0, r4
 8007032:	0c3a      	lsrs	r2, r7, #16
 8007034:	fa25 f404 	lsr.w	r4, r5, r4
 8007038:	ea48 0803 	orr.w	r8, r8, r3
 800703c:	fbb4 f1f2 	udiv	r1, r4, r2
 8007040:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8007044:	fb02 4411 	mls	r4, r2, r1, r4
 8007048:	fa1f fc87 	uxth.w	ip, r7
 800704c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8007050:	fb01 f30c 	mul.w	r3, r1, ip
 8007054:	42ab      	cmp	r3, r5
 8007056:	fa00 f40e 	lsl.w	r4, r0, lr
 800705a:	d909      	bls.n	8007070 <__udivmoddi4+0x1bc>
 800705c:	19ed      	adds	r5, r5, r7
 800705e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8007062:	f080 808a 	bcs.w	800717a <__udivmoddi4+0x2c6>
 8007066:	42ab      	cmp	r3, r5
 8007068:	f240 8087 	bls.w	800717a <__udivmoddi4+0x2c6>
 800706c:	3902      	subs	r1, #2
 800706e:	443d      	add	r5, r7
 8007070:	1aeb      	subs	r3, r5, r3
 8007072:	fa1f f588 	uxth.w	r5, r8
 8007076:	fbb3 f0f2 	udiv	r0, r3, r2
 800707a:	fb02 3310 	mls	r3, r2, r0, r3
 800707e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8007082:	fb00 f30c 	mul.w	r3, r0, ip
 8007086:	42ab      	cmp	r3, r5
 8007088:	d907      	bls.n	800709a <__udivmoddi4+0x1e6>
 800708a:	19ed      	adds	r5, r5, r7
 800708c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8007090:	d26f      	bcs.n	8007172 <__udivmoddi4+0x2be>
 8007092:	42ab      	cmp	r3, r5
 8007094:	d96d      	bls.n	8007172 <__udivmoddi4+0x2be>
 8007096:	3802      	subs	r0, #2
 8007098:	443d      	add	r5, r7
 800709a:	1aeb      	subs	r3, r5, r3
 800709c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80070a0:	e78f      	b.n	8006fc2 <__udivmoddi4+0x10e>
 80070a2:	f1c1 0720 	rsb	r7, r1, #32
 80070a6:	fa22 f807 	lsr.w	r8, r2, r7
 80070aa:	408b      	lsls	r3, r1
 80070ac:	fa05 f401 	lsl.w	r4, r5, r1
 80070b0:	ea48 0303 	orr.w	r3, r8, r3
 80070b4:	fa20 fe07 	lsr.w	lr, r0, r7
 80070b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80070bc:	40fd      	lsrs	r5, r7
 80070be:	ea4e 0e04 	orr.w	lr, lr, r4
 80070c2:	fbb5 f9fc 	udiv	r9, r5, ip
 80070c6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80070ca:	fb0c 5519 	mls	r5, ip, r9, r5
 80070ce:	fa1f f883 	uxth.w	r8, r3
 80070d2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80070d6:	fb09 f408 	mul.w	r4, r9, r8
 80070da:	42ac      	cmp	r4, r5
 80070dc:	fa02 f201 	lsl.w	r2, r2, r1
 80070e0:	fa00 fa01 	lsl.w	sl, r0, r1
 80070e4:	d908      	bls.n	80070f8 <__udivmoddi4+0x244>
 80070e6:	18ed      	adds	r5, r5, r3
 80070e8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80070ec:	d243      	bcs.n	8007176 <__udivmoddi4+0x2c2>
 80070ee:	42ac      	cmp	r4, r5
 80070f0:	d941      	bls.n	8007176 <__udivmoddi4+0x2c2>
 80070f2:	f1a9 0902 	sub.w	r9, r9, #2
 80070f6:	441d      	add	r5, r3
 80070f8:	1b2d      	subs	r5, r5, r4
 80070fa:	fa1f fe8e 	uxth.w	lr, lr
 80070fe:	fbb5 f0fc 	udiv	r0, r5, ip
 8007102:	fb0c 5510 	mls	r5, ip, r0, r5
 8007106:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800710a:	fb00 f808 	mul.w	r8, r0, r8
 800710e:	45a0      	cmp	r8, r4
 8007110:	d907      	bls.n	8007122 <__udivmoddi4+0x26e>
 8007112:	18e4      	adds	r4, r4, r3
 8007114:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8007118:	d229      	bcs.n	800716e <__udivmoddi4+0x2ba>
 800711a:	45a0      	cmp	r8, r4
 800711c:	d927      	bls.n	800716e <__udivmoddi4+0x2ba>
 800711e:	3802      	subs	r0, #2
 8007120:	441c      	add	r4, r3
 8007122:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8007126:	eba4 0408 	sub.w	r4, r4, r8
 800712a:	fba0 8902 	umull	r8, r9, r0, r2
 800712e:	454c      	cmp	r4, r9
 8007130:	46c6      	mov	lr, r8
 8007132:	464d      	mov	r5, r9
 8007134:	d315      	bcc.n	8007162 <__udivmoddi4+0x2ae>
 8007136:	d012      	beq.n	800715e <__udivmoddi4+0x2aa>
 8007138:	b156      	cbz	r6, 8007150 <__udivmoddi4+0x29c>
 800713a:	ebba 030e 	subs.w	r3, sl, lr
 800713e:	eb64 0405 	sbc.w	r4, r4, r5
 8007142:	fa04 f707 	lsl.w	r7, r4, r7
 8007146:	40cb      	lsrs	r3, r1
 8007148:	431f      	orrs	r7, r3
 800714a:	40cc      	lsrs	r4, r1
 800714c:	6037      	str	r7, [r6, #0]
 800714e:	6074      	str	r4, [r6, #4]
 8007150:	2100      	movs	r1, #0
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	4618      	mov	r0, r3
 8007158:	e6f8      	b.n	8006f4c <__udivmoddi4+0x98>
 800715a:	4690      	mov	r8, r2
 800715c:	e6e0      	b.n	8006f20 <__udivmoddi4+0x6c>
 800715e:	45c2      	cmp	sl, r8
 8007160:	d2ea      	bcs.n	8007138 <__udivmoddi4+0x284>
 8007162:	ebb8 0e02 	subs.w	lr, r8, r2
 8007166:	eb69 0503 	sbc.w	r5, r9, r3
 800716a:	3801      	subs	r0, #1
 800716c:	e7e4      	b.n	8007138 <__udivmoddi4+0x284>
 800716e:	4628      	mov	r0, r5
 8007170:	e7d7      	b.n	8007122 <__udivmoddi4+0x26e>
 8007172:	4640      	mov	r0, r8
 8007174:	e791      	b.n	800709a <__udivmoddi4+0x1e6>
 8007176:	4681      	mov	r9, r0
 8007178:	e7be      	b.n	80070f8 <__udivmoddi4+0x244>
 800717a:	4601      	mov	r1, r0
 800717c:	e778      	b.n	8007070 <__udivmoddi4+0x1bc>
 800717e:	3802      	subs	r0, #2
 8007180:	443c      	add	r4, r7
 8007182:	e745      	b.n	8007010 <__udivmoddi4+0x15c>
 8007184:	4608      	mov	r0, r1
 8007186:	e708      	b.n	8006f9a <__udivmoddi4+0xe6>
 8007188:	f1a8 0802 	sub.w	r8, r8, #2
 800718c:	443d      	add	r5, r7
 800718e:	e72b      	b.n	8006fe8 <__udivmoddi4+0x134>

08007190 <__aeabi_idiv0>:
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop

08007194 <CmdLED>:
}



void CmdLED(int mode)
{
 8007194:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 8007196:	b930      	cbnz	r0, 80071a6 <CmdLED+0x12>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8007198:	4668      	mov	r0, sp
 800719a:	f000 fa5d 	bl	8007658 <fetch_uint32_arg>
  if(rc) {
 800719e:	b128      	cbz	r0, 80071ac <CmdLED+0x18>
    printf("Missing LED index\n");
 80071a0:	480f      	ldr	r0, [pc, #60]	; (80071e0 <CmdLED+0x4c>)
    return;
  }
    
  rc = fetch_uint32_arg(&val);
  if(rc) {
    printf("Missing state value, 0 for Off, 1 for On\n");
 80071a2:	f7f9 fa09 	bl	80005b8 <puts>
    BSP_LED_On(LEDs[led]);
  } else {
    BSP_LED_Off(LEDs[led]);
  }

} 
 80071a6:	b003      	add	sp, #12
 80071a8:	f85d fb04 	ldr.w	pc, [sp], #4
  rc = fetch_uint32_arg(&val);
 80071ac:	a801      	add	r0, sp, #4
 80071ae:	f000 fa53 	bl	8007658 <fetch_uint32_arg>
  if(rc) {
 80071b2:	b108      	cbz	r0, 80071b8 <CmdLED+0x24>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80071b4:	480b      	ldr	r0, [pc, #44]	; (80071e4 <CmdLED+0x50>)
 80071b6:	e7f4      	b.n	80071a2 <CmdLED+0xe>
  if((led < 3) || (led > 10)) {
 80071b8:	9900      	ldr	r1, [sp, #0]
 80071ba:	1ecb      	subs	r3, r1, #3
 80071bc:	2b07      	cmp	r3, #7
 80071be:	d903      	bls.n	80071c8 <CmdLED+0x34>
    printf("Led index of %u is out of the range (3..10)\n",
 80071c0:	4809      	ldr	r0, [pc, #36]	; (80071e8 <CmdLED+0x54>)
 80071c2:	f7f9 f9a3 	bl	800050c <printf>
    return;
 80071c6:	e7ee      	b.n	80071a6 <CmdLED+0x12>
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <CmdLED+0x58>)
  if(val) {
 80071ca:	9901      	ldr	r1, [sp, #4]
  led -= 3;
 80071cc:	9300      	str	r3, [sp, #0]
    BSP_LED_On(LEDs[led]);
 80071ce:	5cd0      	ldrb	r0, [r2, r3]
  if(val) {
 80071d0:	b111      	cbz	r1, 80071d8 <CmdLED+0x44>
    BSP_LED_On(LEDs[led]);
 80071d2:	f004 f8e7 	bl	800b3a4 <BSP_LED_On>
 80071d6:	e7e6      	b.n	80071a6 <CmdLED+0x12>
    BSP_LED_Off(LEDs[led]);
 80071d8:	f004 f8f2 	bl	800b3c0 <BSP_LED_Off>
 80071dc:	e7e3      	b.n	80071a6 <CmdLED+0x12>
 80071de:	bf00      	nop
 80071e0:	0800c3bc 	.word	0x0800c3bc
 80071e4:	0800c3ce 	.word	0x0800c3ce
 80071e8:	0800c3f7 	.word	0x0800c3f7
 80071ec:	0800c424 	.word	0x0800c424

080071f0 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 80071f0:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 80071f2:	b958      	cbnz	r0, 800720c <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 80071f4:	4668      	mov	r0, sp
 80071f6:	f004 fa65 	bl	800b6c4 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 80071fa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80071fe:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8007202:	f9bd 1000 	ldrsh.w	r1, [sp]
 8007206:	4803      	ldr	r0, [pc, #12]	; (8007214 <CmdAccel+0x24>)
 8007208:	f7f9 f980 	bl	800050c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 800720c:	b003      	add	sp, #12
 800720e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007212:	bf00      	nop
 8007214:	0800c330 	.word	0x0800c330

08007218 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8007218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 800721a:	b9e8      	cbnz	r0, 8007258 <CmdGyro+0x40>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 800721c:	a801      	add	r0, sp, #4
 800721e:	f004 fa7b 	bl	800b718 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 8007222:	eddd 7a03 	vldr	s15, [sp, #12]
 8007226:	480e      	ldr	r0, [pc, #56]	; (8007260 <CmdGyro+0x48>)
 8007228:	eeb0 7a67 	vmov.f32	s14, s15
 800722c:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007230:	eddd 7a02 	vldr	s15, [sp, #8]
 8007234:	ee17 3a10 	vmov	r3, s14
 8007238:	eeb0 7a67 	vmov.f32	s14, s15
 800723c:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007240:	eddd 7a01 	vldr	s15, [sp, #4]
 8007244:	ee17 2a10 	vmov	r2, s14
 8007248:	eeb0 7a67 	vmov.f32	s14, s15
 800724c:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007250:	ee17 1a10 	vmov	r1, s14
 8007254:	f7f9 f95a 	bl	800050c <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8007258:	b005      	add	sp, #20
 800725a:	f85d fb04 	ldr.w	pc, [sp], #4
 800725e:	bf00      	nop
 8007260:	0800c38d 	.word	0x0800c38d

08007264 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8007264:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8007266:	b958      	cbnz	r0, 8007280 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8007268:	f004 f8fe 	bl	800b468 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <CmdButton+0x20>)
 800726e:	4906      	ldr	r1, [pc, #24]	; (8007288 <CmdButton+0x24>)
 8007270:	2800      	cmp	r0, #0
 8007272:	bf08      	it	eq
 8007274:	4619      	moveq	r1, r3
 8007276:	4805      	ldr	r0, [pc, #20]	; (800728c <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 8007278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 800727c:	f7f9 b946 	b.w	800050c <printf>
 8007280:	bd08      	pop	{r3, pc}
 8007282:	bf00      	nop
 8007284:	0800c36b 	.word	0x0800c36b
 8007288:	0800c363 	.word	0x0800c363
 800728c:	0800c374 	.word	0x0800c374

08007290 <Error_Handler>:
{
 8007290:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8007292:	2003      	movs	r0, #3
 8007294:	f004 f886 	bl	800b3a4 <BSP_LED_On>
 8007298:	e7fe      	b.n	8007298 <Error_Handler+0x8>
	...

0800729c <main>:
{
 800729c:	b530      	push	{r4, r5, lr}
 800729e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80072a4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80072a6:	2300      	movs	r3, #0
 80072a8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80072aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072ae:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80072b0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80072b2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80072b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072b8:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80072ba:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80072bc:	f000 ff10 	bl	80080e0 <HAL_RCC_OscConfig>
 80072c0:	b108      	cbz	r0, 80072c6 <main+0x2a>
    Error_Handler();
 80072c2:	f7ff ffe5 	bl	8007290 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80072c6:	230f      	movs	r3, #15
 80072c8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072ca:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80072cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072d0:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80072d2:	4621      	mov	r1, r4
 80072d4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072d6:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80072d8:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 80072da:	f001 f9f9 	bl	80086d0 <HAL_RCC_ClockConfig>
 80072de:	4604      	mov	r4, r0
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d1ee      	bne.n	80072c2 <main+0x26>
  HAL_Init();
 80072e4:	f001 fbba 	bl	8008a5c <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 80072e8:	f000 fae6 	bl	80078b8 <TerminalInit>
    BSP_LED_Init(LEDs[i]);
 80072ec:	4d0e      	ldr	r5, [pc, #56]	; (8007328 <main+0x8c>)
 80072ee:	5d28      	ldrb	r0, [r5, r4]
  for(i=0; i<numLEDs; i++) {
 80072f0:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 80072f2:	f004 f821 	bl	800b338 <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 80072f6:	2c08      	cmp	r4, #8
 80072f8:	d1f9      	bne.n	80072ee <main+0x52>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80072fa:	2101      	movs	r1, #1
 80072fc:	2000      	movs	r0, #0
 80072fe:	f004 f879 	bl	800b3f4 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 8007302:	f004 f9c7 	bl	800b694 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8007306:	b118      	cbz	r0, 8007310 <main+0x74>
    printf("Failed to initialize acceleromter\n");
 8007308:	4808      	ldr	r0, [pc, #32]	; (800732c <main+0x90>)
 800730a:	f7f9 f955 	bl	80005b8 <puts>
 800730e:	e7d8      	b.n	80072c2 <main+0x26>
  gyroRc = BSP_GYRO_Init();
 8007310:	f004 f9e0 	bl	800b6d4 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8007314:	b108      	cbz	r0, 800731a <main+0x7e>
    printf("Failed to initialize Gyroscope\n");
 8007316:	4806      	ldr	r0, [pc, #24]	; (8007330 <main+0x94>)
 8007318:	e7f7      	b.n	800730a <main+0x6e>
  my_Init();
 800731a:	f7f8 ffb9 	bl	8000290 <my_Init>
    TaskInput();
 800731e:	f000 f905 	bl	800752c <TaskInput>
    my_Loop();
 8007322:	f7f8 ffb3 	bl	800028c <my_Loop>
 8007326:	e7fa      	b.n	800731e <main+0x82>
 8007328:	0800c424 	.word	0x0800c424
 800732c:	0800c42c 	.word	0x0800c42c
 8007330:	0800c44e 	.word	0x0800c44e

08007334 <SysTick_Handler>:
{
 8007334:	b508      	push	{r3, lr}
    HAL_IncTick();
 8007336:	f001 fba3 	bl	8008a80 <HAL_IncTick>
    my_Tick();
 800733a:	f7f8 ff9d 	bl	8000278 <my_Tick>
    myTickCount = HAL_GetTick();
 800733e:	f001 fba7 	bl	8008a90 <HAL_GetTick>
 8007342:	4b01      	ldr	r3, [pc, #4]	; (8007348 <SysTick_Handler+0x14>)
 8007344:	6018      	str	r0, [r3, #0]
 8007346:	bd08      	pop	{r3, pc}
 8007348:	20000000 	.word	0x20000000

0800734c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{    
    
    HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 800734c:	2001      	movs	r0, #1
 800734e:	f001 bcf9 	b.w	8008d44 <HAL_GPIO_EXTI_IRQHandler>
	...

08007354 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8007354:	2801      	cmp	r0, #1
{
 8007356:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8007358:	d00f      	beq.n	800737a <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 800735a:	2802      	cmp	r0, #2
 800735c:	d104      	bne.n	8007368 <CmdTest+0x14>
    printf("testasm\n\n"
 800735e:	4807      	ldr	r0, [pc, #28]	; (800737c <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 8007360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 8007364:	f7f9 b928 	b.w	80005b8 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8007368:	204d      	movs	r0, #77	; 0x4d
 800736a:	f7f8 ff7b 	bl	8000264 <mytest>
}
 800736e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 8007372:	4601      	mov	r1, r0
 8007374:	4802      	ldr	r0, [pc, #8]	; (8007380 <CmdTest+0x2c>)
 8007376:	f7f9 b8c9 	b.w	800050c <printf>
 800737a:	bd08      	pop	{r3, pc}
 800737c:	0800c50a 	.word	0x0800c50a
 8007380:	0800c543 	.word	0x0800c543

08007384 <a3>:
{

  int fetch_status;


  if(action==CMD_SHORT_HELP) return;
 8007384:	2801      	cmp	r0, #1
{
 8007386:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(action==CMD_SHORT_HELP) return;
 8007388:	d004      	beq.n	8007394 <a3+0x10>
  if(action==CMD_LONG_HELP)
 800738a:	2802      	cmp	r0, #2
 800738c:	d104      	bne.n	8007398 <a3+0x14>
  {
    printf("LED Game\n\nThis command starts the LED game;\n");
 800738e:	4815      	ldr	r0, [pc, #84]	; (80073e4 <a3+0x60>)
 8007390:	f7f9 f912 	bl	80005b8 <puts>
	counter++;
  }
  
  //call lose() if user did not win
  if (result != 1) lose(target);
}
 8007394:	b004      	add	sp, #16
 8007396:	bd10      	pop	{r4, pc}
  fetch_status = fetch_uint32_arg(&delay);
 8007398:	a801      	add	r0, sp, #4
 800739a:	f000 f95d 	bl	8007658 <fetch_uint32_arg>
  if(fetch_status)
 800739e:	b110      	cbz	r0, 80073a6 <a3+0x22>
    delay = 500;
 80073a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80073a4:	9301      	str	r3, [sp, #4]
  fetch_status = fetch_uint32_arg(&target);
 80073a6:	a802      	add	r0, sp, #8
 80073a8:	f000 f956 	bl	8007658 <fetch_uint32_arg>
  if(fetch_status)
 80073ac:	b108      	cbz	r0, 80073b2 <a3+0x2e>
    target = 4;
 80073ae:	2304      	movs	r3, #4
 80073b0:	9302      	str	r3, [sp, #8]
  fetch_status = fetch_uint32_arg(&game_time);
 80073b2:	a803      	add	r0, sp, #12
 80073b4:	f000 f950 	bl	8007658 <fetch_uint32_arg>
  if(fetch_status)
 80073b8:	b108      	cbz	r0, 80073be <a3+0x3a>
    game_time = 30;
 80073ba:	231e      	movs	r3, #30
 80073bc:	9303      	str	r3, [sp, #12]
  game_time *= 2;
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	9303      	str	r3, [sp, #12]
  int counter = 0;   //for counting the game time
 80073c4:	2400      	movs	r4, #0
  while(game_time > counter)
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d803      	bhi.n	80073d4 <a3+0x50>
  if (result != 1) lose(target);
 80073cc:	9802      	ldr	r0, [sp, #8]
 80073ce:	f7f8 ffd8 	bl	8000382 <lose>
 80073d2:	e7df      	b.n	8007394 <a3+0x10>
	result = lzTilt(delay, target); 
 80073d4:	9902      	ldr	r1, [sp, #8]
 80073d6:	9801      	ldr	r0, [sp, #4]
 80073d8:	f7f8 ff5e 	bl	8000298 <lzTilt>
	if(result == 1) break;
 80073dc:	2801      	cmp	r0, #1
 80073de:	d0d9      	beq.n	8007394 <a3+0x10>
	counter++;
 80073e0:	3401      	adds	r4, #1
 80073e2:	e7f0      	b.n	80073c6 <a3+0x42>
 80073e4:	0800c567 	.word	0x0800c567

080073e8 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 80073e8:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 80073ea:	b940      	cbnz	r0, 80073fe <CmdW+0x16>

  fetch_uint32_arg(&addr);
 80073ec:	4668      	mov	r0, sp
 80073ee:	f000 f933 	bl	8007658 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 80073f2:	a801      	add	r0, sp, #4
 80073f4:	f000 f930 	bl	8007658 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80073f8:	9b00      	ldr	r3, [sp, #0]
 80073fa:	9a01      	ldr	r2, [sp, #4]
 80073fc:	601a      	str	r2, [r3, #0]
}
 80073fe:	b003      	add	sp, #12
 8007400:	f85d fb04 	ldr.w	pc, [sp], #4

08007404 <CmdR>:
{
 8007404:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 8007406:	b938      	cbnz	r0, 8007418 <CmdR+0x14>
  fetch_uint32_arg(&addr);
 8007408:	a801      	add	r0, sp, #4
 800740a:	f000 f925 	bl	8007658 <fetch_uint32_arg>
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 800740e:	9901      	ldr	r1, [sp, #4]
 8007410:	4803      	ldr	r0, [pc, #12]	; (8007420 <CmdR+0x1c>)
 8007412:	680a      	ldr	r2, [r1, #0]
 8007414:	f7f9 f87a 	bl	800050c <printf>
}
 8007418:	b003      	add	sp, #12
 800741a:	f85d fb04 	ldr.w	pc, [sp], #4
 800741e:	bf00      	nop
 8007420:	0800c5c7 	.word	0x0800c5c7

08007424 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 800742a:	b930      	cbnz	r0, 800743a <parse+0x16>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 800742c:	4934      	ldr	r1, [pc, #208]	; (8007500 <parse+0xdc>)
 800742e:	4835      	ldr	r0, [pc, #212]	; (8007504 <parse+0xe0>)
      t->func(arg);
      return 0;
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 8007430:	f7f9 f86c 	bl	800050c <printf>
    return -1;
 8007434:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007438:	e034      	b.n	80074a4 <parse+0x80>
  if(len==0) {
 800743a:	b911      	cbnz	r1, 8007442 <parse+0x1e>
    printf("len == 0 in %s\n",__FUNCTION__);
 800743c:	4930      	ldr	r1, [pc, #192]	; (8007500 <parse+0xdc>)
 800743e:	4832      	ldr	r0, [pc, #200]	; (8007508 <parse+0xe4>)
 8007440:	e7f6      	b.n	8007430 <parse+0xc>
  if(table == NULL) {
 8007442:	b18a      	cbz	r2, 8007468 <parse+0x44>
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 8007444:	4b31      	ldr	r3, [pc, #196]	; (800750c <parse+0xe8>)
 8007446:	1e4c      	subs	r4, r1, #1
 8007448:	681e      	ldr	r6, [r3, #0]
 800744a:	4603      	mov	r3, r0
 800744c:	1c61      	adds	r1, r4, #1
 800744e:	4618      	mov	r0, r3
 8007450:	d00f      	beq.n	8007472 <parse+0x4e>
 8007452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007456:	2a00      	cmp	r2, #0
 8007458:	d0ec      	beq.n	8007434 <parse+0x10>
 800745a:	4432      	add	r2, r6
 800745c:	1e61      	subs	r1, r4, #1
 800745e:	7852      	ldrb	r2, [r2, #1]
 8007460:	0712      	lsls	r2, r2, #28
 8007462:	d404      	bmi.n	800746e <parse+0x4a>
  if((i==0) || (*buf==0)) {
 8007464:	b93c      	cbnz	r4, 8007476 <parse+0x52>
 8007466:	e7e5      	b.n	8007434 <parse+0x10>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8007468:	4925      	ldr	r1, [pc, #148]	; (8007500 <parse+0xdc>)
 800746a:	4829      	ldr	r0, [pc, #164]	; (8007510 <parse+0xec>)
 800746c:	e7e0      	b.n	8007430 <parse+0xc>
 800746e:	460c      	mov	r4, r1
 8007470:	e7ec      	b.n	800744c <parse+0x28>
  if((i==0) || (*buf==0)) {
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b1b3      	cbz	r3, 80074a4 <parse+0x80>
  p = strtok(buf,SEPS);
 8007476:	4927      	ldr	r1, [pc, #156]	; (8007514 <parse+0xf0>)
 8007478:	f7f9 fa50 	bl	800091c <strtok>
  if(p==NULL) {
 800747c:	4606      	mov	r6, r0
 800747e:	b910      	cbnz	r0, 8007486 <parse+0x62>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8007480:	491f      	ldr	r1, [pc, #124]	; (8007500 <parse+0xdc>)
 8007482:	4825      	ldr	r0, [pc, #148]	; (8007518 <parse+0xf4>)
 8007484:	e7d4      	b.n	8007430 <parse+0xc>
  if(strcasecmp(p,"help") == 0) {
 8007486:	4925      	ldr	r1, [pc, #148]	; (800751c <parse+0xf8>)
 8007488:	f7f9 f944 	bl	8000714 <strcasecmp>
 800748c:	4604      	mov	r4, r0
 800748e:	b9c8      	cbnz	r0, 80074c4 <parse+0xa0>
    p = strtok(NULL,SEPS);
 8007490:	4920      	ldr	r1, [pc, #128]	; (8007514 <parse+0xf0>)
 8007492:	f7f9 fa43 	bl	800091c <strtok>
    if(p == NULL) {
 8007496:	4606      	mov	r6, r0
 8007498:	b9d8      	cbnz	r0, 80074d2 <parse+0xae>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 800749a:	4e21      	ldr	r6, [pc, #132]	; (8007520 <parse+0xfc>)
 800749c:	350c      	adds	r5, #12
      for(t=table; t->cmdname!=NULL; t++) {
 800749e:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 80074a2:	b911      	cbnz	r1, 80074aa <parse+0x86>
  return -1;
}
 80074a4:	4620      	mov	r0, r4
 80074a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(t->help != NULL) {
 80074aa:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80074ae:	b122      	cbz	r2, 80074ba <parse+0x96>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7f9 f82b 	bl	800050c <printf>
 80074b6:	350c      	adds	r5, #12
 80074b8:	e7f1      	b.n	800749e <parse+0x7a>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 80074ba:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80074be:	2001      	movs	r0, #1
 80074c0:	4798      	blx	r3
 80074c2:	e7f8      	b.n	80074b6 <parse+0x92>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 80074c4:	f04f 0800 	mov.w	r8, #0
  for(t=table; t->cmdname!=NULL; t++) {
 80074c8:	682f      	ldr	r7, [r5, #0]
 80074ca:	b92f      	cbnz	r7, 80074d8 <parse+0xb4>
  printf("Command `%s' not found. Type `help' for online help\n",p);
 80074cc:	4631      	mov	r1, r6
 80074ce:	4815      	ldr	r0, [pc, #84]	; (8007524 <parse+0x100>)
 80074d0:	e7ae      	b.n	8007430 <parse+0xc>
      arg = CMD_LONG_HELP;
 80074d2:	f04f 0802 	mov.w	r8, #2
  for(t=table; t->cmdname!=NULL; t++) {
 80074d6:	e7f7      	b.n	80074c8 <parse+0xa4>
    if(strcasecmp(p,t->cmdname) == 0) {
 80074d8:	4639      	mov	r1, r7
 80074da:	4630      	mov	r0, r6
 80074dc:	f7f9 f91a 	bl	8000714 <strcasecmp>
 80074e0:	4604      	mov	r4, r0
 80074e2:	b950      	cbnz	r0, 80074fa <parse+0xd6>
      if(arg == CMD_LONG_HELP) {	
 80074e4:	f1b8 0f00 	cmp.w	r8, #0
 80074e8:	d003      	beq.n	80074f2 <parse+0xce>
	printf("%s:\n",t->cmdname);
 80074ea:	4639      	mov	r1, r7
 80074ec:	480e      	ldr	r0, [pc, #56]	; (8007528 <parse+0x104>)
 80074ee:	f7f9 f80d 	bl	800050c <printf>
      t->func(arg);
 80074f2:	686b      	ldr	r3, [r5, #4]
 80074f4:	4640      	mov	r0, r8
 80074f6:	4798      	blx	r3
      return 0;
 80074f8:	e7d4      	b.n	80074a4 <parse+0x80>
  for(t=table; t->cmdname!=NULL; t++) {
 80074fa:	350c      	adds	r5, #12
 80074fc:	e7e4      	b.n	80074c8 <parse+0xa4>
 80074fe:	bf00      	nop
 8007500:	0800c61d 	.word	0x0800c61d
 8007504:	0800c623 	.word	0x0800c623
 8007508:	0800c644 	.word	0x0800c644
 800750c:	20000004 	.word	0x20000004
 8007510:	0800c654 	.word	0x0800c654
 8007514:	0800c677 	.word	0x0800c677
 8007518:	0800c67e 	.word	0x0800c67e
 800751c:	0800c6ae 	.word	0x0800c6ae
 8007520:	0800c6b3 	.word	0x0800c6b3
 8007524:	0800c6c4 	.word	0x0800c6c4
 8007528:	0800c6bf 	.word	0x0800c6bf

0800752c <TaskInput>:
{
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 800752e:	4c3f      	ldr	r4, [pc, #252]	; (800762c <TaskInput+0x100>)
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	b123      	cbz	r3, 800753e <TaskInput+0x12>
    printf("ARMON>");
 8007534:	483e      	ldr	r0, [pc, #248]	; (8007630 <TaskInput+0x104>)
 8007536:	f7f8 ffe9 	bl	800050c <printf>
    printPrompt = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	6023      	str	r3, [r4, #0]
  rc = TerminalReadAnyNonBlock(&c);
 800753e:	f10d 0007 	add.w	r0, sp, #7
 8007542:	f000 fa2a 	bl	800799a <TerminalReadAnyNonBlock>
  if(rc) {
 8007546:	b990      	cbnz	r0, 800756e <TaskInput+0x42>
  if(((c == 010) || (c == 0x7f)) && count) {
 8007548:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800754c:	2b08      	cmp	r3, #8
 800754e:	d001      	beq.n	8007554 <TaskInput+0x28>
 8007550:	2b7f      	cmp	r3, #127	; 0x7f
 8007552:	d10e      	bne.n	8007572 <TaskInput+0x46>
 8007554:	4d37      	ldr	r5, [pc, #220]	; (8007634 <TaskInput+0x108>)
 8007556:	682a      	ldr	r2, [r5, #0]
 8007558:	b15a      	cbz	r2, 8007572 <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 800755a:	4837      	ldr	r0, [pc, #220]	; (8007638 <TaskInput+0x10c>)
 800755c:	f7f8 ffd6 	bl	800050c <printf>
    buf--;     /* Then remove it from the buffer */
 8007560:	4a36      	ldr	r2, [pc, #216]	; (800763c <TaskInput+0x110>)
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	3b01      	subs	r3, #1
 8007566:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	602b      	str	r3, [r5, #0]
}
 800756e:	b003      	add	sp, #12
 8007570:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(c == '!') { /* '!' repeats the last command */
 8007572:	2b21      	cmp	r3, #33	; 0x21
 8007574:	d12f      	bne.n	80075d6 <TaskInput+0xaa>
    if(saved) {  /* But only if we have something saved */
 8007576:	4b32      	ldr	r3, [pc, #200]	; (8007640 <TaskInput+0x114>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0f7      	beq.n	800756e <TaskInput+0x42>
      strcpy(input,input_b);  /* Restore the command */
 800757e:	4d31      	ldr	r5, [pc, #196]	; (8007644 <TaskInput+0x118>)
 8007580:	4931      	ldr	r1, [pc, #196]	; (8007648 <TaskInput+0x11c>)
 8007582:	4628      	mov	r0, r5
 8007584:	f7f9 f8ec 	bl	8000760 <strcpy>
      printf("%s",input);
 8007588:	4629      	mov	r1, r5
 800758a:	4830      	ldr	r0, [pc, #192]	; (800764c <TaskInput+0x120>)
 800758c:	f7f8 ffbe 	bl	800050c <printf>
      count = strlen(input);
 8007590:	4628      	mov	r0, r5
 8007592:	f7f9 f955 	bl	8000840 <strlen>
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <TaskInput+0x108>)
 8007598:	6018      	str	r0, [r3, #0]
      buf = input+count;
 800759a:	4b28      	ldr	r3, [pc, #160]	; (800763c <TaskInput+0x110>)
 800759c:	4428      	add	r0, r5
 800759e:	6018      	str	r0, [r3, #0]
    printf("\n");
 80075a0:	200a      	movs	r0, #10
 80075a2:	f7f8 ffcb 	bl	800053c <putchar>
 80075a6:	4d25      	ldr	r5, [pc, #148]	; (800763c <TaskInput+0x110>)
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 80075a8:	4a22      	ldr	r2, [pc, #136]	; (8007634 <TaskInput+0x108>)
 80075aa:	682b      	ldr	r3, [r5, #0]
 80075ac:	6810      	ldr	r0, [r2, #0]
 80075ae:	2100      	movs	r1, #0
 80075b0:	1ac0      	subs	r0, r0, r3
 80075b2:	460e      	mov	r6, r1
 80075b4:	181f      	adds	r7, r3, r0
 80075b6:	2f4f      	cmp	r7, #79	; 0x4f
 80075b8:	d933      	bls.n	8007622 <TaskInput+0xf6>
 80075ba:	b101      	cbz	r1, 80075be <TaskInput+0x92>
 80075bc:	602b      	str	r3, [r5, #0]
    count = 0;
 80075be:	6016      	str	r6, [r2, #0]
    parse(input, sizeof(input), Commands);
 80075c0:	4b23      	ldr	r3, [pc, #140]	; (8007650 <TaskInput+0x124>)
 80075c2:	4e20      	ldr	r6, [pc, #128]	; (8007644 <TaskInput+0x118>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	2150      	movs	r1, #80	; 0x50
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ff2b 	bl	8007424 <parse>
    printPrompt = 1;
 80075ce:	2301      	movs	r3, #1
    buf = input;
 80075d0:	602e      	str	r6, [r5, #0]
    printPrompt = 1;
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	e7cb      	b.n	800756e <TaskInput+0x42>
  } else if(isprint((unsigned int)c)) {
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <TaskInput+0x128>)
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	441a      	add	r2, r3
 80075dc:	7852      	ldrb	r2, [r2, #1]
 80075de:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 80075e2:	d011      	beq.n	8007608 <TaskInput+0xdc>
    if(count >= sizeof(input)) {
 80075e4:	4913      	ldr	r1, [pc, #76]	; (8007634 <TaskInput+0x108>)
 80075e6:	680a      	ldr	r2, [r1, #0]
 80075e8:	2a4f      	cmp	r2, #79	; 0x4f
 80075ea:	d903      	bls.n	80075f4 <TaskInput+0xc8>
      printf("\x07"); /* Beep */
 80075ec:	2007      	movs	r0, #7
      printf("%c",c);
 80075ee:	f7f8 ffa5 	bl	800053c <putchar>
 80075f2:	e7bc      	b.n	800756e <TaskInput+0x42>
      *buf++ = c;
 80075f4:	4c11      	ldr	r4, [pc, #68]	; (800763c <TaskInput+0x110>)
 80075f6:	6820      	ldr	r0, [r4, #0]
      count++;
 80075f8:	3201      	adds	r2, #1
      *buf++ = c;
 80075fa:	1c45      	adds	r5, r0, #1
 80075fc:	7003      	strb	r3, [r0, #0]
 80075fe:	6025      	str	r5, [r4, #0]
      count++;
 8007600:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 8007602:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007606:	e7f2      	b.n	80075ee <TaskInput+0xc2>
  } else if(c == '\r') {
 8007608:	2b0d      	cmp	r3, #13
 800760a:	d1b0      	bne.n	800756e <TaskInput+0x42>
    *buf = '\0';
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <TaskInput+0x110>)
    strcpy(input_b,input);
 800760e:	490d      	ldr	r1, [pc, #52]	; (8007644 <TaskInput+0x118>)
    *buf = '\0';
 8007610:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 8007612:	480d      	ldr	r0, [pc, #52]	; (8007648 <TaskInput+0x11c>)
    *buf = '\0';
 8007614:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 8007616:	f7f9 f8a3 	bl	8000760 <strcpy>
    saved = 1;
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <TaskInput+0x114>)
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e7be      	b.n	80075a0 <TaskInput+0x74>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8007622:	f803 6b01 	strb.w	r6, [r3], #1
 8007626:	2101      	movs	r1, #1
 8007628:	e7c4      	b.n	80075b4 <TaskInput+0x88>
 800762a:	bf00      	nop
 800762c:	200008d0 	.word	0x200008d0
 8007630:	0800c612 	.word	0x0800c612
 8007634:	20000b10 	.word	0x20000b10
 8007638:	0800c619 	.word	0x0800c619
 800763c:	200008cc 	.word	0x200008cc
 8007640:	20000b14 	.word	0x20000b14
 8007644:	20000f80 	.word	0x20000f80
 8007648:	20000f30 	.word	0x20000f30
 800764c:	0800ce21 	.word	0x0800ce21
 8007650:	200008c8 	.word	0x200008c8
 8007654:	20000004 	.word	0x20000004

08007658 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8007658:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800765a:	4908      	ldr	r1, [pc, #32]	; (800767c <fetch_uint32_arg+0x24>)
{
 800765c:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 800765e:	2000      	movs	r0, #0
 8007660:	f7f9 f95c 	bl	800091c <strtok>
  if(p == NULL) {
 8007664:	b130      	cbz	r0, 8007674 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8007666:	2200      	movs	r2, #0
 8007668:	4611      	mov	r1, r2
 800766a:	f7f9 fa2f 	bl	8000acc <strtoul>
 800766e:	6020      	str	r0, [r4, #0]
  return 0;
 8007670:	2000      	movs	r0, #0
 8007672:	bd10      	pop	{r4, pc}
    return -1;
 8007674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}     
 8007678:	bd10      	pop	{r4, pc}
 800767a:	bf00      	nop
 800767c:	0800c677 	.word	0x0800c677

08007680 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 8007680:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8007682:	4906      	ldr	r1, [pc, #24]	; (800769c <fetch_string_arg+0x1c>)
{
 8007684:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8007686:	2000      	movs	r0, #0
 8007688:	f7f9 f948 	bl	800091c <strtok>
  if(p == NULL) {
 800768c:	b110      	cbz	r0, 8007694 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800768e:	6020      	str	r0, [r4, #0]
  return 0;
 8007690:	2000      	movs	r0, #0
 8007692:	bd10      	pop	{r4, pc}
    return -1;
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007698:	bd10      	pop	{r4, pc}
 800769a:	bf00      	nop
 800769c:	0800c677 	.word	0x0800c677

080076a0 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 80076a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	b089      	sub	sp, #36	; 0x24
 80076a6:	4607      	mov	r7, r0
 80076a8:	9200      	str	r2, [sp, #0]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 80076aa:	460c      	mov	r4, r1
 80076ac:	b1e9      	cbz	r1, 80076ea <DumpBuffer+0x4a>
 80076ae:	ad03      	add	r5, sp, #12
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 80076b0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8007754 <DumpBuffer+0xb4>
 80076b4:	eb00 0901 	add.w	r9, r0, r1
  if(count == 0) return;
 80076b8:	4683      	mov	fp, r0
 80076ba:	46a8      	mov	r8, r5
 80076bc:	9b00      	ldr	r3, [sp, #0]
  for(i=0; i<count; i++) {
 80076be:	45cb      	cmp	fp, r9
 80076c0:	eba3 0107 	sub.w	r1, r3, r7
 80076c4:	4459      	add	r1, fp
 80076c6:	ebab 0607 	sub.w	r6, fp, r7
 80076ca:	d111      	bne.n	80076f0 <DumpBuffer+0x50>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 80076cc:	2300      	movs	r3, #0
  if(count % BYTES_PER_LINE) {
 80076ce:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80076d2:	702b      	strb	r3, [r5, #0]
  if(count % BYTES_PER_LINE) {
 80076d4:	d009      	beq.n	80076ea <DumpBuffer+0x4a>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
      printf("   ");
 80076d6:	4e1b      	ldr	r6, [pc, #108]	; (8007744 <DumpBuffer+0xa4>)
  if(count % BYTES_PER_LINE) {
 80076d8:	461d      	mov	r5, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80076da:	f1c4 0410 	rsb	r4, r4, #16
 80076de:	42a5      	cmp	r5, r4
 80076e0:	d32b      	bcc.n	800773a <DumpBuffer+0x9a>
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 80076e2:	4641      	mov	r1, r8
 80076e4:	4818      	ldr	r0, [pc, #96]	; (8007748 <DumpBuffer+0xa8>)
 80076e6:	f7f8 ff11 	bl	800050c <printf>
  }



}
 80076ea:	b009      	add	sp, #36	; 0x24
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((i% BYTES_PER_LINE) == 0) {
 80076f0:	f016 060f 	ands.w	r6, r6, #15
 80076f4:	d103      	bne.n	80076fe <DumpBuffer+0x5e>
      printf("%08x:",(unsigned int)address);
 80076f6:	4815      	ldr	r0, [pc, #84]	; (800774c <DumpBuffer+0xac>)
 80076f8:	f7f8 ff08 	bl	800050c <printf>
      bufp = buf;
 80076fc:	4645      	mov	r5, r8
    c = *p++;
 80076fe:	f81b 1b01 	ldrb.w	r1, [fp], #1
    if(isprint(c)) {
 8007702:	f8da 2000 	ldr.w	r2, [sl]
 8007706:	440a      	add	r2, r1
 8007708:	7852      	ldrb	r2, [r2, #1]
 800770a:	f012 0f97 	tst.w	r2, #151	; 0x97
      *bufp++ = '.';
 800770e:	bf08      	it	eq
 8007710:	202e      	moveq	r0, #46	; 0x2e
 8007712:	f105 0201 	add.w	r2, r5, #1
 8007716:	bf0c      	ite	eq
 8007718:	7028      	strbeq	r0, [r5, #0]
      *bufp++ = c; /* Stick in the character */
 800771a:	7029      	strbne	r1, [r5, #0]
    printf(" %02x",((unsigned int)c) & 0xff);
 800771c:	480c      	ldr	r0, [pc, #48]	; (8007750 <DumpBuffer+0xb0>)
 800771e:	9201      	str	r2, [sp, #4]
      *bufp++ = '.';
 8007720:	4615      	mov	r5, r2
    printf(" %02x",((unsigned int)c) & 0xff);
 8007722:	f7f8 fef3 	bl	800050c <printf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8007726:	2e0f      	cmp	r6, #15
 8007728:	9a01      	ldr	r2, [sp, #4]
 800772a:	d1c7      	bne.n	80076bc <DumpBuffer+0x1c>
      *bufp = '\0';  /* NULL terminate buffer */
 800772c:	2100      	movs	r1, #0
 800772e:	7011      	strb	r1, [r2, #0]
      printf("  %s\n",buf);
 8007730:	4805      	ldr	r0, [pc, #20]	; (8007748 <DumpBuffer+0xa8>)
 8007732:	4641      	mov	r1, r8
 8007734:	f7f8 feea 	bl	800050c <printf>
 8007738:	e7c0      	b.n	80076bc <DumpBuffer+0x1c>
      printf("   ");
 800773a:	4630      	mov	r0, r6
 800773c:	f7f8 fee6 	bl	800050c <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 8007740:	3501      	adds	r5, #1
 8007742:	e7cc      	b.n	80076de <DumpBuffer+0x3e>
 8007744:	0800c8d5 	.word	0x0800c8d5
 8007748:	0800c8cf 	.word	0x0800c8cf
 800774c:	0800c8c3 	.word	0x0800c8c3
 8007750:	0800c8c9 	.word	0x0800c8c9
 8007754:	20000004 	.word	0x20000004

08007758 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8007758:	2801      	cmp	r0, #1
{
 800775a:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 800775c:	d01d      	beq.n	800779a <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 800775e:	2802      	cmp	r0, #2
 8007760:	4d0e      	ldr	r5, [pc, #56]	; (800779c <CmdDump+0x44>)
 8007762:	4c0f      	ldr	r4, [pc, #60]	; (80077a0 <CmdDump+0x48>)
 8007764:	d109      	bne.n	800777a <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 8007766:	480f      	ldr	r0, [pc, #60]	; (80077a4 <CmdDump+0x4c>)
 8007768:	f7f8 ff26 	bl	80005b8 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 800776c:	682a      	ldr	r2, [r5, #0]
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	480d      	ldr	r0, [pc, #52]	; (80077a8 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 8007772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 8007776:	f7f8 bec9 	b.w	800050c <printf>
  rc = fetch_uint32_arg(&address);
 800777a:	4620      	mov	r0, r4
 800777c:	f7ff ff6c 	bl	8007658 <fetch_uint32_arg>
  if(rc == 0) {
 8007780:	b910      	cbnz	r0, 8007788 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 8007782:	4628      	mov	r0, r5
 8007784:	f7ff ff68 	bl	8007658 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	6829      	ldr	r1, [r5, #0]
 800778c:	4610      	mov	r0, r2
 800778e:	f7ff ff87 	bl	80076a0 <DumpBuffer>
  address = address+count;
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	682a      	ldr	r2, [r5, #0]
 8007796:	4413      	add	r3, r2
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	200008d4 	.word	0x200008d4
 80077a0:	20000b18 	.word	0x20000b18
 80077a4:	0800c6f9 	.word	0x0800c6f9
 80077a8:	0800c891 	.word	0x0800c891

080077ac <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 80077ac:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 80077ae:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <_sbrk_r+0x28>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	b90a      	cbnz	r2, 80077b8 <_sbrk_r+0xc>
                heap_end = &end;
 80077b4:	4a08      	ldr	r2, [pc, #32]	; (80077d8 <_sbrk_r+0x2c>)
 80077b6:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 80077b8:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 80077ba:	466a      	mov	r2, sp
 80077bc:	4401      	add	r1, r0
 80077be:	4291      	cmp	r1, r2
 80077c0:	d906      	bls.n	80077d0 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 80077c2:	f7f8 fdfd 	bl	80003c0 <__errno>
 80077c6:	230c      	movs	r3, #12
 80077c8:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ce:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 80077d0:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 80077d2:	bd08      	pop	{r3, pc}
 80077d4:	20000b1c 	.word	0x20000b1c
 80077d8:	20001d1c 	.word	0x20001d1c

080077dc <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077e0:	4770      	bx	lr

080077e2 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 80077e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077e6:	6053      	str	r3, [r2, #4]
        return 0;
}
 80077e8:	2000      	movs	r0, #0
 80077ea:	4770      	bx	lr

080077ec <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 80077ec:	2001      	movs	r0, #1
 80077ee:	4770      	bx	lr

080077f0 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 80077f0:	2000      	movs	r0, #0
 80077f2:	4770      	bx	lr

080077f4 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 80077f4:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <USBD_CDC_DataIn+0x70>)
{
 80077f6:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 80077f8:	681b      	ldr	r3, [r3, #0]
{
 80077fa:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 80077fc:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 80077fe:	4b1a      	ldr	r3, [pc, #104]	; (8007868 <USBD_CDC_DataIn+0x74>)
 8007800:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 8007802:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 8007804:	d12c      	bne.n	8007860 <USBD_CDC_DataIn+0x6c>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8007806:	4c19      	ldr	r4, [pc, #100]	; (800786c <USBD_CDC_DataIn+0x78>)
 8007808:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outSending;
 800780c:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
 8007810:	b290      	uxth	r0, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8007812:	fa10 f181 	uxtah	r1, r0, r1
 8007816:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800781a:	f8a4 1108 	strh.w	r1, [r4, #264]	; 0x108
    TerminalState[index].outCount -= count;
 800781e:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 8007822:	1a12      	subs	r2, r2, r0
 8007824:	b292      	uxth	r2, r2
 8007826:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 800782a:	2200      	movs	r2, #0
 800782c:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8007830:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outCount;
 8007834:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 8007838:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 800783a:	b289      	uxth	r1, r1
    if(count != 0) {
 800783c:	b182      	cbz	r2, 8007860 <USBD_CDC_DataIn+0x6c>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 800783e:	188b      	adds	r3, r1, r2
 8007840:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 8007842:	bf88      	it	hi
 8007844:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007848:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 800784a:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 800784c:	462a      	mov	r2, r5
 800784e:	4421      	add	r1, r4
 8007850:	4805      	ldr	r0, [pc, #20]	; (8007868 <USBD_CDC_DataIn+0x74>)
 8007852:	f003 fadb 	bl	800ae0c <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 8007856:	4804      	ldr	r0, [pc, #16]	; (8007868 <USBD_CDC_DataIn+0x74>)
 8007858:	f003 fae6 	bl	800ae28 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 800785c:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8007860:	4630      	mov	r0, r6
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	200011f4 	.word	0x200011f4
 8007868:	20000fd0 	.word	0x20000fd0
 800786c:	20000b20 	.word	0x20000b20

08007870 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8007870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 8007874:	4604      	mov	r4, r0
{
 8007876:	b085      	sub	sp, #20
  if(mode != CMD_INTERACTIVE) return;
 8007878:	b9b0      	cbnz	r0, 80078a8 <CmdStats+0x38>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800787a:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 800787c:	480c      	ldr	r0, [pc, #48]	; (80078b0 <CmdStats+0x40>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 800787e:	2214      	movs	r2, #20
    s[i] = TerminalState[i].stats;
 8007880:	f8d0 9120 	ldr.w	r9, [r0, #288]	; 0x120
 8007884:	f500 7588 	add.w	r5, r0, #272	; 0x110
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8007888:	4621      	mov	r1, r4
 800788a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    s[i] = TerminalState[i].stats;
 800788e:	e895 01e0 	ldmia.w	r5, {r5, r6, r7, r8}
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8007892:	f7f8 fddd 	bl	8000450 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8007896:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8007898:	4806      	ldr	r0, [pc, #24]	; (80078b4 <CmdStats+0x44>)
 800789a:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 800789e:	4633      	mov	r3, r6
 80078a0:	462a      	mov	r2, r5
 80078a2:	4621      	mov	r1, r4
 80078a4:	f7f8 fe32 	bl	800050c <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 80078a8:	b005      	add	sp, #20
 80078aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ae:	bf00      	nop
 80078b0:	20000b20 	.word	0x20000b20
 80078b4:	0800c8f5 	.word	0x0800c8f5

080078b8 <TerminalInit>:
{
 80078b8:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 80078ba:	4c17      	ldr	r4, [pc, #92]	; (8007918 <TerminalInit+0x60>)
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	4619      	mov	r1, r3
 80078c2:	2202      	movs	r2, #2
 80078c4:	6840      	ldr	r0, [r0, #4]
 80078c6:	f7f8 fe7f 	bl	80005c8 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	2300      	movs	r3, #0
 80078ce:	4619      	mov	r1, r3
 80078d0:	2202      	movs	r2, #2
 80078d2:	6880      	ldr	r0, [r0, #8]
 80078d4:	f7f8 fe78 	bl	80005c8 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 80078d8:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 80078da:	4c10      	ldr	r4, [pc, #64]	; (800791c <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 80078dc:	68c0      	ldr	r0, [r0, #12]
 80078de:	2300      	movs	r3, #0
 80078e0:	4619      	mov	r1, r3
 80078e2:	2202      	movs	r2, #2
 80078e4:	f7f8 fe70 	bl	80005c8 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 80078e8:	2200      	movs	r2, #0
 80078ea:	490d      	ldr	r1, [pc, #52]	; (8007920 <TerminalInit+0x68>)
 80078ec:	4620      	mov	r0, r4
 80078ee:	f002 fec1 	bl	800a674 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 80078f2:	490c      	ldr	r1, [pc, #48]	; (8007924 <TerminalInit+0x6c>)
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <TerminalInit+0x70>)
 80078f6:	694a      	ldr	r2, [r1, #20]
 80078f8:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80078fa:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <TerminalInit+0x74>)
 80078fe:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8007900:	f002 fecd 	bl	800a69e <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8007904:	4620      	mov	r0, r4
 8007906:	490a      	ldr	r1, [pc, #40]	; (8007930 <TerminalInit+0x78>)
 8007908:	f003 fa79 	bl	800adfe <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 800790c:	4620      	mov	r0, r4
}
 800790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 8007912:	f002 becb 	b.w	800a6ac <USBD_Start>
 8007916:	bf00      	nop
 8007918:	20000008 	.word	0x20000008
 800791c:	20000fd0 	.word	0x20000fd0
 8007920:	20000a08 	.word	0x20000a08
 8007924:	200008dc 	.word	0x200008dc
 8007928:	200011f4 	.word	0x200011f4
 800792c:	080077f5 	.word	0x080077f5
 8007930:	20000a2c 	.word	0x20000a2c

08007934 <TerminalRead>:
{
 8007934:	b530      	push	{r4, r5, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8007936:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 8007938:	4d10      	ldr	r5, [pc, #64]	; (800797c <TerminalRead+0x48>)
 800793a:	f44f 7392 	mov.w	r3, #292	; 0x124
 800793e:	440a      	add	r2, r1
 8007940:	460c      	mov	r4, r1
 8007942:	fb03 5300 	mla	r3, r3, r0, r5
 8007946:	f8b3 5084 	ldrh.w	r5, [r3, #132]	; 0x84
 800794a:	b2ad      	uxth	r5, r5
 800794c:	1a60      	subs	r0, r4, r1
 800794e:	b10d      	cbz	r5, 8007954 <TerminalRead+0x20>
 8007950:	4294      	cmp	r4, r2
 8007952:	d101      	bne.n	8007958 <TerminalRead+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
 8007954:	b662      	cpsie	i
}
 8007956:	bd30      	pop	{r4, r5, pc}
    tail   = TerminalState[index].inTail;
 8007958:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800795c:	b280      	uxth	r0, r0
    *ptr++ = TerminalState[index].inBuffer[tail];
 800795e:	5c1d      	ldrb	r5, [r3, r0]
 8007960:	f804 5b01 	strb.w	r5, [r4], #1
    TerminalState[index].inTail = TERMINALINCR(tail);
 8007964:	3001      	adds	r0, #1
 8007966:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800796a:	f8a3 0082 	strh.w	r0, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 800796e:	f8b3 0084 	ldrh.w	r0, [r3, #132]	; 0x84
 8007972:	3801      	subs	r0, #1
 8007974:	b280      	uxth	r0, r0
 8007976:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
 800797a:	e7e4      	b.n	8007946 <TerminalRead+0x12>
 800797c:	20000b20 	.word	0x20000b20

08007980 <_read_r>:
{
 8007980:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8007982:	2000      	movs	r0, #0
 8007984:	461a      	mov	r2, r3
 8007986:	f7ff bfd5 	b.w	8007934 <TerminalRead>

0800798a <TerminalReadNonBlock>:
{
 800798a:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 800798c:	2201      	movs	r2, #1
 800798e:	f7ff ffd1 	bl	8007934 <TerminalRead>
}
 8007992:	fab0 f080 	clz	r0, r0
 8007996:	0940      	lsrs	r0, r0, #5
 8007998:	bd08      	pop	{r3, pc}

0800799a <TerminalReadAnyNonBlock>:
    rc = TerminalReadNonBlock(i, c);
 800799a:	4601      	mov	r1, r0
{
 800799c:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 800799e:	2000      	movs	r0, #0
 80079a0:	f7ff fff3 	bl	800798a <TerminalReadNonBlock>
}
 80079a4:	3000      	adds	r0, #0
 80079a6:	bf18      	it	ne
 80079a8:	2001      	movne	r0, #1
 80079aa:	bd08      	pop	{r3, pc}

080079ac <TerminalOutputBufferWrite>:
{
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	4e37      	ldr	r6, [pc, #220]	; (8007a8c <TerminalOutputBufferWrite+0xe0>)
 80079b0:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 80079b4:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 80079b6:	fb03 6300 	mla	r3, r3, r0, r6
  if(len >= TERMINALBUFFERSIZE) {
 80079ba:	d906      	bls.n	80079ca <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 80079bc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80079c0:	3201      	adds	r2, #1
 80079c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 80079c6:	2001      	movs	r0, #1
 80079c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 80079ca:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 80079ce:	fa12 f484 	uxtah	r4, r2, r4
 80079d2:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 80079d4:	bf82      	ittt	hi
 80079d6:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 80079da:	3401      	addhi	r4, #1
 80079dc:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 80079e0:	f44f 7392 	mov.w	r3, #292	; 0x124
 80079e4:	fb03 6300 	mla	r3, r3, r0, r6
 80079e8:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 80079ec:	fa12 f484 	uxtah	r4, r2, r4
 80079f0:	2c7f      	cmp	r4, #127	; 0x7f
 80079f2:	d8f9      	bhi.n	80079e8 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80079f4:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 80079f6:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 80079fa:	4414      	add	r4, r2
 80079fc:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8007a00:	f44f 7492 	mov.w	r4, #292	; 0x124
 8007a04:	440a      	add	r2, r1
 8007a06:	fb04 6400 	mla	r4, r4, r0, r6
  while((len != 0) 
 8007a0a:	428a      	cmp	r2, r1
 8007a0c:	d004      	beq.n	8007a18 <TerminalOutputBufferWrite+0x6c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8007a0e:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b7f      	cmp	r3, #127	; 0x7f
 8007a16:	d924      	bls.n	8007a62 <TerminalOutputBufferWrite+0xb6>
  tail = TerminalState[index].outTail;
 8007a18:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007a1c:	fb03 6300 	mla	r3, r3, r0, r6
 8007a20:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
  count = TerminalState[index].outCount;
 8007a24:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
  tail = TerminalState[index].outTail;
 8007a28:	b289      	uxth	r1, r1
  count = TerminalState[index].outCount;
 8007a2a:	b292      	uxth	r2, r2
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8007a2c:	188b      	adds	r3, r1, r2
 8007a2e:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8007a30:	bf88      	it	hi
 8007a32:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  switch(index) {
 8007a36:	b988      	cbnz	r0, 8007a5c <TerminalOutputBufferWrite+0xb0>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8007a38:	4d15      	ldr	r5, [pc, #84]	; (8007a90 <TerminalOutputBufferWrite+0xe4>)
 8007a3a:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d10c      	bne.n	8007a5c <TerminalOutputBufferWrite+0xb0>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007a42:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8007a44:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8007a46:	4622      	mov	r2, r4
 8007a48:	4431      	add	r1, r6
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f003 f9de 	bl	800ae0c <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8007a50:	4628      	mov	r0, r5
 8007a52:	f003 f9e9 	bl	800ae28 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8007a56:	b908      	cbnz	r0, 8007a5c <TerminalOutputBufferWrite+0xb0>
	TerminalState[index].outSending = count;
 8007a58:	f8a6 410c 	strh.w	r4, [r6, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 8007a5c:	b662      	cpsie	i
 8007a5e:	2000      	movs	r0, #0
}
 8007a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    head = TerminalState[index].outHead;
 8007a62:	f8b4 5106 	ldrh.w	r5, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8007a66:	f811 7b01 	ldrb.w	r7, [r1], #1
    head = TerminalState[index].outHead;
 8007a6a:	b2ad      	uxth	r5, r5
    TerminalState[index].outBuffer[head] = *p++;
 8007a6c:	1963      	adds	r3, r4, r5
    TerminalState[index].outHead = TERMINALINCR(head);
 8007a6e:	3501      	adds	r5, #1
 8007a70:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8007a74:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8007a78:	f883 7086 	strb.w	r7, [r3, #134]	; 0x86
    TerminalState[index].outCount++;
 8007a7c:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 8007a80:	3301      	adds	r3, #1
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
 8007a88:	e7bf      	b.n	8007a0a <TerminalOutputBufferWrite+0x5e>
 8007a8a:	bf00      	nop
 8007a8c:	20000b20 	.word	0x20000b20
 8007a90:	20000fd0 	.word	0x20000fd0

08007a94 <_write_r>:
{
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8007a98:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8007ad0 <_write_r+0x3c>
{
 8007a9c:	461d      	mov	r5, r3
 8007a9e:	4614      	mov	r4, r2
 8007aa0:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 8007aa2:	42bc      	cmp	r4, r7
 8007aa4:	4626      	mov	r6, r4
 8007aa6:	d102      	bne.n	8007aae <_write_r+0x1a>
}
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr == '\n') {
 8007aae:	7833      	ldrb	r3, [r6, #0]
 8007ab0:	2b0a      	cmp	r3, #10
 8007ab2:	f104 0401 	add.w	r4, r4, #1
 8007ab6:	d104      	bne.n	8007ac2 <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4641      	mov	r1, r8
 8007abc:	2000      	movs	r0, #0
 8007abe:	f7ff ff75 	bl	80079ac <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f7ff ff70 	bl	80079ac <TerminalOutputBufferWrite>
 8007acc:	e7e9      	b.n	8007aa2 <_write_r+0xe>
 8007ace:	bf00      	nop
 8007ad0:	0800c67c 	.word	0x0800c67c

08007ad4 <TerminalInputBufferWrite>:
{
 8007ad4:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8007ad6:	4c17      	ldr	r4, [pc, #92]	; (8007b34 <TerminalInputBufferWrite+0x60>)
 8007ad8:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007adc:	fb03 4000 	mla	r0, r3, r0, r4
 8007ae0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8007ae4:	fa12 f383 	uxtah	r3, r2, r3
 8007ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8007aea:	d906      	bls.n	8007afa <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 8007aec:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 8007af0:	3301      	adds	r3, #1
 8007af2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 8007af6:	2001      	movs	r0, #1
 8007af8:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 8007afa:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8007afe:	4413      	add	r3, r2
 8007b00:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 8007b04:	440a      	add	r2, r1
  while(len != 0) {
 8007b06:	4291      	cmp	r1, r2
 8007b08:	d101      	bne.n	8007b0e <TerminalInputBufferWrite+0x3a>
  return 0;
 8007b0a:	2000      	movs	r0, #0
}
 8007b0c:	bd10      	pop	{r4, pc}
    head = TerminalState[index].inHead;
 8007b0e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 8007b12:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 8007b16:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 8007b18:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b20:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 8007b24:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8007b28:	3301      	adds	r3, #1
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8007b30:	e7e9      	b.n	8007b06 <TerminalInputBufferWrite+0x32>
 8007b32:	bf00      	nop
 8007b34:	20000b20 	.word	0x20000b20

08007b38 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 8007b38:	4801      	ldr	r0, [pc, #4]	; (8007b40 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8007b3a:	f001 bd45 	b.w	80095c8 <HAL_PCD_IRQHandler>
 8007b3e:	bf00      	nop
 8007b40:	200011f8 	.word	0x200011f8

08007b44 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 8007b44:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8007b46:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <Uncompress+0x70>)
{
 8007b48:	b08a      	sub	sp, #40	; 0x28
 8007b4a:	4605      	mov	r5, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8007b4c:	466a      	mov	r2, sp
 8007b4e:	f103 0620 	add.w	r6, r3, #32
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	6859      	ldr	r1, [r3, #4]
 8007b56:	4614      	mov	r4, r2
 8007b58:	c403      	stmia	r4!, {r0, r1}
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	42b3      	cmp	r3, r6
 8007b5e:	4622      	mov	r2, r4
 8007b60:	d1f7      	bne.n	8007b52 <Uncompress+0xe>
 8007b62:	6818      	ldr	r0, [r3, #0]
 8007b64:	889b      	ldrh	r3, [r3, #4]
 8007b66:	6020      	str	r0, [r4, #0]
  uint32_t i,bits;
  uint32_t data;
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
 8007b68:	4629      	mov	r1, r5
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 8007b6a:	80a3      	strh	r3, [r4, #4]
  data = (uint8_t)(*str++);
 8007b6c:	f811 2b02 	ldrb.w	r2, [r1], #2
  data <<= 8;
  data |= (uint8_t)(*str++);
 8007b70:	786b      	ldrb	r3, [r5, #1]
 8007b72:	4d11      	ldr	r5, [pc, #68]	; (8007bb8 <Uncompress+0x74>)
 8007b74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  bits = 0;
  i = 0;
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8007b78:	2200      	movs	r2, #0
  bits = 0;
 8007b7a:	4614      	mov	r4, r2
  while((data & (0x3f << 10)) != 0) {
 8007b7c:	f413 407c 	ands.w	r0, r3, #64512	; 0xfc00
 8007b80:	d103      	bne.n	8007b8a <Uncompress+0x46>
    if(bits >= 8) {
      bits -= 8;
      data |= ((uint32_t)(*str++)) << bits; 
    }
  }
  buf[i]='\0';
 8007b82:	54a8      	strb	r0, [r5, r2]
  return buf;
}
 8007b84:	480c      	ldr	r0, [pc, #48]	; (8007bb8 <Uncompress+0x74>)
 8007b86:	b00a      	add	sp, #40	; 0x28
 8007b88:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8007b8a:	019b      	lsls	r3, r3, #6
    data &= 0x3fffff;
 8007b8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
    c = decoderRing[(data>>16)-1];
 8007b90:	a80a      	add	r0, sp, #40	; 0x28
 8007b92:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    buf[i++] = c;
 8007b96:	f810 0c29 	ldrb.w	r0, [r0, #-41]
 8007b9a:	54a8      	strb	r0, [r5, r2]
    bits += 6;
 8007b9c:	1da0      	adds	r0, r4, #6
    if(bits >= 8) {
 8007b9e:	2807      	cmp	r0, #7
 8007ba0:	d904      	bls.n	8007bac <Uncompress+0x68>
      bits -= 8;
 8007ba2:	1ea0      	subs	r0, r4, #2
      data |= ((uint32_t)(*str++)) << bits; 
 8007ba4:	780c      	ldrb	r4, [r1, #0]
 8007ba6:	4084      	lsls	r4, r0
 8007ba8:	4323      	orrs	r3, r4
 8007baa:	3101      	adds	r1, #1
 8007bac:	3201      	adds	r2, #1
 8007bae:	4604      	mov	r4, r0
 8007bb0:	e7e4      	b.n	8007b7c <Uncompress+0x38>
 8007bb2:	bf00      	nop
 8007bb4:	0800ce72 	.word	0x0800ce72
 8007bb8:	20000c44 	.word	0x20000c44

08007bbc <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8007bbc:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	b1f0      	cbz	r0, 8007c00 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8007bc2:	b1e9      	cbz	r1, 8007c00 <DecodeReadRegister+0x44>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8007bc4:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8007bc6:	888a      	ldrh	r2, [r1, #4]
 8007bc8:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 8007bca:	2d10      	cmp	r5, #16
 8007bcc:	d005      	beq.n	8007bda <DecodeReadRegister+0x1e>
 8007bce:	2d20      	cmp	r5, #32
 8007bd0:	d005      	beq.n	8007bde <DecodeReadRegister+0x22>
 8007bd2:	2d08      	cmp	r5, #8
 8007bd4:	d105      	bne.n	8007be2 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8007bd6:	5cd0      	ldrb	r0, [r2, r3]
    break;
 8007bd8:	bd38      	pop	{r3, r4, r5, pc}
  case 16:
    val = *(uint16_t *)address;
 8007bda:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 8007bdc:	bd38      	pop	{r3, r4, r5, pc}
  case 32:
    val = *(uint32_t *)address;
 8007bde:	58d0      	ldr	r0, [r2, r3]
    break;
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s",
 8007be2:	6808      	ldr	r0, [r1, #0]
 8007be4:	f7ff ffae 	bl	8007b44 <Uncompress>
 8007be8:	4629      	mov	r1, r5
 8007bea:	4602      	mov	r2, r0
 8007bec:	4805      	ldr	r0, [pc, #20]	; (8007c04 <DecodeReadRegister+0x48>)
 8007bee:	f7f8 fc8d 	bl	800050c <printf>
	   (unsigned int)r->size,
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
 8007bf2:	6820      	ldr	r0, [r4, #0]
 8007bf4:	f7ff ffa6 	bl	8007b44 <Uncompress>
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	4803      	ldr	r0, [pc, #12]	; (8007c08 <DecodeReadRegister+0x4c>)
 8007bfc:	f7f8 fc86 	bl	800050c <printf>
	   Uncompress(p->name));
    return 0;
 8007c00:	2000      	movs	r0, #0
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	0800ce02 	.word	0x0800ce02
 8007c08:	0800ce24 	.word	0x0800ce24

08007c0c <DecodeWriteRegister>:
}

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8007c0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 8007c0e:	4605      	mov	r5, r0
 8007c10:	b1f8      	cbz	r0, 8007c52 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 8007c12:	b1f1      	cbz	r1, 8007c52 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8007c14:	798c      	ldrb	r4, [r1, #6]
  address = p->base + r->offset;
 8007c16:	8888      	ldrh	r0, [r1, #4]
 8007c18:	686b      	ldr	r3, [r5, #4]
  switch(r->size) {
 8007c1a:	2c10      	cmp	r4, #16
 8007c1c:	d006      	beq.n	8007c2c <DecodeWriteRegister+0x20>
 8007c1e:	2c20      	cmp	r4, #32
 8007c20:	d006      	beq.n	8007c30 <DecodeWriteRegister+0x24>
 8007c22:	2c08      	cmp	r4, #8
 8007c24:	d106      	bne.n	8007c34 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 8007c26:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 8007c28:	2000      	movs	r0, #0
    break;
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 8007c2c:	52c2      	strh	r2, [r0, r3]
 8007c2e:	e7fb      	b.n	8007c28 <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 8007c30:	50c2      	str	r2, [r0, r3]
 8007c32:	e7f9      	b.n	8007c28 <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	f7ff ff85 	bl	8007b44 <Uncompress>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4806      	ldr	r0, [pc, #24]	; (8007c58 <DecodeWriteRegister+0x4c>)
 8007c40:	f7f8 fc64 	bl	800050c <printf>
    printf(" in periphral %s!\n",
 8007c44:	6828      	ldr	r0, [r5, #0]
 8007c46:	f7ff ff7d 	bl	8007b44 <Uncompress>
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	4803      	ldr	r0, [pc, #12]	; (8007c5c <DecodeWriteRegister+0x50>)
 8007c4e:	f7f8 fc5d 	bl	800050c <printf>
  if(p == NULL) return 1;
 8007c52:	2001      	movs	r0, #1
}
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	0800ce02 	.word	0x0800ce02
 8007c5c:	0800ce24 	.word	0x0800ce24

08007c60 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8007c60:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8007c62:	4605      	mov	r5, r0
{
 8007c64:	b085      	sub	sp, #20
  if(f == NULL) return;
 8007c66:	b1c8      	cbz	r0, 8007c9c <DecodeField+0x3c>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8007c68:	7943      	ldrb	r3, [r0, #5]
 8007c6a:	2401      	movs	r4, #1
 8007c6c:	409c      	lsls	r4, r3
 8007c6e:	7903      	ldrb	r3, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8007c70:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8007c72:	40d9      	lsrs	r1, r3
 8007c74:	3c01      	subs	r4, #1
 8007c76:	400c      	ands	r4, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8007c78:	f7ff ff64 	bl	8007b44 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8007c7c:	796a      	ldrb	r2, [r5, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8007c7e:	4908      	ldr	r1, [pc, #32]	; (8007ca0 <DecodeField+0x40>)
 8007c80:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <DecodeField+0x44>)
 8007c82:	2a01      	cmp	r2, #1
 8007c84:	bf98      	it	ls
 8007c86:	460b      	movls	r3, r1
 8007c88:	7929      	ldrb	r1, [r5, #4]
 8007c8a:	9102      	str	r1, [sp, #8]
 8007c8c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007c90:	4601      	mov	r1, r0
 8007c92:	4623      	mov	r3, r4
 8007c94:	4622      	mov	r2, r4
 8007c96:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <DecodeField+0x48>)
 8007c98:	f7f8 fc38 	bl	800050c <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8007c9c:	b005      	add	sp, #20
 8007c9e:	bd30      	pop	{r4, r5, pc}
 8007ca0:	0800cda8 	.word	0x0800cda8
 8007ca4:	0800cda2 	.word	0x0800cda2
 8007ca8:	0800cdae 	.word	0x0800cdae

08007cac <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8007cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cae:	460f      	mov	r7, r1
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	461d      	mov	r5, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	b318      	cbz	r0, 8007d00 <DecodeRegister+0x54>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8007cb8:	6800      	ldr	r0, [r0, #0]
 8007cba:	f7ff ff43 	bl	8007b44 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8007cbe:	88a3      	ldrh	r3, [r4, #4]
 8007cc0:	443b      	add	r3, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	79a3      	ldrb	r3, [r4, #6]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	4601      	mov	r1, r0
 8007cca:	4633      	mov	r3, r6
 8007ccc:	4632      	mov	r2, r6
 8007cce:	480d      	ldr	r0, [pc, #52]	; (8007d04 <DecodeRegister+0x58>)
 8007cd0:	f7f8 fc1c 	bl	800050c <printf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8007cd4:	68a7      	ldr	r7, [r4, #8]
 8007cd6:	b18f      	cbz	r7, 8007cfc <DecodeRegister+0x50>
 8007cd8:	b195      	cbz	r5, 8007d00 <DecodeRegister+0x54>
 8007cda:	2500      	movs	r5, #0
    f = r->fields;
    for(i=0; i<r->numFields; i++) {
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007ce4:	d305      	bcc.n	8007cf2 <DecodeRegister+0x46>
      DecodeField(f,val);
      f++;
    }
  }
  if(decodeFields) {
    printf("\n");
 8007ce6:	200a      	movs	r0, #10
  }

}
 8007ce8:	b003      	add	sp, #12
 8007cea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 8007cee:	f7f8 bc25 	b.w	800053c <putchar>
      DecodeField(f,val);
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	f7ff ffb4 	bl	8007c60 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	e7ef      	b.n	8007cdc <DecodeRegister+0x30>
  if(decodeFields) {
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	d1f2      	bne.n	8007ce6 <DecodeRegister+0x3a>
}
 8007d00:	b003      	add	sp, #12
 8007d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d04:	0800ce37 	.word	0x0800ce37

08007d08 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8007d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0c:	4688      	mov	r8, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 8007d0e:	4604      	mov	r4, r0
 8007d10:	b178      	cbz	r0, 8007d32 <DecodePeripheral+0x2a>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	f7ff ff16 	bl	8007b44 <Uncompress>
 8007d18:	6862      	ldr	r2, [r4, #4]
 8007d1a:	4601      	mov	r1, r0
 8007d1c:	480c      	ldr	r0, [pc, #48]	; (8007d50 <DecodePeripheral+0x48>)
 8007d1e:	f7f8 fbf5 	bl	800050c <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8007d22:	68a7      	ldr	r7, [r4, #8]
 8007d24:	b12f      	cbz	r7, 8007d32 <DecodePeripheral+0x2a>
 8007d26:	2500      	movs	r5, #0
    r = p->registers;
    for(i=0; i<p->numRegisters; i++) {
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	eb07 1605 	add.w	r6, r7, r5, lsl #4
 8007d30:	d301      	bcc.n	8007d36 <DecodePeripheral+0x2e>
 8007d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      /* Read value */
      val = DecodeReadRegister(p,r);
 8007d36:	4631      	mov	r1, r6
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f7ff ff3f 	bl	8007bbc <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8007d3e:	4643      	mov	r3, r8
 8007d40:	4602      	mov	r2, r0
 8007d42:	6861      	ldr	r1, [r4, #4]
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ffb1 	bl	8007cac <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8007d4a:	3501      	adds	r5, #1
 8007d4c:	e7ec      	b.n	8007d28 <DecodePeripheral+0x20>
 8007d4e:	bf00      	nop
 8007d50:	0800cdd7 	.word	0x0800cdd7

08007d54 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8007d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d58:	4605      	mov	r5, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8007d5a:	2009      	movs	r0, #9
 8007d5c:	f7f8 fbee 	bl	800053c <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8007d60:	4e0e      	ldr	r6, [pc, #56]	; (8007d9c <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 8007d62:	4f0f      	ldr	r7, [pc, #60]	; (8007da0 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8007d64:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8007da4 <DecodePrintPeripherals+0x50>
  col = 8;
 8007d68:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8007d6a:	6828      	ldr	r0, [r5, #0]
 8007d6c:	b908      	cbnz	r0, 8007d72 <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8007d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8007d72:	f7ff fee7 	bl	8007b44 <Uncompress>
 8007d76:	4601      	mov	r1, r0
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7f8 fbc7 	bl	800050c <printf>
    if((p+1)->name != NULL) {
 8007d7e:	692b      	ldr	r3, [r5, #16]
    col += printf("%s",Uncompress(p->name));
 8007d80:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8007d82:	b14b      	cbz	r3, 8007d98 <DecodePrintPeripherals+0x44>
      col += printf(", ");
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7f8 fbc1 	bl	800050c <printf>
 8007d8a:	4404      	add	r4, r0
      if(col > 70) {
 8007d8c:	2c46      	cmp	r4, #70	; 0x46
 8007d8e:	d903      	bls.n	8007d98 <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8007d90:	4640      	mov	r0, r8
 8007d92:	f7f8 fbbb 	bl	800050c <printf>
	col = 8;
 8007d96:	2408      	movs	r4, #8
  for(; p->name != NULL; p++) {
 8007d98:	3510      	adds	r5, #16
 8007d9a:	e7e6      	b.n	8007d6a <DecodePrintPeripherals+0x16>
 8007d9c:	0800ce21 	.word	0x0800ce21
 8007da0:	0800cdab 	.word	0x0800cdab
 8007da4:	0800cdff 	.word	0x0800cdff

08007da8 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8007dae:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8007db0:	460d      	mov	r5, r1
  printf("\t");
 8007db2:	f7f8 fbc3 	bl	800053c <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8007db6:	4f12      	ldr	r7, [pc, #72]	; (8007e00 <DecodePrintRegisters+0x58>)
    if(count) {
      col += printf(", ");
 8007db8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8007e04 <DecodePrintRegisters+0x5c>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8007dbc:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8007e08 <DecodePrintRegisters+0x60>
 8007dc0:	3d01      	subs	r5, #1
 8007dc2:	3610      	adds	r6, #16
  col = 8;
 8007dc4:	2408      	movs	r4, #8
  while(count--) {
 8007dc6:	1c6b      	adds	r3, r5, #1
 8007dc8:	d101      	bne.n	8007dce <DecodePrintRegisters+0x26>
      }
    }
    r++;
  }
}
 8007dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8007dce:	f856 0c10 	ldr.w	r0, [r6, #-16]
 8007dd2:	f7ff feb7 	bl	8007b44 <Uncompress>
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7f8 fb97 	bl	800050c <printf>
 8007dde:	4404      	add	r4, r0
 8007de0:	b2e4      	uxtb	r4, r4
    if(count) {
 8007de2:	b155      	cbz	r5, 8007dfa <DecodePrintRegisters+0x52>
      col += printf(", ");
 8007de4:	4640      	mov	r0, r8
 8007de6:	f7f8 fb91 	bl	800050c <printf>
 8007dea:	4404      	add	r4, r0
 8007dec:	b2e4      	uxtb	r4, r4
      if(col > 70) {
 8007dee:	2c46      	cmp	r4, #70	; 0x46
 8007df0:	d903      	bls.n	8007dfa <DecodePrintRegisters+0x52>
	printf("\n\t");
 8007df2:	4648      	mov	r0, r9
 8007df4:	f7f8 fb8a 	bl	800050c <printf>
	col = 8;
 8007df8:	2408      	movs	r4, #8
 8007dfa:	3d01      	subs	r5, #1
 8007dfc:	3610      	adds	r6, #16
 8007dfe:	e7e2      	b.n	8007dc6 <DecodePrintRegisters+0x1e>
 8007e00:	0800ce21 	.word	0x0800ce21
 8007e04:	0800cdab 	.word	0x0800cdab
 8007e08:	0800cdff 	.word	0x0800cdff

08007e0c <CmdDecode>:

void CmdDecode(int mode)
{
 8007e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8007e0e:	2802      	cmp	r0, #2
{
 8007e10:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 8007e12:	d132      	bne.n	8007e7a <CmdDecode+0x6e>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8007e14:	a803      	add	r0, sp, #12
 8007e16:	f7ff fc33 	bl	8007680 <fetch_string_arg>
    if(rc) {
 8007e1a:	b968      	cbnz	r0, 8007e38 <CmdDecode+0x2c>
 8007e1c:	4c85      	ldr	r4, [pc, #532]	; (8008034 <CmdDecode+0x228>)
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	b9a0      	cbnz	r0, 8007e4c <CmdDecode+0x40>
	p++;
      }

      if(p->name == NULL) {
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	b9e8      	cbnz	r0, 8007e62 <CmdDecode+0x56>
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8007e26:	9903      	ldr	r1, [sp, #12]
 8007e28:	4883      	ldr	r0, [pc, #524]	; (8008038 <CmdDecode+0x22c>)
 8007e2a:	f7f8 fb6f 	bl	800050c <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
	DecodePrintPeripherals(Peripherals);
 8007e2e:	4881      	ldr	r0, [pc, #516]	; (8008034 <CmdDecode+0x228>)
 8007e30:	f7ff ff90 	bl	8007d54 <DecodePrintPeripherals>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8007e34:	b005      	add	sp, #20
 8007e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("decode {<periph> {<reg>}|full}\n"
 8007e38:	4880      	ldr	r0, [pc, #512]	; (800803c <CmdDecode+0x230>)
 8007e3a:	f7f8 fbbd 	bl	80005b8 <puts>
      DecodePrintPeripherals(Peripherals);
 8007e3e:	487d      	ldr	r0, [pc, #500]	; (8008034 <CmdDecode+0x228>)
 8007e40:	f7ff ff88 	bl	8007d54 <DecodePrintPeripherals>
      printf("\n\n"
 8007e44:	487e      	ldr	r0, [pc, #504]	; (8008040 <CmdDecode+0x234>)
      printf("\n\n");
 8007e46:	f7f8 fbb7 	bl	80005b8 <puts>
 8007e4a:	e7f3      	b.n	8007e34 <CmdDecode+0x28>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8007e4c:	9d03      	ldr	r5, [sp, #12]
 8007e4e:	f7ff fe79 	bl	8007b44 <Uncompress>
 8007e52:	4601      	mov	r1, r0
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7f8 fc5d 	bl	8000714 <strcasecmp>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d0e1      	beq.n	8007e22 <CmdDecode+0x16>
	p++;
 8007e5e:	3410      	adds	r4, #16
 8007e60:	e7dd      	b.n	8007e1e <CmdDecode+0x12>
      printf("Valid registers for peripheral %s:\n"
 8007e62:	f7ff fe6f 	bl	8007b44 <Uncompress>
 8007e66:	4601      	mov	r1, r0
 8007e68:	4876      	ldr	r0, [pc, #472]	; (8008044 <CmdDecode+0x238>)
 8007e6a:	f7f8 fb4f 	bl	800050c <printf>
      DecodePrintRegisters(p->registers,p->numRegisters);
 8007e6e:	89a1      	ldrh	r1, [r4, #12]
 8007e70:	68a0      	ldr	r0, [r4, #8]
 8007e72:	f7ff ff99 	bl	8007da8 <DecodePrintRegisters>
      printf("\n\n");
 8007e76:	4874      	ldr	r0, [pc, #464]	; (8008048 <CmdDecode+0x23c>)
 8007e78:	e7e5      	b.n	8007e46 <CmdDecode+0x3a>
  rc = fetch_string_arg(&pname);
 8007e7a:	4668      	mov	r0, sp
 8007e7c:	f7ff fc00 	bl	8007680 <fetch_string_arg>
  if(rc) {
 8007e80:	b948      	cbnz	r0, 8007e96 <CmdDecode+0x8a>
 8007e82:	4c6c      	ldr	r4, [pc, #432]	; (8008034 <CmdDecode+0x228>)
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	b968      	cbnz	r0, 8007ea4 <CmdDecode+0x98>
  if(p->name == NULL) {
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	b9b3      	cbnz	r3, 8007eba <CmdDecode+0xae>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8007e8c:	9900      	ldr	r1, [sp, #0]
 8007e8e:	486f      	ldr	r0, [pc, #444]	; (800804c <CmdDecode+0x240>)
 8007e90:	f7f8 fb3c 	bl	800050c <printf>
 8007e94:	e002      	b.n	8007e9c <CmdDecode+0x90>
    printf("Missing peripheral name, please chose one of:\n\n");
 8007e96:	486e      	ldr	r0, [pc, #440]	; (8008050 <CmdDecode+0x244>)
 8007e98:	f7f8 fb8e 	bl	80005b8 <puts>
    DecodePrintPeripherals(Peripherals);
 8007e9c:	4865      	ldr	r0, [pc, #404]	; (8008034 <CmdDecode+0x228>)
 8007e9e:	f7ff ff59 	bl	8007d54 <DecodePrintPeripherals>
 8007ea2:	e7e8      	b.n	8007e76 <CmdDecode+0x6a>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8007ea4:	9d00      	ldr	r5, [sp, #0]
 8007ea6:	f7ff fe4d 	bl	8007b44 <Uncompress>
 8007eaa:	4601      	mov	r1, r0
 8007eac:	4628      	mov	r0, r5
 8007eae:	f7f8 fc31 	bl	8000714 <strcasecmp>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d0e8      	beq.n	8007e88 <CmdDecode+0x7c>
    p++;
 8007eb6:	3410      	adds	r4, #16
 8007eb8:	e7e4      	b.n	8007e84 <CmdDecode+0x78>
  rc = fetch_string_arg(&rname);
 8007eba:	a801      	add	r0, sp, #4
 8007ebc:	f7ff fbe0 	bl	8007680 <fetch_string_arg>
  if(rc) {
 8007ec0:	b120      	cbz	r0, 8007ecc <CmdDecode+0xc0>
    DecodePeripheral(p,0);
 8007ec2:	2100      	movs	r1, #0
      DecodePeripheral(p,1);
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7ff ff1f 	bl	8007d08 <DecodePeripheral>
      return;
 8007eca:	e7b3      	b.n	8007e34 <CmdDecode+0x28>
  r = p->registers;
 8007ecc:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8007ece:	89a7      	ldrh	r7, [r4, #12]
 8007ed0:	9e01      	ldr	r6, [sp, #4]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8007ed2:	2f00      	cmp	r7, #0
 8007ed4:	f000 809e 	beq.w	8008014 <CmdDecode+0x208>
 8007ed8:	6828      	ldr	r0, [r5, #0]
 8007eda:	f7ff fe33 	bl	8007b44 <Uncompress>
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7f8 fc17 	bl	8000714 <strcasecmp>
 8007ee6:	3f01      	subs	r7, #1
 8007ee8:	b958      	cbnz	r0, 8007f02 <CmdDecode+0xf6>
  rc = fetch_string_arg(&fname);
 8007eea:	a802      	add	r0, sp, #8
 8007eec:	f7ff fbc8 	bl	8007680 <fetch_string_arg>
  if(rc == 0) {
 8007ef0:	b158      	cbz	r0, 8007f0a <CmdDecode+0xfe>
  val = DecodeReadRegister(p,r);
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f7ff fe61 	bl	8007bbc <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8007efa:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8007efc:	4602      	mov	r2, r0
 8007efe:	9003      	str	r0, [sp, #12]
 8007f00:	e010      	b.n	8007f24 <CmdDecode+0x118>
    r++;
 8007f02:	3510      	adds	r5, #16
 8007f04:	e7e4      	b.n	8007ed0 <CmdDecode+0xc4>
      DecodePeripheral(p,1);
 8007f06:	2101      	movs	r1, #1
 8007f08:	e7dc      	b.n	8007ec4 <CmdDecode+0xb8>
    if(strcasecmp(fname,"val") == 0) {
 8007f0a:	4952      	ldr	r1, [pc, #328]	; (8008054 <CmdDecode+0x248>)
 8007f0c:	9802      	ldr	r0, [sp, #8]
 8007f0e:	f7f8 fc01 	bl	8000714 <strcasecmp>
 8007f12:	b960      	cbnz	r0, 8007f2e <CmdDecode+0x122>
      rc = fetch_uint32_arg(&val);
 8007f14:	a803      	add	r0, sp, #12
 8007f16:	f7ff fb9f 	bl	8007658 <fetch_uint32_arg>
      if(rc) {
 8007f1a:	b108      	cbz	r0, 8007f20 <CmdDecode+0x114>
	printf("Missing value to use in decode\n");
 8007f1c:	484e      	ldr	r0, [pc, #312]	; (8008058 <CmdDecode+0x24c>)
 8007f1e:	e792      	b.n	8007e46 <CmdDecode+0x3a>
      DecodeRegister(r,p->base,val,1);
 8007f20:	9a03      	ldr	r2, [sp, #12]
 8007f22:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8007f24:	6861      	ldr	r1, [r4, #4]
 8007f26:	4628      	mov	r0, r5
 8007f28:	f7ff fec0 	bl	8007cac <DecodeRegister>
  return;
 8007f2c:	e782      	b.n	8007e34 <CmdDecode+0x28>
    f = r->fields;
 8007f2e:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8007f30:	6830      	ldr	r0, [r6, #0]
 8007f32:	b990      	cbnz	r0, 8007f5a <CmdDecode+0x14e>
    if(f->name != NULL) {
 8007f34:	6837      	ldr	r7, [r6, #0]
 8007f36:	b9df      	cbnz	r7, 8007f70 <CmdDecode+0x164>
    errno = 0;
 8007f38:	f7f8 fa42 	bl	80003c0 <__errno>
    val = strtoul(fname,NULL,0);
 8007f3c:	463a      	mov	r2, r7
    errno = 0;
 8007f3e:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8007f40:	4639      	mov	r1, r7
 8007f42:	9802      	ldr	r0, [sp, #8]
 8007f44:	f7f8 fdc2 	bl	8000acc <strtoul>
 8007f48:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8007f4a:	f7f8 fa39 	bl	80003c0 <__errno>
 8007f4e:	6803      	ldr	r3, [r0, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d04a      	beq.n	8007fea <CmdDecode+0x1de>
      printf("Invalid number '%s' entered.\n",
 8007f54:	9902      	ldr	r1, [sp, #8]
 8007f56:	4841      	ldr	r0, [pc, #260]	; (800805c <CmdDecode+0x250>)
 8007f58:	e013      	b.n	8007f82 <CmdDecode+0x176>
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8007f5a:	9f02      	ldr	r7, [sp, #8]
 8007f5c:	f7ff fdf2 	bl	8007b44 <Uncompress>
 8007f60:	4601      	mov	r1, r0
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7f8 fbd6 	bl	8000714 <strcasecmp>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	d0e3      	beq.n	8007f34 <CmdDecode+0x128>
      f++;
 8007f6c:	3608      	adds	r6, #8
 8007f6e:	e7df      	b.n	8007f30 <CmdDecode+0x124>
      rc = fetch_uint32_arg(&val);
 8007f70:	a803      	add	r0, sp, #12
 8007f72:	f7ff fb71 	bl	8007658 <fetch_uint32_arg>
      if(rc) {
 8007f76:	b138      	cbz	r0, 8007f88 <CmdDecode+0x17c>
	printf("Missing Value to program into register %s\n",
 8007f78:	6828      	ldr	r0, [r5, #0]
 8007f7a:	f7ff fde3 	bl	8007b44 <Uncompress>
 8007f7e:	4601      	mov	r1, r0
 8007f80:	4837      	ldr	r0, [pc, #220]	; (8008060 <CmdDecode+0x254>)
      printf("Invalid number '%s' entered.\n",
 8007f82:	f7f8 fac3 	bl	800050c <printf>
      return;
 8007f86:	e755      	b.n	8007e34 <CmdDecode+0x28>
      t = DecodeReadRegister(p,r);
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fe16 	bl	8007bbc <DecodeReadRegister>
      m = (1<<f->width)-1;
 8007f90:	7972      	ldrb	r2, [r6, #5]
 8007f92:	2301      	movs	r3, #1
 8007f94:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8007f96:	7932      	ldrb	r2, [r6, #4]
      m = (1<<f->width)-1;
 8007f98:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8007f9a:	fa03 f102 	lsl.w	r1, r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8007f9e:	fa20 f702 	lsr.w	r7, r0, r2
      t &= ~(m << f->offset);
 8007fa2:	ea20 0001 	bic.w	r0, r0, r1
      t |= (val & m) << f->offset;
 8007fa6:	9903      	ldr	r1, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8007fa8:	401f      	ands	r7, r3
      t |= (val & m) << f->offset;
 8007faa:	400b      	ands	r3, r1
 8007fac:	fa03 f202 	lsl.w	r2, r3, r2
      DecodeWriteRegister(p,r,t);
 8007fb0:	4302      	orrs	r2, r0
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f7ff fe29 	bl	8007c0c <DecodeWriteRegister>
      printf("%s.",
 8007fba:	6820      	ldr	r0, [r4, #0]
 8007fbc:	f7ff fdc2 	bl	8007b44 <Uncompress>
 8007fc0:	4601      	mov	r1, r0
 8007fc2:	4828      	ldr	r0, [pc, #160]	; (8008064 <CmdDecode+0x258>)
 8007fc4:	f7f8 faa2 	bl	800050c <printf>
      printf("%s.",
 8007fc8:	6828      	ldr	r0, [r5, #0]
 8007fca:	f7ff fdbb 	bl	8007b44 <Uncompress>
 8007fce:	4601      	mov	r1, r0
 8007fd0:	4824      	ldr	r0, [pc, #144]	; (8008064 <CmdDecode+0x258>)
 8007fd2:	f7f8 fa9b 	bl	800050c <printf>
      printf("%s (%d) -> (%d)\n",
 8007fd6:	6830      	ldr	r0, [r6, #0]
 8007fd8:	f7ff fdb4 	bl	8007b44 <Uncompress>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	4601      	mov	r1, r0
 8007fe0:	463a      	mov	r2, r7
 8007fe2:	4821      	ldr	r0, [pc, #132]	; (8008068 <CmdDecode+0x25c>)
 8007fe4:	f7f8 fa92 	bl	800050c <printf>
      return;
 8007fe8:	e724      	b.n	8007e34 <CmdDecode+0x28>
    DecodeWriteRegister(p,r,val);
 8007fea:	9a03      	ldr	r2, [sp, #12]
 8007fec:	4629      	mov	r1, r5
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f7ff fe0c 	bl	8007c0c <DecodeWriteRegister>
    printf("%s.",
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	f7ff fda5 	bl	8007b44 <Uncompress>
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	4819      	ldr	r0, [pc, #100]	; (8008064 <CmdDecode+0x258>)
 8007ffe:	f7f8 fa85 	bl	800050c <printf>
    printf("%s = 0x%08x\n",
 8008002:	6828      	ldr	r0, [r5, #0]
 8008004:	f7ff fd9e 	bl	8007b44 <Uncompress>
 8008008:	9a03      	ldr	r2, [sp, #12]
 800800a:	4601      	mov	r1, r0
 800800c:	4817      	ldr	r0, [pc, #92]	; (800806c <CmdDecode+0x260>)
 800800e:	f7f8 fa7d 	bl	800050c <printf>
    return;
 8008012:	e70f      	b.n	8007e34 <CmdDecode+0x28>
    if(strcasecmp(rname,"full") == 0) {
 8008014:	4916      	ldr	r1, [pc, #88]	; (8008070 <CmdDecode+0x264>)
 8008016:	4630      	mov	r0, r6
 8008018:	f7f8 fb7c 	bl	8000714 <strcasecmp>
 800801c:	2800      	cmp	r0, #0
 800801e:	f43f af72 	beq.w	8007f06 <CmdDecode+0xfa>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8008022:	6820      	ldr	r0, [r4, #0]
 8008024:	f7ff fd8e 	bl	8007b44 <Uncompress>
 8008028:	4631      	mov	r1, r6
 800802a:	4602      	mov	r2, r0
 800802c:	4811      	ldr	r0, [pc, #68]	; (8008074 <CmdDecode+0x268>)
 800802e:	f7f8 fa6d 	bl	800050c <printf>
 8008032:	e71c      	b.n	8007e6e <CmdDecode+0x62>
 8008034:	08014a8c 	.word	0x08014a8c
 8008038:	0800cc07 	.word	0x0800cc07
 800803c:	0800c99f 	.word	0x0800c99f
 8008040:	0800cbb2 	.word	0x0800cbb2
 8008044:	0800cc42 	.word	0x0800cc42
 8008048:	0800ccd0 	.word	0x0800ccd0
 800804c:	0800cc96 	.word	0x0800cc96
 8008050:	0800cc67 	.word	0x0800cc67
 8008054:	0800cd0f 	.word	0x0800cd0f
 8008058:	0800cd13 	.word	0x0800cd13
 800805c:	0800cd72 	.word	0x0800cd72
 8008060:	0800cd32 	.word	0x0800cd32
 8008064:	0800cd5d 	.word	0x0800cd5d
 8008068:	0800cd61 	.word	0x0800cd61
 800806c:	0800cd90 	.word	0x0800cd90
 8008070:	0800cd9d 	.word	0x0800cd9d
 8008074:	0800ccd2 	.word	0x0800ccd2

08008078 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008078:	4915      	ldr	r1, [pc, #84]	; (80080d0 <SystemInit+0x58>)
 800807a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800807e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <SystemInit+0x5c>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	f042 0201 	orr.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8008090:	6858      	ldr	r0, [r3, #4]
 8008092:	4a11      	ldr	r2, [pc, #68]	; (80080d8 <SystemInit+0x60>)
 8008094:	4002      	ands	r2, r0
 8008096:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800809e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80080a2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80080b2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80080b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b6:	f022 020f 	bic.w	r2, r2, #15
 80080ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80080bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080be:	4a07      	ldr	r2, [pc, #28]	; (80080dc <SystemInit+0x64>)
 80080c0:	4002      	ands	r2, r0
 80080c2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80080c4:	2200      	movs	r2, #0
 80080c6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80080c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080cc:	608b      	str	r3, [r1, #8]
 80080ce:	4770      	bx	lr
 80080d0:	e000ed00 	.word	0xe000ed00
 80080d4:	40021000 	.word	0x40021000
 80080d8:	f87fc00c 	.word	0xf87fc00c
 80080dc:	ff00fccc 	.word	0xff00fccc

080080e0 <HAL_RCC_OscConfig>:

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080e0:	6803      	ldr	r3, [r0, #0]
 80080e2:	07db      	lsls	r3, r3, #31
{
 80080e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080ea:	d470      	bmi.n	80081ce <HAL_RCC_OscConfig+0xee>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	079f      	lsls	r7, r3, #30
 80080f0:	f100 8133 	bmi.w	800835a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	0719      	lsls	r1, r3, #28
 80080f8:	f100 81c9 	bmi.w	800848e <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	075a      	lsls	r2, r3, #29
 8008100:	d55e      	bpl.n	80081c0 <HAL_RCC_OscConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8008102:	4dca      	ldr	r5, [pc, #808]	; (800842c <HAL_RCC_OscConfig+0x34c>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008104:	4eca      	ldr	r6, [pc, #808]	; (8008430 <HAL_RCC_OscConfig+0x350>)
    __PWR_CLK_ENABLE();
 8008106:	69eb      	ldr	r3, [r5, #28]
 8008108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810c:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800810e:	6833      	ldr	r3, [r6, #0]
 8008110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008114:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008116:	f000 fcbb 	bl	8008a90 <HAL_GetTick>
 800811a:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800811c:	6833      	ldr	r3, [r6, #0]
 800811e:	05db      	lsls	r3, r3, #23
 8008120:	f140 81fb 	bpl.w	800851a <HAL_RCC_OscConfig+0x43a>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8008124:	6a2b      	ldr	r3, [r5, #32]
 8008126:	f023 0305 	bic.w	r3, r3, #5
 800812a:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 800812c:	f000 fcb0 	bl	8008a90 <HAL_GetTick>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008130:	2602      	movs	r6, #2
 8008132:	4681      	mov	r9, r0
 8008134:	46b0      	mov	r8, r6
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008136:	2701      	movs	r7, #1
 8008138:	fa96 f3a6 	rbit	r3, r6
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800813c:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008140:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008144:	fab3 f383 	clz	r3, r3
 8008148:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800814c:	f043 0302 	orr.w	r3, r3, #2
 8008150:	2b02      	cmp	r3, #2
 8008152:	bf0c      	ite	eq
 8008154:	6a2a      	ldreq	r2, [r5, #32]
 8008156:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008158:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800815c:	fab3 f383 	clz	r3, r3
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	fa07 f303 	lsl.w	r3, r7, r3
 8008168:	4213      	tst	r3, r2
 800816a:	f040 81dd 	bne.w	8008528 <HAL_RCC_OscConfig+0x448>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800816e:	6a2b      	ldr	r3, [r5, #32]
 8008170:	68e6      	ldr	r6, [r4, #12]
 8008172:	f023 0305 	bic.w	r3, r3, #5
 8008176:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008178:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800817a:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800817c:	f040 81e8 	bne.w	8008550 <HAL_RCC_OscConfig+0x470>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8008180:	f000 fc86 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008184:	2702      	movs	r7, #2
 8008186:	4681      	mov	r9, r0
 8008188:	46b8      	mov	r8, r7
 800818a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800818e:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008192:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008196:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800819a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800819e:	f043 0302 	orr.w	r3, r3, #2
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	bf0c      	ite	eq
 80081a6:	6a2a      	ldreq	r2, [r5, #32]
 80081a8:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081aa:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80081ae:	fab3 f383 	clz	r3, r3
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	fa06 f303 	lsl.w	r3, r6, r3
 80081ba:	4213      	tst	r3, r2
 80081bc:	f000 81be 	beq.w	800853c <HAL_RCC_OscConfig+0x45c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081c0:	69e2      	ldr	r2, [r4, #28]
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	f040 81ee 	bne.w	80085a4 <HAL_RCC_OscConfig+0x4c4>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80081c8:	2000      	movs	r0, #0
 80081ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80081ce:	4d97      	ldr	r5, [pc, #604]	; (800842c <HAL_RCC_OscConfig+0x34c>)
 80081d0:	686b      	ldr	r3, [r5, #4]
 80081d2:	f003 030c 	and.w	r3, r3, #12
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d007      	beq.n	80081ea <HAL_RCC_OscConfig+0x10a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80081da:	686b      	ldr	r3, [r5, #4]
 80081dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d12a      	bne.n	800823a <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80081e4:	686b      	ldr	r3, [r5, #4]
 80081e6:	03de      	lsls	r6, r3, #15
 80081e8:	d527      	bpl.n	800823a <HAL_RCC_OscConfig+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081ee:	fa92 f3a2 	rbit	r3, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80081f2:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 80081f6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d115      	bne.n	800822e <HAL_RCC_OscConfig+0x14e>
 8008202:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008208:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800820c:	fab3 f383 	clz	r3, r3
 8008210:	2201      	movs	r2, #1
 8008212:	f003 031f 	and.w	r3, r3, #31
 8008216:	fa02 f303 	lsl.w	r3, r2, r3
 800821a:	420b      	tst	r3, r1
 800821c:	f43f af66 	beq.w	80080ec <HAL_RCC_OscConfig+0xc>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	4293      	cmp	r3, r2
 8008224:	f43f af62 	beq.w	80080ec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8008228:	2001      	movs	r0, #1
 800822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822e:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008232:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8008236:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008238:	e7e4      	b.n	8008204 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800823a:	4e7e      	ldr	r6, [pc, #504]	; (8008434 <HAL_RCC_OscConfig+0x354>)
 800823c:	2300      	movs	r3, #0
 800823e:	7033      	strb	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008240:	f000 fc26 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008244:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8008248:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800824a:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800824e:	f241 3a88 	movw	sl, #5000	; 0x1388
 8008252:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008256:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800825a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800825e:	f043 0301 	orr.w	r3, r3, #1
 8008262:	2b01      	cmp	r3, #1
 8008264:	d142      	bne.n	80082ec <HAL_RCC_OscConfig+0x20c>
 8008266:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008268:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800826c:	fab3 f383 	clz	r3, r3
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	fa08 f303 	lsl.w	r3, r8, r3
 8008278:	4213      	tst	r3, r2
 800827a:	d12e      	bne.n	80082da <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800827c:	7923      	ldrb	r3, [r4, #4]
 800827e:	7033      	strb	r3, [r6, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008280:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008282:	68a2      	ldr	r2, [r4, #8]
 8008284:	f023 030f 	bic.w	r3, r3, #15
 8008288:	4313      	orrs	r3, r2
 800828a:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 800828c:	6866      	ldr	r6, [r4, #4]
 800828e:	2e01      	cmp	r6, #1
 8008290:	d138      	bne.n	8008304 <HAL_RCC_OscConfig+0x224>
        tickstart = HAL_GetTick();
 8008292:	f000 fbfd 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008296:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 800829a:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800829c:	f241 3988 	movw	r9, #5000	; 0x1388
 80082a0:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80082a4:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082a8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d121      	bne.n	80082f8 <HAL_RCC_OscConfig+0x218>
 80082b4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80082ba:	fab3 f383 	clz	r3, r3
 80082be:	f003 031f 	and.w	r3, r3, #31
 80082c2:	fa06 f303 	lsl.w	r3, r6, r3
 80082c6:	4213      	tst	r3, r2
 80082c8:	f47f af10 	bne.w	80080ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80082cc:	f000 fbe0 	bl	8008a90 <HAL_GetTick>
 80082d0:	eba0 0008 	sub.w	r0, r0, r8
 80082d4:	4548      	cmp	r0, r9
 80082d6:	d9e3      	bls.n	80082a0 <HAL_RCC_OscConfig+0x1c0>
 80082d8:	e005      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80082da:	f000 fbd9 	bl	8008a90 <HAL_GetTick>
 80082de:	eba0 0009 	sub.w	r0, r0, r9
 80082e2:	4550      	cmp	r0, sl
 80082e4:	d9b5      	bls.n	8008252 <HAL_RCC_OscConfig+0x172>
          return HAL_TIMEOUT;
 80082e6:	2003      	movs	r0, #3
 80082e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ec:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80082f0:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80082f6:	e7b7      	b.n	8008268 <HAL_RCC_OscConfig+0x188>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f8:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80082fc:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008300:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008302:	e7d8      	b.n	80082b6 <HAL_RCC_OscConfig+0x1d6>
        tickstart = HAL_GetTick();
 8008304:	f000 fbc4 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008308:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800830c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800830e:	2701      	movs	r7, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008310:	f241 3988 	movw	r9, #5000	; 0x1388
 8008314:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008318:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800831c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	2b01      	cmp	r3, #1
 8008326:	d112      	bne.n	800834e <HAL_RCC_OscConfig+0x26e>
 8008328:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832a:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800832e:	fab3 f383 	clz	r3, r3
 8008332:	f003 031f 	and.w	r3, r3, #31
 8008336:	fa07 f303 	lsl.w	r3, r7, r3
 800833a:	4213      	tst	r3, r2
 800833c:	f43f aed6 	beq.w	80080ec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008340:	f000 fba6 	bl	8008a90 <HAL_GetTick>
 8008344:	eba0 0008 	sub.w	r0, r0, r8
 8008348:	4548      	cmp	r0, r9
 800834a:	d9e3      	bls.n	8008314 <HAL_RCC_OscConfig+0x234>
 800834c:	e7cb      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008352:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008356:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008358:	e7e7      	b.n	800832a <HAL_RCC_OscConfig+0x24a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800835a:	4d34      	ldr	r5, [pc, #208]	; (800842c <HAL_RCC_OscConfig+0x34c>)
 800835c:	686b      	ldr	r3, [r5, #4]
 800835e:	f013 0f0c 	tst.w	r3, #12
 8008362:	d007      	beq.n	8008374 <HAL_RCC_OscConfig+0x294>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008364:	686b      	ldr	r3, [r5, #4]
 8008366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800836a:	2b08      	cmp	r3, #8
 800836c:	d133      	bne.n	80083d6 <HAL_RCC_OscConfig+0x2f6>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800836e:	686b      	ldr	r3, [r5, #4]
 8008370:	03d8      	lsls	r0, r3, #15
 8008372:	d430      	bmi.n	80083d6 <HAL_RCC_OscConfig+0x2f6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008374:	2202      	movs	r2, #2
 8008376:	fa92 f3a2 	rbit	r3, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800837a:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800837e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	2b01      	cmp	r3, #1
 8008388:	d11f      	bne.n	80083ca <HAL_RCC_OscConfig+0x2ea>
 800838a:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838c:	2302      	movs	r3, #2
 800838e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008392:	fab3 f383 	clz	r3, r3
 8008396:	2201      	movs	r2, #1
 8008398:	f003 031f 	and.w	r3, r3, #31
 800839c:	fa02 f303 	lsl.w	r3, r2, r3
 80083a0:	420b      	tst	r3, r1
 80083a2:	d003      	beq.n	80083ac <HAL_RCC_OscConfig+0x2cc>
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	4293      	cmp	r3, r2
 80083a8:	f47f af3e 	bne.w	8008228 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ac:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ae:	23f8      	movs	r3, #248	; 0xf8
 80083b0:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80083b4:	fab3 f383 	clz	r3, r3
 80083b8:	6961      	ldr	r1, [r4, #20]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	fa01 f303 	lsl.w	r3, r1, r3
 80083c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80083c4:	4313      	orrs	r3, r2
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	e694      	b.n	80080f4 <HAL_RCC_OscConfig+0x14>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ca:	fa92 f2a2 	rbit	r2, r2
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80083ce:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80083d4:	e7da      	b.n	800838c <HAL_RCC_OscConfig+0x2ac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083d6:	6922      	ldr	r2, [r4, #16]
 80083d8:	4b17      	ldr	r3, [pc, #92]	; (8008438 <HAL_RCC_OscConfig+0x358>)
 80083da:	b37a      	cbz	r2, 800843c <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_HSI_ENABLE();
 80083dc:	2601      	movs	r6, #1
 80083de:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80083e0:	f000 fb56 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	2702      	movs	r7, #2
 80083e6:	4680      	mov	r8, r0
 80083e8:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80083ec:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80083f4:	f043 0301 	orr.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d111      	bne.n	8008420 <HAL_RCC_OscConfig+0x340>
 80083fc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083fe:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008402:	fab3 f383 	clz	r3, r3
 8008406:	f003 031f 	and.w	r3, r3, #31
 800840a:	fa06 f303 	lsl.w	r3, r6, r3
 800840e:	4213      	tst	r3, r2
 8008410:	d1cc      	bne.n	80083ac <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008412:	f000 fb3d 	bl	8008a90 <HAL_GetTick>
 8008416:	eba0 0008 	sub.w	r0, r0, r8
 800841a:	2864      	cmp	r0, #100	; 0x64
 800841c:	d9e4      	bls.n	80083e8 <HAL_RCC_OscConfig+0x308>
 800841e:	e762      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008420:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008424:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008428:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800842a:	e7e8      	b.n	80083fe <HAL_RCC_OscConfig+0x31e>
 800842c:	40021000 	.word	0x40021000
 8008430:	40007000 	.word	0x40007000
 8008434:	40021002 	.word	0x40021002
 8008438:	42420000 	.word	0x42420000
        __HAL_RCC_HSI_DISABLE();
 800843c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800843e:	f000 fb27 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008442:	2602      	movs	r6, #2
 8008444:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008446:	2701      	movs	r7, #1
 8008448:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800844c:	fab3 f383 	clz	r3, r3
 8008450:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	2b01      	cmp	r3, #1
 800845a:	d112      	bne.n	8008482 <HAL_RCC_OscConfig+0x3a2>
 800845c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845e:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008462:	fab3 f383 	clz	r3, r3
 8008466:	f003 031f 	and.w	r3, r3, #31
 800846a:	fa07 f303 	lsl.w	r3, r7, r3
 800846e:	4213      	tst	r3, r2
 8008470:	f43f ae40 	beq.w	80080f4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8008474:	f000 fb0c 	bl	8008a90 <HAL_GetTick>
 8008478:	eba0 0008 	sub.w	r0, r0, r8
 800847c:	2864      	cmp	r0, #100	; 0x64
 800847e:	d9e3      	bls.n	8008448 <HAL_RCC_OscConfig+0x368>
 8008480:	e731      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008482:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008486:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800848a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800848c:	e7e7      	b.n	800845e <HAL_RCC_OscConfig+0x37e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800848e:	69a2      	ldr	r2, [r4, #24]
 8008490:	4d8c      	ldr	r5, [pc, #560]	; (80086c4 <HAL_RCC_OscConfig+0x5e4>)
 8008492:	4b8d      	ldr	r3, [pc, #564]	; (80086c8 <HAL_RCC_OscConfig+0x5e8>)
 8008494:	b302      	cbz	r2, 80084d8 <HAL_RCC_OscConfig+0x3f8>
      __HAL_RCC_LSI_ENABLE();
 8008496:	2601      	movs	r6, #1
 8008498:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 800849a:	f000 faf9 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800849e:	2702      	movs	r7, #2
 80084a0:	4680      	mov	r8, r0
 80084a2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80084a6:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084aa:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80084ae:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b4:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80084b8:	fab3 f383 	clz	r3, r3
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	fa06 f303 	lsl.w	r3, r6, r3
 80084c4:	4213      	tst	r3, r2
 80084c6:	f47f ae19 	bne.w	80080fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80084ca:	f000 fae1 	bl	8008a90 <HAL_GetTick>
 80084ce:	eba0 0008 	sub.w	r0, r0, r8
 80084d2:	2864      	cmp	r0, #100	; 0x64
 80084d4:	d9e5      	bls.n	80084a2 <HAL_RCC_OscConfig+0x3c2>
 80084d6:	e706      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_LSI_DISABLE();
 80084d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80084da:	f000 fad9 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084de:	2602      	movs	r6, #2
 80084e0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084e2:	2701      	movs	r7, #1
 80084e4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80084e8:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ec:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80084f0:	fab3 f383 	clz	r3, r3
 80084f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084f6:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80084fa:	fab3 f383 	clz	r3, r3
 80084fe:	f003 031f 	and.w	r3, r3, #31
 8008502:	fa07 f303 	lsl.w	r3, r7, r3
 8008506:	4213      	tst	r3, r2
 8008508:	f43f adf8 	beq.w	80080fc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 800850c:	f000 fac0 	bl	8008a90 <HAL_GetTick>
 8008510:	eba0 0008 	sub.w	r0, r0, r8
 8008514:	2864      	cmp	r0, #100	; 0x64
 8008516:	d9e5      	bls.n	80084e4 <HAL_RCC_OscConfig+0x404>
 8008518:	e6e5      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 800851a:	f000 fab9 	bl	8008a90 <HAL_GetTick>
 800851e:	1bc0      	subs	r0, r0, r7
 8008520:	2864      	cmp	r0, #100	; 0x64
 8008522:	f67f adfb 	bls.w	800811c <HAL_RCC_OscConfig+0x3c>
 8008526:	e6de      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008528:	f000 fab2 	bl	8008a90 <HAL_GetTick>
 800852c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008530:	eba0 0009 	sub.w	r0, r0, r9
 8008534:	4298      	cmp	r0, r3
 8008536:	f67f adff 	bls.w	8008138 <HAL_RCC_OscConfig+0x58>
 800853a:	e6d4      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 800853c:	f000 faa8 	bl	8008a90 <HAL_GetTick>
 8008540:	f241 3388 	movw	r3, #5000	; 0x1388
 8008544:	eba0 0009 	sub.w	r0, r0, r9
 8008548:	4298      	cmp	r0, r3
 800854a:	f67f ae1e 	bls.w	800818a <HAL_RCC_OscConfig+0xaa>
 800854e:	e6ca      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
      tickstart = HAL_GetTick();
 8008550:	f000 fa9e 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008554:	2602      	movs	r6, #2
 8008556:	4681      	mov	r9, r0
 8008558:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800855a:	2701      	movs	r7, #1
 800855c:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008560:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008564:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008568:	fab3 f383 	clz	r3, r3
 800856c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008570:	f043 0302 	orr.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	bf0c      	ite	eq
 8008578:	6a2a      	ldreq	r2, [r5, #32]
 800857a:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800857c:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008580:	fab3 f383 	clz	r3, r3
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	fa07 f303 	lsl.w	r3, r7, r3
 800858c:	4213      	tst	r3, r2
 800858e:	f43f ae17 	beq.w	80081c0 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8008592:	f000 fa7d 	bl	8008a90 <HAL_GetTick>
 8008596:	f241 3388 	movw	r3, #5000	; 0x1388
 800859a:	eba0 0009 	sub.w	r0, r0, r9
 800859e:	4298      	cmp	r0, r3
 80085a0:	d9dc      	bls.n	800855c <HAL_RCC_OscConfig+0x47c>
 80085a2:	e6a0      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80085a4:	4d47      	ldr	r5, [pc, #284]	; (80086c4 <HAL_RCC_OscConfig+0x5e4>)
 80085a6:	686b      	ldr	r3, [r5, #4]
 80085a8:	f003 030c 	and.w	r3, r3, #12
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	f43f ae3b 	beq.w	8008228 <HAL_RCC_OscConfig+0x148>
 80085b2:	4e46      	ldr	r6, [pc, #280]	; (80086cc <HAL_RCC_OscConfig+0x5ec>)
 80085b4:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085b6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80085b8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085ba:	d15a      	bne.n	8008672 <HAL_RCC_OscConfig+0x592>
        tickstart = HAL_GetTick();
 80085bc:	f000 fa68 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80085c4:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085c6:	f04f 0801 	mov.w	r8, #1
 80085ca:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80085ce:	fab3 f383 	clz	r3, r3
 80085d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d13d      	bne.n	800865a <HAL_RCC_OscConfig+0x57a>
 80085de:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80085e4:	fab3 f383 	clz	r3, r3
 80085e8:	f003 031f 	and.w	r3, r3, #31
 80085ec:	fa08 f303 	lsl.w	r3, r8, r3
 80085f0:	4213      	tst	r3, r2
 80085f2:	d12b      	bne.n	800864c <HAL_RCC_OscConfig+0x56c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f6:	6a21      	ldr	r1, [r4, #32]
 80085f8:	686a      	ldr	r2, [r5, #4]
 80085fa:	430b      	orrs	r3, r1
 80085fc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008600:	4313      	orrs	r3, r2
 8008602:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008604:	f8c6 8000 	str.w	r8, [r6]
        tickstart = HAL_GetTick();
 8008608:	f000 fa42 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800860c:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8008610:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008612:	2601      	movs	r6, #1
 8008614:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008618:	fab3 f383 	clz	r3, r3
 800861c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	2b01      	cmp	r3, #1
 8008626:	d11e      	bne.n	8008666 <HAL_RCC_OscConfig+0x586>
 8008628:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800862a:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800862e:	fab3 f383 	clz	r3, r3
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	fa06 f303 	lsl.w	r3, r6, r3
 800863a:	4213      	tst	r3, r2
 800863c:	f47f adc4 	bne.w	80081c8 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8008640:	f000 fa26 	bl	8008a90 <HAL_GetTick>
 8008644:	1bc0      	subs	r0, r0, r7
 8008646:	2864      	cmp	r0, #100	; 0x64
 8008648:	d9e4      	bls.n	8008614 <HAL_RCC_OscConfig+0x534>
 800864a:	e64c      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800864c:	f000 fa20 	bl	8008a90 <HAL_GetTick>
 8008650:	eba0 0009 	sub.w	r0, r0, r9
 8008654:	2864      	cmp	r0, #100	; 0x64
 8008656:	d9b8      	bls.n	80085ca <HAL_RCC_OscConfig+0x4ea>
 8008658:	e645      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800865a:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800865e:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008662:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008664:	e7bc      	b.n	80085e0 <HAL_RCC_OscConfig+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008666:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800866a:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800866e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008670:	e7db      	b.n	800862a <HAL_RCC_OscConfig+0x54a>
        tickstart = HAL_GetTick();
 8008672:	f000 fa0d 	bl	8008a90 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008676:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800867a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800867c:	2601      	movs	r6, #1
 800867e:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008682:	fab3 f383 	clz	r3, r3
 8008686:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	2b01      	cmp	r3, #1
 8008690:	d111      	bne.n	80086b6 <HAL_RCC_OscConfig+0x5d6>
 8008692:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008694:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008698:	fab3 f383 	clz	r3, r3
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	fa06 f303 	lsl.w	r3, r6, r3
 80086a4:	4213      	tst	r3, r2
 80086a6:	f43f ad8f 	beq.w	80081c8 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80086aa:	f000 f9f1 	bl	8008a90 <HAL_GetTick>
 80086ae:	1bc0      	subs	r0, r0, r7
 80086b0:	2864      	cmp	r0, #100	; 0x64
 80086b2:	d9e4      	bls.n	800867e <HAL_RCC_OscConfig+0x59e>
 80086b4:	e617      	b.n	80082e6 <HAL_RCC_OscConfig+0x206>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b6:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80086ba:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80086c0:	e7e8      	b.n	8008694 <HAL_RCC_OscConfig+0x5b4>
 80086c2:	bf00      	nop
 80086c4:	40021000 	.word	0x40021000
 80086c8:	42420480 	.word	0x42420480
 80086cc:	42420060 	.word	0x42420060

080086d0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80086d0:	4aad      	ldr	r2, [pc, #692]	; (8008988 <HAL_RCC_ClockConfig+0x2b8>)
 80086d2:	6813      	ldr	r3, [r2, #0]
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	428b      	cmp	r3, r1
{
 80086da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	4604      	mov	r4, r0
 80086e0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80086e2:	f080 80af 	bcs.w	8008844 <HAL_RCC_ClockConfig+0x174>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086e6:	6813      	ldr	r3, [r2, #0]
 80086e8:	f023 0307 	bic.w	r3, r3, #7
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80086f0:	6813      	ldr	r3, [r2, #0]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	4299      	cmp	r1, r3
 80086f8:	d002      	beq.n	8008700 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 80086fa:	2001      	movs	r0, #1
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008700:	6802      	ldr	r2, [r0, #0]
 8008702:	0796      	lsls	r6, r2, #30
 8008704:	d506      	bpl.n	8008714 <HAL_RCC_ClockConfig+0x44>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008706:	49a1      	ldr	r1, [pc, #644]	; (800898c <HAL_RCC_ClockConfig+0x2bc>)
 8008708:	6880      	ldr	r0, [r0, #8]
 800870a:	684b      	ldr	r3, [r1, #4]
 800870c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008710:	4303      	orrs	r3, r0
 8008712:	604b      	str	r3, [r1, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008714:	07d5      	lsls	r5, r2, #31
 8008716:	d413      	bmi.n	8008740 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	0750      	lsls	r0, r2, #29
 800871c:	f100 812c 	bmi.w	8008978 <HAL_RCC_ClockConfig+0x2a8>
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008720:	0713      	lsls	r3, r2, #28
 8008722:	d507      	bpl.n	8008734 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008724:	4a99      	ldr	r2, [pc, #612]	; (800898c <HAL_RCC_ClockConfig+0x2bc>)
 8008726:	6921      	ldr	r1, [r4, #16]
 8008728:	6853      	ldr	r3, [r2, #4]
 800872a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800872e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008732:	6053      	str	r3, [r2, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008734:	200f      	movs	r0, #15
 8008736:	f000 f97e 	bl	8008a36 <HAL_InitTick>

  return HAL_OK;
 800873a:	2000      	movs	r0, #0
}
 800873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008740:	6862      	ldr	r2, [r4, #4]
 8008742:	4d92      	ldr	r5, [pc, #584]	; (800898c <HAL_RCC_ClockConfig+0x2bc>)
 8008744:	2a01      	cmp	r2, #1
 8008746:	d139      	bne.n	80087bc <HAL_RCC_ClockConfig+0xec>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008748:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800874c:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008750:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008754:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	2b01      	cmp	r3, #1
 800875e:	d127      	bne.n	80087b0 <HAL_RCC_ClockConfig+0xe0>
 8008760:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008762:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008766:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800876a:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800876e:	2101      	movs	r1, #1
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	fa01 f303 	lsl.w	r3, r1, r3
 8008778:	4203      	tst	r3, r0
 800877a:	d0be      	beq.n	80086fa <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800877c:	686b      	ldr	r3, [r5, #4]
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	431a      	orrs	r2, r3
 8008784:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8008786:	f000 f983 	bl	8008a90 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800878a:	6863      	ldr	r3, [r4, #4]
 800878c:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 800878e:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008790:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008794:	d13e      	bne.n	8008814 <HAL_RCC_ClockConfig+0x144>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008796:	686b      	ldr	r3, [r5, #4]
 8008798:	f003 030c 	and.w	r3, r3, #12
 800879c:	2b04      	cmp	r3, #4
 800879e:	d0bb      	beq.n	8008718 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087a0:	f000 f976 	bl	8008a90 <HAL_GetTick>
 80087a4:	1b80      	subs	r0, r0, r6
 80087a6:	42b8      	cmp	r0, r7
 80087a8:	d9f5      	bls.n	8008796 <HAL_RCC_ClockConfig+0xc6>
            return HAL_TIMEOUT;
 80087aa:	2003      	movs	r0, #3
 80087ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b0:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087b4:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80087ba:	e7d2      	b.n	8008762 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087bc:	2a02      	cmp	r2, #2
 80087be:	d115      	bne.n	80087ec <HAL_RCC_ClockConfig+0x11c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80087c4:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087c8:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087cc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d103      	bne.n	80087e0 <HAL_RCC_ClockConfig+0x110>
 80087d8:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087de:	e7c2      	b.n	8008766 <HAL_RCC_ClockConfig+0x96>
 80087e0:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087e4:	fab1 f181 	clz	r1, r1
 80087e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80087ea:	e7f6      	b.n	80087da <HAL_RCC_ClockConfig+0x10a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ec:	2102      	movs	r1, #2
 80087ee:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80087f2:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087f6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d102      	bne.n	8008808 <HAL_RCC_ClockConfig+0x138>
 8008802:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008804:	2302      	movs	r3, #2
 8008806:	e7ae      	b.n	8008766 <HAL_RCC_ClockConfig+0x96>
 8008808:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800880c:	fab1 f181 	clz	r1, r1
 8008810:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008812:	e7f7      	b.n	8008804 <HAL_RCC_ClockConfig+0x134>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008814:	2b02      	cmp	r3, #2
 8008816:	d110      	bne.n	800883a <HAL_RCC_ClockConfig+0x16a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008818:	686b      	ldr	r3, [r5, #4]
 800881a:	f003 030c 	and.w	r3, r3, #12
 800881e:	2b08      	cmp	r3, #8
 8008820:	f43f af7a 	beq.w	8008718 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008824:	f000 f934 	bl	8008a90 <HAL_GetTick>
 8008828:	1b80      	subs	r0, r0, r6
 800882a:	42b8      	cmp	r0, r7
 800882c:	d9f4      	bls.n	8008818 <HAL_RCC_ClockConfig+0x148>
 800882e:	e7bc      	b.n	80087aa <HAL_RCC_ClockConfig+0xda>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008830:	f000 f92e 	bl	8008a90 <HAL_GetTick>
 8008834:	1b80      	subs	r0, r0, r6
 8008836:	42b8      	cmp	r0, r7
 8008838:	d8b7      	bhi.n	80087aa <HAL_RCC_ClockConfig+0xda>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800883a:	686b      	ldr	r3, [r5, #4]
 800883c:	f013 0f0c 	tst.w	r3, #12
 8008840:	d1f6      	bne.n	8008830 <HAL_RCC_ClockConfig+0x160>
 8008842:	e769      	b.n	8008718 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008844:	6802      	ldr	r2, [r0, #0]
 8008846:	0791      	lsls	r1, r2, #30
 8008848:	d506      	bpl.n	8008858 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800884a:	4950      	ldr	r1, [pc, #320]	; (800898c <HAL_RCC_ClockConfig+0x2bc>)
 800884c:	6880      	ldr	r0, [r0, #8]
 800884e:	684b      	ldr	r3, [r1, #4]
 8008850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008854:	4303      	orrs	r3, r0
 8008856:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008858:	07d2      	lsls	r2, r2, #31
 800885a:	d40c      	bmi.n	8008876 <HAL_RCC_ClockConfig+0x1a6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885c:	4a4a      	ldr	r2, [pc, #296]	; (8008988 <HAL_RCC_ClockConfig+0x2b8>)
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	f023 0307 	bic.w	r3, r3, #7
 8008864:	4333      	orrs	r3, r6
 8008866:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008868:	6813      	ldr	r3, [r2, #0]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	429e      	cmp	r6, r3
 8008870:	f47f af43 	bne.w	80086fa <HAL_RCC_ClockConfig+0x2a>
 8008874:	e750      	b.n	8008718 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008876:	6862      	ldr	r2, [r4, #4]
 8008878:	4d44      	ldr	r5, [pc, #272]	; (800898c <HAL_RCC_ClockConfig+0x2bc>)
 800887a:	2a01      	cmp	r2, #1
 800887c:	d138      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x220>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800887e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008882:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008886:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800888a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	2b01      	cmp	r3, #1
 8008894:	d126      	bne.n	80088e4 <HAL_RCC_ClockConfig+0x214>
 8008896:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800889c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088a0:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088a4:	2101      	movs	r1, #1
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	fa01 f303 	lsl.w	r3, r1, r3
 80088ae:	4203      	tst	r3, r0
 80088b0:	f43f af23 	beq.w	80086fa <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088b4:	686b      	ldr	r3, [r5, #4]
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	431a      	orrs	r2, r3
 80088bc:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 80088be:	f000 f8e7 	bl	8008a90 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 80088c6:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c8:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088cc:	d13c      	bne.n	8008948 <HAL_RCC_ClockConfig+0x278>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80088ce:	686b      	ldr	r3, [r5, #4]
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d0c1      	beq.n	800885c <HAL_RCC_ClockConfig+0x18c>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088d8:	f000 f8da 	bl	8008a90 <HAL_GetTick>
 80088dc:	1bc0      	subs	r0, r0, r7
 80088de:	4540      	cmp	r0, r8
 80088e0:	d9f5      	bls.n	80088ce <HAL_RCC_ClockConfig+0x1fe>
 80088e2:	e762      	b.n	80087aa <HAL_RCC_ClockConfig+0xda>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e4:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088e8:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80088ee:	e7d3      	b.n	8008898 <HAL_RCC_ClockConfig+0x1c8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088f0:	2a02      	cmp	r2, #2
 80088f2:	d115      	bne.n	8008920 <HAL_RCC_ClockConfig+0x250>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80088f8:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80088fc:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008900:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008904:	f043 0301 	orr.w	r3, r3, #1
 8008908:	2b01      	cmp	r3, #1
 800890a:	d103      	bne.n	8008914 <HAL_RCC_ClockConfig+0x244>
 800890c:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008912:	e7c3      	b.n	800889c <HAL_RCC_ClockConfig+0x1cc>
 8008914:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008918:	fab1 f181 	clz	r1, r1
 800891c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800891e:	e7f6      	b.n	800890e <HAL_RCC_ClockConfig+0x23e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008920:	2102      	movs	r1, #2
 8008922:	fa91 f3a1 	rbit	r3, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008926:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800892e:	f043 0301 	orr.w	r3, r3, #1
 8008932:	2b01      	cmp	r3, #1
 8008934:	d102      	bne.n	800893c <HAL_RCC_ClockConfig+0x26c>
 8008936:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008938:	2302      	movs	r3, #2
 800893a:	e7af      	b.n	800889c <HAL_RCC_ClockConfig+0x1cc>
 800893c:	fa91 f1a1 	rbit	r1, r1
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008940:	fab1 f181 	clz	r1, r1
 8008944:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008946:	e7f7      	b.n	8008938 <HAL_RCC_ClockConfig+0x268>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008948:	2b02      	cmp	r3, #2
 800894a:	d110      	bne.n	800896e <HAL_RCC_ClockConfig+0x29e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800894c:	686b      	ldr	r3, [r5, #4]
 800894e:	f003 030c 	and.w	r3, r3, #12
 8008952:	2b08      	cmp	r3, #8
 8008954:	d082      	beq.n	800885c <HAL_RCC_ClockConfig+0x18c>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008956:	f000 f89b 	bl	8008a90 <HAL_GetTick>
 800895a:	1bc0      	subs	r0, r0, r7
 800895c:	4540      	cmp	r0, r8
 800895e:	d9f5      	bls.n	800894c <HAL_RCC_ClockConfig+0x27c>
 8008960:	e723      	b.n	80087aa <HAL_RCC_ClockConfig+0xda>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008962:	f000 f895 	bl	8008a90 <HAL_GetTick>
 8008966:	1bc0      	subs	r0, r0, r7
 8008968:	4540      	cmp	r0, r8
 800896a:	f63f af1e 	bhi.w	80087aa <HAL_RCC_ClockConfig+0xda>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800896e:	686b      	ldr	r3, [r5, #4]
 8008970:	f013 0f0c 	tst.w	r3, #12
 8008974:	d1f5      	bne.n	8008962 <HAL_RCC_ClockConfig+0x292>
 8008976:	e771      	b.n	800885c <HAL_RCC_ClockConfig+0x18c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008978:	4904      	ldr	r1, [pc, #16]	; (800898c <HAL_RCC_ClockConfig+0x2bc>)
 800897a:	68e0      	ldr	r0, [r4, #12]
 800897c:	684b      	ldr	r3, [r1, #4]
 800897e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008982:	4303      	orrs	r3, r0
 8008984:	604b      	str	r3, [r1, #4]
 8008986:	e6cb      	b.n	8008720 <HAL_RCC_ClockConfig+0x50>
 8008988:	40022000 	.word	0x40022000
 800898c:	40021000 	.word	0x40021000

08008990 <HAL_RCC_GetSysClockFreq>:
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008990:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8008992:	4c15      	ldr	r4, [pc, #84]	; (80089e8 <HAL_RCC_GetSysClockFreq+0x58>)
 8008994:	6861      	ldr	r1, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008996:	f001 030c 	and.w	r3, r1, #12
 800899a:	2b08      	cmp	r3, #8
 800899c:	d121      	bne.n	80089e2 <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80089a2:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089a6:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80089aa:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	fa22 f303 	lsr.w	r3, r2, r3
 80089b4:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <HAL_RCC_GetSysClockFreq+0x5c>)
 80089b6:	5cd0      	ldrb	r0, [r2, r3]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80089b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ba:	230f      	movs	r3, #15
 80089bc:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80089c0:	fab3 f383 	clz	r3, r3
 80089c4:	f002 020f 	and.w	r2, r2, #15
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	fa22 f303 	lsr.w	r3, r2, r3
 80089ce:	4a08      	ldr	r2, [pc, #32]	; (80089f0 <HAL_RCC_GetSysClockFreq+0x60>)
 80089d0:	5cd2      	ldrb	r2, [r2, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80089d2:	03cb      	lsls	r3, r1, #15
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 80089d4:	bf4a      	itet	mi
 80089d6:	4b07      	ldrmi	r3, [pc, #28]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 80089d8:	4b07      	ldrpl	r3, [pc, #28]	; (80089f8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 80089da:	fbb3 f3f2 	udivmi	r3, r3, r2
      pllclk = (HSI_VALUE >> 1) * pllmul;
 80089de:	4358      	muls	r0, r3
 80089e0:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 80089e2:	4804      	ldr	r0, [pc, #16]	; (80089f4 <HAL_RCC_GetSysClockFreq+0x64>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	bf00      	nop
 80089e8:	40021000 	.word	0x40021000
 80089ec:	0801b488 	.word	0x0801b488
 80089f0:	0801b498 	.word	0x0801b498
 80089f4:	007a1200 	.word	0x007a1200
 80089f8:	003d0900 	.word	0x003d0900

080089fc <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089fc:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80089fe:	f7ff ffc7 	bl	8008990 <HAL_RCC_GetSysClockFreq>
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008a04:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a06:	23f0      	movs	r3, #240	; 0xf0
 8008a08:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008a0c:	fab3 f383 	clz	r3, r3
 8008a10:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	4a04      	ldr	r2, [pc, #16]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x30>)
 8008a1c:	5cd3      	ldrb	r3, [r2, r3]
 8008a1e:	40d8      	lsrs	r0, r3
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x34>)
 8008a22:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8008a24:	bd08      	pop	{r3, pc}
 8008a26:	bf00      	nop
 8008a28:	40021000 	.word	0x40021000
 8008a2c:	0801b478 	.word	0x0801b478
 8008a30:	200008d8 	.word	0x200008d8

08008a34 <HAL_MspInit>:
 8008a34:	4770      	bx	lr

08008a36 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 8008a36:	b510      	push	{r4, lr}
 8008a38:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008a3a:	f7ff ffdf 	bl	80089fc <HAL_RCC_GetHCLKFreq>
 8008a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a42:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a46:	f000 f889 	bl	8008b5c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a52:	f000 f843 	bl	8008adc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8008a56:	2000      	movs	r0, #0
 8008a58:	bd10      	pop	{r4, pc}
	...

08008a5c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a5c:	4a07      	ldr	r2, [pc, #28]	; (8008a7c <HAL_Init+0x20>)
{
 8008a5e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a60:	6813      	ldr	r3, [r2, #0]
 8008a62:	f043 0310 	orr.w	r3, r3, #16
 8008a66:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a68:	2003      	movs	r0, #3
 8008a6a:	f000 f825 	bl	8008ab8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a6e:	200f      	movs	r0, #15
 8008a70:	f7ff ffe1 	bl	8008a36 <HAL_InitTick>
  HAL_MspInit();
 8008a74:	f7ff ffde 	bl	8008a34 <HAL_MspInit>
}
 8008a78:	2000      	movs	r0, #0
 8008a7a:	bd08      	pop	{r3, pc}
 8008a7c:	40022000 	.word	0x40022000

08008a80 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008a80:	4a02      	ldr	r2, [pc, #8]	; (8008a8c <HAL_IncTick+0xc>)
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20000c58 	.word	0x20000c58

08008a90 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <HAL_GetTick+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000c58 	.word	0x20000c58

08008a9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8008a9c:	b513      	push	{r0, r1, r4, lr}
 8008a9e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8008aa0:	f7ff fff6 	bl	8008a90 <HAL_GetTick>
 8008aa4:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8008aa6:	f7ff fff3 	bl	8008a90 <HAL_GetTick>
 8008aaa:	9b01      	ldr	r3, [sp, #4]
 8008aac:	1b00      	subs	r0, r0, r4
 8008aae:	4298      	cmp	r0, r3
 8008ab0:	d3f9      	bcc.n	8008aa6 <HAL_Delay+0xa>
  {
  }
}
 8008ab2:	b002      	add	sp, #8
 8008ab4:	bd10      	pop	{r4, pc}
	...

08008ab8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ab8:	4a07      	ldr	r2, [pc, #28]	; (8008ad8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008aba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8008abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8008ac8:	0200      	lsls	r0, r0, #8
 8008aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ace:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                 |
 8008ad2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008ad4:	60d3      	str	r3, [r2, #12]
 8008ad6:	4770      	bx	lr
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8008adc:	4b17      	ldr	r3, [pc, #92]	; (8008b3c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ade:	b530      	push	{r4, r5, lr}
 8008ae0:	68dc      	ldr	r4, [r3, #12]
 8008ae2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8008ae6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8008aea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	bf28      	it	cs
 8008af0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8008af2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8008af4:	f04f 0501 	mov.w	r5, #1
 8008af8:	fa05 f303 	lsl.w	r3, r5, r3
 8008afc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8008b00:	bf8c      	ite	hi
 8008b02:	3c03      	subhi	r4, #3
 8008b04:	2400      	movls	r4, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8008b06:	4019      	ands	r1, r3
 8008b08:	40a1      	lsls	r1, r4
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8008b0a:	fa05 f404 	lsl.w	r4, r5, r4
 8008b0e:	3c01      	subs	r4, #1
 8008b10:	4022      	ands	r2, r4
  if(IRQn < 0) {
 8008b12:	2800      	cmp	r0, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8008b14:	ea42 0201 	orr.w	r2, r2, r1
 8008b18:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008b1c:	bfaf      	iteee	ge
 8008b1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8008b22:	f000 000f 	andlt.w	r0, r0, #15
 8008b26:	4b06      	ldrlt	r3, [pc, #24]	; (8008b40 <HAL_NVIC_SetPriority+0x64>)
 8008b28:	b2d2      	uxtblt	r2, r2
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008b2a:	bfa5      	ittet	ge
 8008b2c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8008b30:	b2d2      	uxtbge	r2, r2
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8008b32:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8008b34:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8008b38:	bd30      	pop	{r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	e000ed00 	.word	0xe000ed00
 8008b40:	e000ed14 	.word	0xe000ed14

08008b44 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8008b44:	0942      	lsrs	r2, r0, #5
 8008b46:	2301      	movs	r3, #1
 8008b48:	f000 001f 	and.w	r0, r0, #31
 8008b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8008b50:	4b01      	ldr	r3, [pc, #4]	; (8008b58 <HAL_NVIC_EnableIRQ+0x14>)
 8008b52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008b56:	4770      	bx	lr
 8008b58:	e000e100 	.word	0xe000e100

08008b5c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8008b5c:	3801      	subs	r0, #1
 8008b5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008b62:	d20a      	bcs.n	8008b7a <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8008b64:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8008b66:	4a07      	ldr	r2, [pc, #28]	; (8008b84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8008b68:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8008b6a:	21f0      	movs	r1, #240	; 0xf0
 8008b6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8008b70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b72:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8008b74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8008b7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	e000e010 	.word	0xe000e010
 8008b84:	e000ed00 	.word	0xe000ed00

08008b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8008b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b8c:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8008b8e:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8008d20 <HAL_GPIO_Init+0x198>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b92:	4a61      	ldr	r2, [pc, #388]	; (8008d18 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b94:	9301      	str	r3, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8008b96:	f04f 0901 	mov.w	r9, #1
  for (position = 0; position < GPIO_NUMBER; position++)
 8008b9a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b9c:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8008b9e:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ba2:	ea07 0604 	and.w	r6, r7, r4
    if (iocurrent == ioposition)
 8008ba6:	42b7      	cmp	r7, r6
 8008ba8:	f040 80a5 	bne.w	8008cf6 <HAL_GPIO_Init+0x16e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8008bac:	684c      	ldr	r4, [r1, #4]
 8008bae:	f024 0a10 	bic.w	sl, r4, #16
 8008bb2:	f1ba 0f02 	cmp.w	sl, #2
 8008bb6:	d116      	bne.n	8008be6 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8008bb8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8008bbc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008bc0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8008bc4:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008bc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008bcc:	f04f 0e0f 	mov.w	lr, #15
 8008bd0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8008bd4:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008bd8:	690d      	ldr	r5, [r1, #16]
 8008bda:	fa05 f50b 	lsl.w	r5, r5, fp
 8008bde:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8008be2:	f8cc 5020 	str.w	r5, [ip, #32]
 8008be6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008bea:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8008bec:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008bf0:	fa05 f50c 	lsl.w	r5, r5, ip
 8008bf4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008bf6:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008bfa:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008bfe:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008c06:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c0a:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008c0e:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8008c10:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c14:	d815      	bhi.n	8008c42 <HAL_GPIO_Init+0xba>
        temp = GPIOx->OSPEEDR; 
 8008c16:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008c1a:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2));
 8008c1e:	68cd      	ldr	r5, [r1, #12]
 8008c20:	fa05 fa0c 	lsl.w	sl, r5, ip
 8008c24:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8008c28:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8008c2c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c30:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008c34:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8008c38:	fa0e fe03 	lsl.w	lr, lr, r3
 8008c3c:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8008c40:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8008c42:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008c44:	9d00      	ldr	r5, [sp, #0]
 8008c46:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008c48:	688f      	ldr	r7, [r1, #8]
 8008c4a:	fa07 f70c 	lsl.w	r7, r7, ip
 8008c4e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8008c50:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8008c52:	00e5      	lsls	r5, r4, #3
 8008c54:	d54f      	bpl.n	8008cf6 <HAL_GPIO_Init+0x16e>
        __SYSCFG_CLK_ENABLE();
 8008c56:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8008c5a:	f023 0703 	bic.w	r7, r3, #3
 8008c5e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8008c62:	f045 0501 	orr.w	r5, r5, #1
 8008c66:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8008c6a:	f8c8 5018 	str.w	r5, [r8, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008c6e:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 8008c72:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008c74:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008c78:	f04f 0e0f 	mov.w	lr, #15
 8008c7c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8008c80:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008c84:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8008c88:	d03c      	beq.n	8008d04 <HAL_GPIO_Init+0x17c>
 8008c8a:	4d24      	ldr	r5, [pc, #144]	; (8008d1c <HAL_GPIO_Init+0x194>)
 8008c8c:	42a8      	cmp	r0, r5
 8008c8e:	d03b      	beq.n	8008d08 <HAL_GPIO_Init+0x180>
 8008c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c94:	42a8      	cmp	r0, r5
 8008c96:	d039      	beq.n	8008d0c <HAL_GPIO_Init+0x184>
 8008c98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c9c:	42a8      	cmp	r0, r5
 8008c9e:	d037      	beq.n	8008d10 <HAL_GPIO_Init+0x188>
 8008ca0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008ca4:	42a8      	cmp	r0, r5
 8008ca6:	d035      	beq.n	8008d14 <HAL_GPIO_Init+0x18c>
 8008ca8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008cac:	42a8      	cmp	r0, r5
 8008cae:	bf14      	ite	ne
 8008cb0:	2506      	movne	r5, #6
 8008cb2:	2505      	moveq	r5, #5
 8008cb4:	fa05 f50c 	lsl.w	r5, r5, ip
 8008cb8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8008cbc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8008cbe:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008cc0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008cc2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8008cc6:	bf0c      	ite	eq
 8008cc8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008cca:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8008ccc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8008cce:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cd0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8008cd4:	bf0c      	ite	eq
 8008cd6:	403d      	andeq	r5, r7
        { 
          temp |= iocurrent;
 8008cd8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8008cda:	6055      	str	r5, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cdc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cde:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8008ce2:	bf0c      	ite	eq
 8008ce4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8008ce6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8008ce8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8008cea:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cec:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8008cee:	bf54      	ite	pl
 8008cf0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8008cf2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8008cf4:	60d5      	str	r5, [r2, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	f47f af4f 	bne.w	8008b9c <HAL_GPIO_Init+0x14>
      }
    }
  } 
}
 8008cfe:	b003      	add	sp, #12
 8008d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8008d04:	2500      	movs	r5, #0
 8008d06:	e7d5      	b.n	8008cb4 <HAL_GPIO_Init+0x12c>
 8008d08:	2501      	movs	r5, #1
 8008d0a:	e7d3      	b.n	8008cb4 <HAL_GPIO_Init+0x12c>
 8008d0c:	2502      	movs	r5, #2
 8008d0e:	e7d1      	b.n	8008cb4 <HAL_GPIO_Init+0x12c>
 8008d10:	2503      	movs	r5, #3
 8008d12:	e7cf      	b.n	8008cb4 <HAL_GPIO_Init+0x12c>
 8008d14:	2504      	movs	r5, #4
 8008d16:	e7cd      	b.n	8008cb4 <HAL_GPIO_Init+0x12c>
 8008d18:	40010400 	.word	0x40010400
 8008d1c:	48000400 	.word	0x48000400
 8008d20:	40021000 	.word	0x40021000

08008d24 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d24:	6903      	ldr	r3, [r0, #16]
 8008d26:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8008d28:	bf14      	ite	ne
 8008d2a:	2001      	movne	r0, #1
 8008d2c:	2000      	moveq	r0, #0
 8008d2e:	4770      	bx	lr

08008d30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d30:	b10a      	cbz	r2, 8008d36 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8008d32:	8301      	strh	r1, [r0, #24]
 8008d34:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8008d36:	8341      	strh	r1, [r0, #26]
 8008d38:	4770      	bx	lr

08008d3a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8008d3a:	6943      	ldr	r3, [r0, #20]
 8008d3c:	4059      	eors	r1, r3
 8008d3e:	6141      	str	r1, [r0, #20]
 8008d40:	4770      	bx	lr

08008d42 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008d42:	4770      	bx	lr

08008d44 <HAL_GPIO_EXTI_IRQHandler>:
{
 8008d44:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8008d46:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8008d48:	6959      	ldr	r1, [r3, #20]
 8008d4a:	4201      	tst	r1, r0
 8008d4c:	d002      	beq.n	8008d54 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d4e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d50:	f7ff fff7 	bl	8008d42 <HAL_GPIO_EXTI_Callback>
 8008d54:	bd08      	pop	{r3, pc}
 8008d56:	bf00      	nop
 8008d58:	40010400 	.word	0x40010400

08008d5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8008d5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8008d5e:	4604      	mov	r4, r0
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d046      	beq.n	8008df2 <HAL_PCD_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 8008d64:	2302      	movs	r3, #2
 8008d66:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8008d6a:	f002 f887 	bl	800ae7c <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8008d6e:	2100      	movs	r1, #0
 8008d70:	6860      	ldr	r0, [r4, #4]
 8008d72:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8008d76:	460a      	mov	r2, r1
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8008d78:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8008d7a:	4281      	cmp	r1, r0
 8008d7c:	f103 031c 	add.w	r3, r3, #28
 8008d80:	d11b      	bne.n	8008dba <HAL_PCD_Init+0x5e>
 8008d82:	2000      	movs	r0, #0
 8008d84:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8008d88:	4603      	mov	r3, r0
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8008d8a:	4281      	cmp	r1, r0
 8008d8c:	f102 021c 	add.w	r2, r2, #28
 8008d90:	d121      	bne.n	8008dd6 <HAL_PCD_Init+0x7a>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	2101      	movs	r1, #1
 8008d96:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8008d9a:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 8008d9e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 hpcd->Instance->ISTR = 0;
 8008da2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8008da6:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8008daa:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8008dae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;

 return HAL_OK;
 8008db2:	2000      	movs	r0, #0
  hpcd->State= PCD_READY;
 8008db4:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
 return HAL_OK;
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 8008dba:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].is_in = 1;
 8008dbe:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8008dc2:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].maxpacket =  0;
 8008dc6:	f843 2c10 	str.w	r2, [r3, #-16]
   hpcd->IN_ep[i].xfer_buff = 0;
 8008dca:	f843 2c0c 	str.w	r2, [r3, #-12]
   hpcd->IN_ep[i].xfer_len = 0;
 8008dce:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8008dd2:	3101      	adds	r1, #1
 8008dd4:	e7d1      	b.n	8008d7a <HAL_PCD_Init+0x1e>
   hpcd->OUT_ep[i].num = i;
 8008dd6:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].is_in = 0;
 8008dda:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8008dde:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].maxpacket = 0;
 8008de2:	f842 3c10 	str.w	r3, [r2, #-16]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8008de6:	f842 3c0c 	str.w	r3, [r2, #-12]
   hpcd->OUT_ep[i].xfer_len = 0;
 8008dea:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8008dee:	3001      	adds	r0, #1
 8008df0:	e7cb      	b.n	8008d8a <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 8008df2:	2001      	movs	r0, #1
}
 8008df4:	bd38      	pop	{r3, r4, r5, pc}

08008df6 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8008df6:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8008df8:	2101      	movs	r1, #1
 8008dfa:	f000 ff1a 	bl	8009c32 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8008dfe:	2000      	movs	r0, #0
 8008e00:	bd08      	pop	{r3, pc}

08008e02 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8008e02:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d00f      	beq.n	8008e2a <HAL_PCD_SetAddress+0x28>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8008e10:	b941      	cbnz	r1, 8008e24 <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8008e12:	6803      	ldr	r3, [r0, #0]
 8008e14:	2280      	movs	r2, #128	; 0x80
 8008e16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8008e20:	4618      	mov	r0, r3
 8008e22:	4770      	bx	lr
     hpcd->USB_Address = address;
 8008e24:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8008e28:	e7f7      	b.n	8008e1a <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 8008e2a:	2002      	movs	r0, #2
  return HAL_OK;
}
 8008e2c:	4770      	bx	lr
	...

08008e30 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8008e32:	b24c      	sxtb	r4, r1
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8008e3a:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8008e3e:	bfb5      	itete	lt
 8008e40:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8008e44:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8008e48:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8008e4a:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8008e4c:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7F;
 8008e4e:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8008e50:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8008e52:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8008e54:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
  ep->maxpacket = ep_mps;
 8008e58:	60ca      	str	r2, [r1, #12]
  __HAL_LOCK(hpcd); 
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	f000 817a 	beq.w	8009154 <HAL_PCD_EP_Open+0x324>
 8008e60:	2301      	movs	r3, #1
 8008e62:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8008e66:	78cc      	ldrb	r4, [r1, #3]
 8008e68:	780a      	ldrb	r2, [r1, #0]
 8008e6a:	6803      	ldr	r3, [r0, #0]
 8008e6c:	2c03      	cmp	r4, #3
 8008e6e:	d810      	bhi.n	8008e92 <HAL_PCD_EP_Open+0x62>
 8008e70:	e8df f004 	tbb	[pc, r4]
 8008e74:	5e546a02 	.word	0x5e546a02
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8008e78:	b212      	sxth	r2, r2
 8008e7a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8008e7e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8008e82:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8008e86:	0424      	lsls	r4, r4, #16
 8008e88:	0c24      	lsrs	r4, r4, #16
 8008e8a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8008e8e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8008e92:	780c      	ldrb	r4, [r1, #0]
 8008e94:	b226      	sxth	r6, r4
 8008e96:	f640 720f 	movw	r2, #3855	; 0xf0f
 8008e9a:	f833 5026 	ldrh.w	r5, [r3, r6, lsl #2]
 8008e9e:	f248 0780 	movw	r7, #32896	; 0x8080
 8008ea2:	433c      	orrs	r4, r7
 8008ea4:	4015      	ands	r5, r2
 8008ea6:	4325      	orrs	r5, r4
 8008ea8:	f823 5026 	strh.w	r5, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8008eac:	7a8c      	ldrb	r4, [r1, #10]
 8008eae:	780e      	ldrb	r6, [r1, #0]
 8008eb0:	2c00      	cmp	r4, #0
 8008eb2:	f040 809f 	bne.w	8008ff4 <HAL_PCD_EP_Open+0x1c4>
  {
    if (ep->is_in)
 8008eb6:	784d      	ldrb	r5, [r1, #1]
 8008eb8:	888c      	ldrh	r4, [r1, #4]
 8008eba:	2d00      	cmp	r5, #0
 8008ebc:	d050      	beq.n	8008f60 <HAL_PCD_EP_Open+0x130>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8008ebe:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8008ec2:	b2ad      	uxth	r5, r5
 8008ec4:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8008ec8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8008ecc:	0864      	lsrs	r4, r4, #1
 8008ece:	0064      	lsls	r4, r4, #1
 8008ed0:	f8c5 4400 	str.w	r4, [r5, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8008ed4:	780d      	ldrb	r5, [r1, #0]
 8008ed6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008eda:	0664      	lsls	r4, r4, #25
 8008edc:	d508      	bpl.n	8008ef0 <HAL_PCD_EP_Open+0xc0>
 8008ede:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008ee2:	4022      	ands	r2, r4
 8008ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ee8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8008eec:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8008ef0:	7809      	ldrb	r1, [r1, #0]
 8008ef2:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008ef6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8008efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008efe:	0412      	lsls	r2, r2, #16
 8008f00:	0c12      	lsrs	r2, r2, #16
 8008f02:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8008f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8008f0e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8008f12:	2300      	movs	r3, #0
 8008f14:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8008f18:	4618      	mov	r0, r3
 8008f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8008f1c:	b212      	sxth	r2, r2
 8008f1e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8008f22:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8008f26:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8008f2a:	0424      	lsls	r4, r4, #16
 8008f2c:	0c24      	lsrs	r4, r4, #16
 8008f2e:	e7ae      	b.n	8008e8e <HAL_PCD_EP_Open+0x5e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8008f30:	b212      	sxth	r2, r2
 8008f32:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8008f36:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8008f3a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8008f3e:	0424      	lsls	r4, r4, #16
 8008f40:	0c24      	lsrs	r4, r4, #16
 8008f42:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8008f46:	e7a2      	b.n	8008e8e <HAL_PCD_EP_Open+0x5e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8008f48:	b212      	sxth	r2, r2
 8008f4a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8008f4e:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8008f52:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8008f56:	0424      	lsls	r4, r4, #16
 8008f58:	0c24      	lsrs	r4, r4, #16
 8008f5a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8008f5e:	e796      	b.n	8008e8e <HAL_PCD_EP_Open+0x5e>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8008f60:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8008f64:	2708      	movs	r7, #8
 8008f66:	b292      	uxth	r2, r2
 8008f68:	fb17 2206 	smlabb	r2, r7, r6, r2
 8008f6c:	3204      	adds	r2, #4
 8008f6e:	f503 6580 	add.w	r5, r3, #1024	; 0x400
 8008f72:	0864      	lsrs	r4, r4, #1
 8008f74:	0064      	lsls	r4, r4, #1
 8008f76:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8008f7a:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8008f7e:	780a      	ldrb	r2, [r1, #0]
 8008f80:	68ce      	ldr	r6, [r1, #12]
 8008f82:	b2a4      	uxth	r4, r4
 8008f84:	fb17 4402 	smlabb	r4, r7, r2, r4
 8008f88:	2e3e      	cmp	r6, #62	; 0x3e
 8008f8a:	f104 0406 	add.w	r4, r4, #6
 8008f8e:	d929      	bls.n	8008fe4 <HAL_PCD_EP_Open+0x1b4>
 8008f90:	f3c6 174f 	ubfx	r7, r6, #5, #16
 8008f94:	06f2      	lsls	r2, r6, #27
 8008f96:	bf04      	itt	eq
 8008f98:	f107 32ff 	addeq.w	r2, r7, #4294967295	; 0xffffffff
 8008f9c:	b297      	uxtheq	r7, r2
 8008f9e:	4a6e      	ldr	r2, [pc, #440]	; (8009158 <HAL_PCD_EP_Open+0x328>)
 8008fa0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8008fa4:	b292      	uxth	r2, r2
 8008fa6:	f845 2014 	str.w	r2, [r5, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8008faa:	780c      	ldrb	r4, [r1, #0]
 8008fac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008fb0:	0452      	lsls	r2, r2, #17
 8008fb2:	d50b      	bpl.n	8008fcc <HAL_PCD_EP_Open+0x19c>
 8008fb4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8008fb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008fbc:	0512      	lsls	r2, r2, #20
 8008fbe:	0d12      	lsrs	r2, r2, #20
 8008fc0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008fc8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8008fcc:	7809      	ldrb	r1, [r1, #0]
 8008fce:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8008fd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008fda:	0412      	lsls	r2, r2, #16
 8008fdc:	0c12      	lsrs	r2, r2, #16
 8008fde:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8008fe2:	e790      	b.n	8008f06 <HAL_PCD_EP_Open+0xd6>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8008fe4:	f3c6 024f 	ubfx	r2, r6, #1, #16
 8008fe8:	07f6      	lsls	r6, r6, #31
 8008fea:	bf44      	itt	mi
 8008fec:	3201      	addmi	r2, #1
 8008fee:	b292      	uxthmi	r2, r2
 8008ff0:	0292      	lsls	r2, r2, #10
 8008ff2:	e7d7      	b.n	8008fa4 <HAL_PCD_EP_Open+0x174>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8008ff4:	b235      	sxth	r5, r6
 8008ff6:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 8008ffa:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8008ffe:	b2a4      	uxth	r4, r4
 8009000:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8009004:	4014      	ands	r4, r2
 8009006:	433c      	orrs	r4, r7
 8009008:	f823 4025 	strh.w	r4, [r3, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 800900c:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8009010:	b2bd      	uxth	r5, r7
 8009012:	780f      	ldrb	r7, [r1, #0]
 8009014:	2408      	movs	r4, #8
 8009016:	fb14 5707 	smlabb	r7, r4, r7, r5
 800901a:	88cd      	ldrh	r5, [r1, #6]
 800901c:	086d      	lsrs	r5, r5, #1
 800901e:	006d      	lsls	r5, r5, #1
 8009020:	f846 5017 	str.w	r5, [r6, r7, lsl #1]
 8009024:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8009028:	780f      	ldrb	r7, [r1, #0]
 800902a:	b2ad      	uxth	r5, r5
 800902c:	fb14 5407 	smlabb	r4, r4, r7, r5
 8009030:	890d      	ldrh	r5, [r1, #8]
 8009032:	3404      	adds	r4, #4
 8009034:	086d      	lsrs	r5, r5, #1
 8009036:	006d      	lsls	r5, r5, #1
 8009038:	f846 5014 	str.w	r5, [r6, r4, lsl #1]
 800903c:	780c      	ldrb	r4, [r1, #0]
    if (ep->is_in==0)
 800903e:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009040:	b224      	sxth	r4, r4
    if (ep->is_in==0)
 8009042:	2d00      	cmp	r5, #0
 8009044:	d145      	bne.n	80090d2 <HAL_PCD_EP_Open+0x2a2>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009046:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 800904a:	046f      	lsls	r7, r5, #17
 800904c:	d508      	bpl.n	8009060 <HAL_PCD_EP_Open+0x230>
 800904e:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8009052:	402a      	ands	r2, r5
 8009054:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009058:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800905c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009060:	780c      	ldrb	r4, [r1, #0]
 8009062:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009066:	0656      	lsls	r6, r2, #25
 8009068:	d50b      	bpl.n	8009082 <HAL_PCD_EP_Open+0x252>
 800906a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800906e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009072:	0512      	lsls	r2, r2, #20
 8009074:	0d12      	lsrs	r2, r2, #20
 8009076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800907a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800907e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009082:	780c      	ldrb	r4, [r1, #0]
 8009084:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009088:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800908c:	0512      	lsls	r2, r2, #20
 800908e:	0d12      	lsrs	r2, r2, #20
 8009090:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009094:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009098:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800909c:	780d      	ldrb	r5, [r1, #0]
 800909e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80090a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80090aa:	0412      	lsls	r2, r2, #16
 80090ac:	0c12      	lsrs	r2, r2, #16
 80090ae:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80090b2:	f248 0480 	movw	r4, #32896	; 0x8080
 80090b6:	4322      	orrs	r2, r4
 80090b8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80090bc:	7809      	ldrb	r1, [r1, #0]
 80090be:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80090c2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80090c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80090ca:	0412      	lsls	r2, r2, #16
 80090cc:	0c12      	lsrs	r2, r2, #16
 80090ce:	4322      	orrs	r2, r4
 80090d0:	e71d      	b.n	8008f0e <HAL_PCD_EP_Open+0xde>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80090d2:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80090d6:	046d      	lsls	r5, r5, #17
 80090d8:	d508      	bpl.n	80090ec <HAL_PCD_EP_Open+0x2bc>
 80090da:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80090de:	402a      	ands	r2, r5
 80090e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80090e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090e8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80090ec:	780c      	ldrb	r4, [r1, #0]
 80090ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80090f2:	0652      	lsls	r2, r2, #25
 80090f4:	d50b      	bpl.n	800910e <HAL_PCD_EP_Open+0x2de>
 80090f6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80090fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80090fe:	0512      	lsls	r2, r2, #20
 8009100:	0d12      	lsrs	r2, r2, #20
 8009102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009106:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800910a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 800910e:	780c      	ldrb	r4, [r1, #0]
 8009110:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009114:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009118:	0512      	lsls	r2, r2, #20
 800911a:	0d12      	lsrs	r2, r2, #20
 800911c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009120:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009124:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009128:	780d      	ldrb	r5, [r1, #0]
 800912a:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800912e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009136:	0412      	lsls	r2, r2, #16
 8009138:	0c12      	lsrs	r2, r2, #16
 800913a:	f248 0480 	movw	r4, #32896	; 0x8080
 800913e:	4322      	orrs	r2, r4
 8009140:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009144:	7809      	ldrb	r1, [r1, #0]
 8009146:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800914a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800914e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009152:	e7ba      	b.n	80090ca <HAL_PCD_EP_Open+0x29a>
  __HAL_LOCK(hpcd); 
 8009154:	2002      	movs	r0, #2
}
 8009156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009158:	ffff8000 	.word	0xffff8000

0800915c <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800915c:	b24b      	sxtb	r3, r1
 800915e:	2b00      	cmp	r3, #0
{  
 8009160:	b530      	push	{r4, r5, lr}
 8009162:	f04f 021c 	mov.w	r2, #28
 8009166:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800916a:	bfb5      	itete	lt
 800916c:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009170:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009174:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009176:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009178:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 800917a:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 800917c:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800917e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009182:	2b01      	cmp	r3, #1
 8009184:	f000 80d4 	beq.w	8009330 <HAL_PCD_EP_Close+0x1d4>
 8009188:	2301      	movs	r3, #1
 800918a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800918e:	780a      	ldrb	r2, [r1, #0]

  if (ep->doublebuffer == 0) 
 8009190:	7a8d      	ldrb	r5, [r1, #10]
 8009192:	784c      	ldrb	r4, [r1, #1]
 8009194:	6803      	ldr	r3, [r0, #0]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009196:	b212      	sxth	r2, r2
  if (ep->doublebuffer == 0) 
 8009198:	2d00      	cmp	r5, #0
 800919a:	d13c      	bne.n	8009216 <HAL_PCD_EP_Close+0xba>
    if (ep->is_in)
 800919c:	b31c      	cbz	r4, 80091e6 <HAL_PCD_EP_Close+0x8a>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800919e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80091a2:	0664      	lsls	r4, r4, #25
 80091a4:	d50b      	bpl.n	80091be <HAL_PCD_EP_Close+0x62>
 80091a6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80091aa:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80091ae:	0524      	lsls	r4, r4, #20
 80091b0:	0d24      	lsrs	r4, r4, #20
 80091b2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80091b6:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 80091ba:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 80091be:	7809      	ldrb	r1, [r1, #0]
 80091c0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80091c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80091c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80091cc:	0412      	lsls	r2, r2, #16
 80091ce:	0c12      	lsrs	r2, r2, #16
 80091d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80091d8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80091dc:	2300      	movs	r3, #0
 80091de:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 80091e2:	4618      	mov	r0, r3
 80091e4:	bd30      	pop	{r4, r5, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80091e6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80091ea:	0465      	lsls	r5, r4, #17
 80091ec:	d50b      	bpl.n	8009206 <HAL_PCD_EP_Close+0xaa>
 80091ee:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80091f2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80091f6:	0524      	lsls	r4, r4, #20
 80091f8:	0d24      	lsrs	r4, r4, #20
 80091fa:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80091fe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009202:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009206:	7809      	ldrb	r1, [r1, #0]
 8009208:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800920c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009210:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009214:	e7da      	b.n	80091cc <HAL_PCD_EP_Close+0x70>
    if (ep->is_in==0)
 8009216:	2c00      	cmp	r4, #0
 8009218:	d146      	bne.n	80092a8 <HAL_PCD_EP_Close+0x14c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800921a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800921e:	0464      	lsls	r4, r4, #17
 8009220:	d50b      	bpl.n	800923a <HAL_PCD_EP_Close+0xde>
 8009222:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009226:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800922a:	0524      	lsls	r4, r4, #20
 800922c:	0d24      	lsrs	r4, r4, #20
 800922e:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009232:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009236:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800923a:	780c      	ldrb	r4, [r1, #0]
 800923c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009240:	0655      	lsls	r5, r2, #25
 8009242:	d50b      	bpl.n	800925c <HAL_PCD_EP_Close+0x100>
 8009244:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009248:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800924c:	0512      	lsls	r2, r2, #20
 800924e:	0d12      	lsrs	r2, r2, #20
 8009250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009254:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009258:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800925c:	780c      	ldrb	r4, [r1, #0]
 800925e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009262:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009266:	0512      	lsls	r2, r2, #20
 8009268:	0d12      	lsrs	r2, r2, #20
 800926a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800926e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009272:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009276:	780d      	ldrb	r5, [r1, #0]
 8009278:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800927c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009284:	0412      	lsls	r2, r2, #16
 8009286:	0c12      	lsrs	r2, r2, #16
 8009288:	f248 0480 	movw	r4, #32896	; 0x8080
 800928c:	4322      	orrs	r2, r4
 800928e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009292:	7809      	ldrb	r1, [r1, #0]
 8009294:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009298:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800929c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80092a0:	0412      	lsls	r2, r2, #16
 80092a2:	0c12      	lsrs	r2, r2, #16
 80092a4:	4322      	orrs	r2, r4
 80092a6:	e797      	b.n	80091d8 <HAL_PCD_EP_Close+0x7c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80092a8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80092ac:	0464      	lsls	r4, r4, #17
 80092ae:	d50b      	bpl.n	80092c8 <HAL_PCD_EP_Close+0x16c>
 80092b0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80092b4:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80092b8:	0524      	lsls	r4, r4, #20
 80092ba:	0d24      	lsrs	r4, r4, #20
 80092bc:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 80092c0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80092c4:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80092c8:	780c      	ldrb	r4, [r1, #0]
 80092ca:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80092ce:	0652      	lsls	r2, r2, #25
 80092d0:	d50b      	bpl.n	80092ea <HAL_PCD_EP_Close+0x18e>
 80092d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80092d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80092da:	0512      	lsls	r2, r2, #20
 80092dc:	0d12      	lsrs	r2, r2, #20
 80092de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80092e6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80092ea:	780c      	ldrb	r4, [r1, #0]
 80092ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80092f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80092f4:	0512      	lsls	r2, r2, #20
 80092f6:	0d12      	lsrs	r2, r2, #20
 80092f8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80092fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009300:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009304:	780d      	ldrb	r5, [r1, #0]
 8009306:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 800930a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800930e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009312:	0412      	lsls	r2, r2, #16
 8009314:	0c12      	lsrs	r2, r2, #16
 8009316:	f248 0480 	movw	r4, #32896	; 0x8080
 800931a:	4322      	orrs	r2, r4
 800931c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009320:	7809      	ldrb	r1, [r1, #0]
 8009322:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800932a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800932e:	e7b7      	b.n	80092a0 <HAL_PCD_EP_Close+0x144>
  __HAL_LOCK(hpcd); 
 8009330:	2002      	movs	r0, #2
}
 8009332:	bd30      	pop	{r4, r5, pc}

08009334 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800933a:	241c      	movs	r4, #28
 800933c:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8009340:	2500      	movs	r5, #0
  ep->xfer_len = len;
 8009342:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8009346:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
  ep->xfer_buff = pBuf;  
 800934a:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
  __HAL_LOCK(hpcd); 
 800934e:	2b01      	cmp	r3, #1
  ep->xfer_count = 0;
 8009350:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8009354:	f884 50b5 	strb.w	r5, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8009358:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
  __HAL_LOCK(hpcd); 
 800935c:	d067      	beq.n	800942e <HAL_PCD_EP_Receive+0xfa>
 800935e:	2301      	movs	r3, #1
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009360:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
  __HAL_LOCK(hpcd); 
 8009364:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if (ep->xfer_len > ep->maxpacket)
 8009368:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800936c:	261c      	movs	r6, #28
  if (ep->xfer_len > ep->maxpacket)
 800936e:	429a      	cmp	r2, r3
    ep->xfer_len-=len; 
 8009370:	bf88      	it	hi
 8009372:	1ad2      	subhi	r2, r2, r3
  if (ep->doublebuffer == 0) 
 8009374:	fb06 0601 	mla	r6, r6, r1, r0
    ep->xfer_len-=len; 
 8009378:	bf8e      	itee	hi
 800937a:	f8c4 20c8 	strhi.w	r2, [r4, #200]	; 0xc8
    ep->xfer_len =0;
 800937e:	f8c4 50c8 	strls.w	r5, [r4, #200]	; 0xc8
 8009382:	4613      	movls	r3, r2
  if (ep->doublebuffer == 0) 
 8009384:	f896 20be 	ldrb.w	r2, [r6, #190]	; 0xbe
 8009388:	6804      	ldr	r4, [r0, #0]
 800938a:	bb9a      	cbnz	r2, 80093f4 <HAL_PCD_EP_Receive+0xc0>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800938c:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8009390:	f896 20b4 	ldrb.w	r2, [r6, #180]	; 0xb4
 8009394:	b2ad      	uxth	r5, r5
 8009396:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800939a:	2b3e      	cmp	r3, #62	; 0x3e
 800939c:	f105 0506 	add.w	r5, r5, #6
 80093a0:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 80093a4:	d938      	bls.n	8009418 <HAL_PCD_EP_Receive+0xe4>
 80093a6:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80093aa:	06db      	lsls	r3, r3, #27
 80093ac:	bf04      	itt	eq
 80093ae:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 80093b2:	b29a      	uxtheq	r2, r3
 80093b4:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <HAL_PCD_EP_Receive+0x100>)
 80093b6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f846 3015 	str.w	r3, [r6, r5, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80093c0:	231c      	movs	r3, #28
 80093c2:	fb03 0101 	mla	r1, r3, r1, r0
 80093c6:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 80093ca:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80093ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d6:	041b      	lsls	r3, r3, #16
 80093d8:	0c1b      	lsrs	r3, r3, #16
 80093da:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80093de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 80093ea:	2300      	movs	r3, #0
 80093ec:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 80093f0:	4618      	mov	r0, r3
 80093f2:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80093f4:	f896 20b5 	ldrb.w	r2, [r6, #181]	; 0xb5
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	d0c7      	beq.n	800938c <HAL_PCD_EP_Receive+0x58>
 80093fc:	2a01      	cmp	r2, #1
 80093fe:	d1df      	bne.n	80093c0 <HAL_PCD_EP_Receive+0x8c>
 8009400:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8009404:	f896 50b4 	ldrb.w	r5, [r6, #180]	; 0xb4
 8009408:	b292      	uxth	r2, r2
 800940a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800940e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009412:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 8009416:	e7d3      	b.n	80093c0 <HAL_PCD_EP_Receive+0x8c>
 8009418:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800941c:	07db      	lsls	r3, r3, #31
 800941e:	bf44      	itt	mi
 8009420:	3201      	addmi	r2, #1
 8009422:	b292      	uxthmi	r2, r2
 8009424:	0292      	lsls	r2, r2, #10
 8009426:	b292      	uxth	r2, r2
 8009428:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800942c:	e7c8      	b.n	80093c0 <HAL_PCD_EP_Receive+0x8c>
  __HAL_LOCK(hpcd); 
 800942e:	2002      	movs	r0, #2
}
 8009430:	bd70      	pop	{r4, r5, r6, pc}
 8009432:	bf00      	nop
 8009434:	ffff8000 	.word	0xffff8000

08009438 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8009438:	231c      	movs	r3, #28
 800943a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800943e:	fb03 0101 	mla	r1, r3, r1, r0
}
 8009442:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
 8009446:	4770      	bx	lr

08009448 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800944e:	211c      	movs	r1, #28
 8009450:	fb01 0106 	mla	r1, r1, r6, r0
{
 8009454:	4604      	mov	r4, r0
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8009456:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
  ep->xfer_len = len;
 800945a:	63cb      	str	r3, [r1, #60]	; 0x3c
  ep->is_in = 1;
 800945c:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;  
 800945e:	638a      	str	r2, [r1, #56]	; 0x38
  __HAL_LOCK(hpcd); 
 8009460:	4298      	cmp	r0, r3
  ep->xfer_count = 0;
 8009462:	f04f 0200 	mov.w	r2, #0
 8009466:	640a      	str	r2, [r1, #64]	; 0x40
  ep->is_in = 1;
 8009468:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800946c:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
  __HAL_LOCK(hpcd); 
 8009470:	f000 80a6 	beq.w	80095c0 <HAL_PCD_EP_Transmit+0x178>
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009474:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  __HAL_LOCK(hpcd); 
 8009476:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  if (ep->xfer_len > ep->maxpacket)
 800947a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800947c:	271c      	movs	r7, #28
  if (ep->xfer_len > ep->maxpacket)
 800947e:	42ab      	cmp	r3, r5
    ep->xfer_len-=len; 
 8009480:	bf88      	it	hi
 8009482:	1b5b      	subhi	r3, r3, r5
  if (ep->doublebuffer == 0) 
 8009484:	fb07 4706 	mla	r7, r7, r6, r4
    ep->xfer_len-=len; 
 8009488:	bf8c      	ite	hi
 800948a:	63cb      	strhi	r3, [r1, #60]	; 0x3c
    ep->xfer_len =0;
 800948c:	63ca      	strls	r2, [r1, #60]	; 0x3c
  if (ep->doublebuffer == 0) 
 800948e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
    ep->xfer_len =0;
 8009492:	bf98      	it	ls
 8009494:	461d      	movls	r5, r3
 8009496:	b2ab      	uxth	r3, r5
  if (ep->doublebuffer == 0) 
 8009498:	bb52      	cbnz	r2, 80094f0 <HAL_PCD_EP_Transmit+0xa8>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800949a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800949c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800949e:	6820      	ldr	r0, [r4, #0]
 80094a0:	f000 fba5 	bl	8009bee <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80094aa:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80094b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80094b8:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80094bc:	231c      	movs	r3, #28
 80094be:	fb03 4606 	mla	r6, r3, r6, r4
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 80094c8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80094cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80094dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 80094e4:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80094e6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 80094ea:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 80094ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80094f0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	d145      	bne.n	8009586 <HAL_PCD_EP_Transmit+0x13e>
 80094fa:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80094fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009502:	b289      	uxth	r1, r1
 8009504:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009508:	2d3e      	cmp	r5, #62	; 0x3e
 800950a:	f101 0106 	add.w	r1, r1, #6
 800950e:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 8009512:	d930      	bls.n	8009576 <HAL_PCD_EP_Transmit+0x12e>
 8009514:	f3c5 1e4f 	ubfx	lr, r5, #5, #16
 8009518:	06ea      	lsls	r2, r5, #27
 800951a:	bf04      	itt	eq
 800951c:	f10e 32ff 	addeq.w	r2, lr, #4294967295	; 0xffffffff
 8009520:	fa1f fe82 	uxtheq.w	lr, r2
 8009524:	4a27      	ldr	r2, [pc, #156]	; (80095c4 <HAL_PCD_EP_Transmit+0x17c>)
 8009526:	ea42 228e 	orr.w	r2, r2, lr, lsl #10
 800952a:	b292      	uxth	r2, r2
 800952c:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8009530:	251c      	movs	r5, #28
 8009532:	fb05 4206 	mla	r2, r5, r6, r4
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8009536:	fb05 4506 	mla	r5, r5, r6, r4
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800953a:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 800953e:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 8009542:	0649      	lsls	r1, r1, #25
      pmabuffer = ep->pmaaddr1;
 8009544:	bf4c      	ite	mi
 8009546:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 8009548:	8dd2      	ldrhpl	r2, [r2, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800954a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800954c:	f000 fb4f 	bl	8009bee <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8009550:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 8009554:	6822      	ldr	r2, [r4, #0]
 8009556:	bb23      	cbnz	r3, 80095a2 <HAL_PCD_EP_Transmit+0x15a>
 8009558:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800955c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009564:	051b      	lsls	r3, r3, #20
 8009566:	0d1b      	lsrs	r3, r3, #20
 8009568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800956c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009570:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009574:	e7a2      	b.n	80094bc <HAL_PCD_EP_Transmit+0x74>
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009576:	f3c5 024f 	ubfx	r2, r5, #1, #16
 800957a:	07ed      	lsls	r5, r5, #31
 800957c:	bf44      	itt	mi
 800957e:	3201      	addmi	r2, #1
 8009580:	b292      	uxthmi	r2, r2
 8009582:	0292      	lsls	r2, r2, #10
 8009584:	e7d1      	b.n	800952a <HAL_PCD_EP_Transmit+0xe2>
 8009586:	2a01      	cmp	r2, #1
 8009588:	d1d2      	bne.n	8009530 <HAL_PCD_EP_Transmit+0xe8>
 800958a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800958e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8009592:	b292      	uxth	r2, r2
 8009594:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009598:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800959c:	f8c2 540c 	str.w	r5, [r2, #1036]	; 0x40c
 80095a0:	e7c6      	b.n	8009530 <HAL_PCD_EP_Transmit+0xe8>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d18a      	bne.n	80094bc <HAL_PCD_EP_Transmit+0x74>
 80095a6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80095aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80095ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095b2:	051b      	lsls	r3, r3, #20
 80095b4:	0d1b      	lsrs	r3, r3, #20
 80095b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095be:	e7d7      	b.n	8009570 <HAL_PCD_EP_Transmit+0x128>
  __HAL_LOCK(hpcd); 
 80095c0:	2002      	movs	r0, #2
}
 80095c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c4:	ffff8000 	.word	0xffff8000

080095c8 <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80095c8:	6803      	ldr	r3, [r0, #0]
 80095ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 80095ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80095d2:	0419      	lsls	r1, r3, #16
{
 80095d4:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80095d6:	d46e      	bmi.n	80096b6 <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80095de:	0552      	lsls	r2, r2, #21
 80095e0:	d50a      	bpl.n	80095f8 <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80095e2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 80095e6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80095e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80095ec:	f001 fcaf 	bl	800af4e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80095f0:	2100      	movs	r1, #0
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff fc05 	bl	8008e02 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80095fe:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8009600:	bf44      	itt	mi
 8009602:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8009606:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800960a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800960e:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8009610:	bf44      	itt	mi
 8009612:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8009616:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800961a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800961e:	04d6      	lsls	r6, r2, #19
 8009620:	d513      	bpl.n	800964a <HAL_PCD_IRQHandler+0x82>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8009622:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009626:	f022 0204 	bic.w	r2, r2, #4
 800962a:	0412      	lsls	r2, r2, #16
 800962c:	0c12      	lsrs	r2, r2, #16
 800962e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8009632:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8009636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800963a:	4620      	mov	r0, r4
 800963c:	f001 fc95 	bl	800af6a <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8009646:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009650:	0515      	lsls	r5, r2, #20
 8009652:	d518      	bpl.n	8009686 <HAL_PCD_IRQHandler+0xbe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8009654:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8009658:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800965c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009660:	b292      	uxth	r2, r2
 8009662:	f042 0208 	orr.w	r2, r2, #8
 8009666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800966a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800966e:	b292      	uxth	r2, r2
 8009670:	f042 0204 	orr.w	r2, r2, #4
 8009674:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8009678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800967c:	04d8      	lsls	r0, r3, #19
 800967e:	d402      	bmi.n	8009686 <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_SuspendCallback(hpcd);
 8009680:	4620      	mov	r0, r4
 8009682:	f001 fc71 	bl	800af68 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800968c:	0591      	lsls	r1, r2, #22
 800968e:	d506      	bpl.n	800969e <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8009690:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8009694:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8009698:	4620      	mov	r0, r4
 800969a:	f001 fc54 	bl	800af46 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80096a4:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80096a6:	bf44      	itt	mi
 80096a8:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 80096ac:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 80096b0:	b002      	add	sp, #8
 80096b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0;
 80096b6:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80096b8:	4fc6      	ldr	r7, [pc, #792]	; (80099d4 <HAL_PCD_IRQHandler+0x40c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80096ba:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80099d8 <HAL_PCD_IRQHandler+0x410>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80096be:	f8df 931c 	ldr.w	r9, [pc, #796]	; 80099dc <HAL_PCD_IRQHandler+0x414>
  __IO uint16_t wEPVal = 0;
 80096c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80096c6:	6820      	ldr	r0, [r4, #0]
 80096c8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	0419      	lsls	r1, r3, #16
 80096d0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80096d4:	d580      	bpl.n	80095d8 <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80096d6:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    if (EPindex == 0)
 80096da:	f016 060f 	ands.w	r6, r6, #15
 80096de:	f040 80ab 	bne.w	8009838 <HAL_PCD_IRQHandler+0x270>
      if ((wIstr & USB_ISTR_DIR) == 0)
 80096e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80096e6:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 80096e8:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80096ec:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 80096ee:	d126      	bne.n	800973e <HAL_PCD_IRQHandler+0x176>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80096f0:	403b      	ands	r3, r7
 80096f2:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80096f4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80096f8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009702:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8009706:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009708:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800970c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009710:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8009712:	4413      	add	r3, r2
 8009714:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8009716:	4620      	mov	r0, r4
 8009718:	f001 fc0d 	bl	800af36 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800971c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0d0      	beq.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
 8009724:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009726:	2a00      	cmp	r2, #0
 8009728:	d1cd      	bne.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800972a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800972e:	6821      	ldr	r1, [r4, #0]
 8009730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009734:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8009738:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800973c:	e7c3      	b.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800973e:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8009742:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009746:	051b      	lsls	r3, r3, #20
 8009748:	d51f      	bpl.n	800978a <HAL_PCD_IRQHandler+0x1c2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800974a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800974e:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8009752:	b29b      	uxth	r3, r3
 8009754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009758:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800975c:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009760:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009768:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800976c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8009770:	f000 fa4e 	bl	8009c10 <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8009774:	6822      	ldr	r2, [r4, #0]
 8009776:	8813      	ldrh	r3, [r2, #0]
 8009778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977c:	051b      	lsls	r3, r3, #20
 800977e:	0d1b      	lsrs	r3, r3, #20
 8009780:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8009782:	4620      	mov	r0, r4
 8009784:	f001 fbc8 	bl	800af18 <HAL_PCD_SetupStageCallback>
 8009788:	e79d      	b.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800978a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800978e:	041e      	lsls	r6, r3, #16
 8009790:	d599      	bpl.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009792:	8803      	ldrh	r3, [r0, #0]
 8009794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009798:	051b      	lsls	r3, r3, #20
 800979a:	0d1b      	lsrs	r3, r3, #20
 800979c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800979e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80097a2:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80097b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80097b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097b8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 80097bc:	b163      	cbz	r3, 80097d8 <HAL_PCD_IRQHandler+0x210>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80097be:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 80097c2:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80097c6:	f000 fa23 	bl	8009c10 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80097ca:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80097ce:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 80097d2:	4413      	add	r3, r2
 80097d4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80097d8:	2100      	movs	r1, #0
 80097da:	4620      	mov	r0, r4
 80097dc:	f001 fba2 	bl	800af24 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 80097e6:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80097ea:	2d3e      	cmp	r5, #62	; 0x3e
 80097ec:	b289      	uxth	r1, r1
 80097ee:	f101 0106 	add.w	r1, r1, #6
 80097f2:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 80097f6:	d917      	bls.n	8009828 <HAL_PCD_IRQHandler+0x260>
 80097f8:	f3c5 134f 	ubfx	r3, r5, #5, #16
 80097fc:	06ed      	lsls	r5, r5, #27
 80097fe:	bf04      	itt	eq
 8009800:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8009804:	b29b      	uxtheq	r3, r3
 8009806:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 800980a:	b29b      	uxth	r3, r3
 800980c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009810:	8813      	ldrh	r3, [r2, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea03 0308 	and.w	r3, r3, r8
 8009818:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800981c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009824:	8013      	strh	r3, [r2, #0]
 8009826:	e74e      	b.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009828:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800982c:	07ee      	lsls	r6, r5, #31
 800982e:	bf44      	itt	mi
 8009830:	3301      	addmi	r3, #1
 8009832:	b29b      	uxthmi	r3, r3
 8009834:	029b      	lsls	r3, r3, #10
 8009836:	e7e8      	b.n	800980a <HAL_PCD_IRQHandler+0x242>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8009838:	fa0f fa86 	sxth.w	sl, r6
 800983c:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8009846:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800984a:	041d      	lsls	r5, r3, #16
 800984c:	d540      	bpl.n	80098d0 <HAL_PCD_IRQHandler+0x308>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800984e:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 8009852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009856:	051b      	lsls	r3, r3, #20
 8009858:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 800985a:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800985c:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 8009860:	fb01 4106 	mla	r1, r1, r6, r4
 8009864:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 8009868:	2b00      	cmp	r3, #0
 800986a:	d173      	bne.n	8009954 <HAL_PCD_IRQHandler+0x38c>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800986c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8009870:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 8009874:	b29b      	uxth	r3, r3
 8009876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800987a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800987e:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
 8009882:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0)
 8009886:	b135      	cbz	r5, 8009896 <HAL_PCD_IRQHandler+0x2ce>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009888:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 800988c:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 8009890:	462b      	mov	r3, r5
 8009892:	f000 f9bd 	bl	8009c10 <PCD_ReadPMA>
        ep->xfer_count+=count;
 8009896:	211c      	movs	r1, #28
 8009898:	fb01 4106 	mla	r1, r1, r6, r4
 800989c:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 80098a0:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 80098a4:	442b      	add	r3, r5
 80098a6:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80098aa:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 80098ae:	442a      	add	r2, r5
 80098b0:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80098b4:	b123      	cbz	r3, 80098c0 <HAL_PCD_IRQHandler+0x2f8>
 80098b6:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 80098ba:	4285      	cmp	r5, r0
 80098bc:	f080 8084 	bcs.w	80099c8 <HAL_PCD_IRQHandler+0x400>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80098c0:	231c      	movs	r3, #28
 80098c2:	fb03 4306 	mla	r3, r3, r6, r4
 80098c6:	4620      	mov	r0, r4
 80098c8:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 80098cc:	f001 fb2a 	bl	800af24 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80098d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80098d4:	0618      	lsls	r0, r3, #24
 80098d6:	f57f aef6 	bpl.w	80096c6 <HAL_PCD_IRQHandler+0xfe>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80098da:	6820      	ldr	r0, [r4, #0]
 80098dc:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0)
 80098e4:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80098e6:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 80098ea:	fb01 4106 	mla	r1, r1, r6, r4
 80098ee:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d174      	bne.n	80099e0 <HAL_PCD_IRQHandler+0x418>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80098f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80098fa:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80098fe:	b29b      	uxth	r3, r3
 8009900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009904:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800990c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009910:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 8009912:	b11b      	cbz	r3, 800991c <HAL_PCD_IRQHandler+0x354>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8009914:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8009916:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009918:	f000 f969 	bl	8009bee <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	211c      	movs	r1, #28
 8009920:	fb01 4606 	mla	r6, r1, r6, r4
 8009924:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8009928:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800992c:	b29b      	uxth	r3, r3
 800992e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009932:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009936:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009938:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800993c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800993e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009942:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8009944:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 8009946:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 8009948:	63b2      	str	r2, [r6, #56]	; 0x38
        if (ep->xfer_len == 0)
 800994a:	2b00      	cmp	r3, #0
 800994c:	d17f      	bne.n	8009a4e <HAL_PCD_IRQHandler+0x486>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800994e:	f001 faf2 	bl	800af36 <HAL_PCD_DataInStageCallback>
 8009952:	e6b8      	b.n	80096c6 <HAL_PCD_IRQHandler+0xfe>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009954:	f891 50b4 	ldrb.w	r5, [r1, #180]	; 0xb4
 8009958:	b22b      	sxth	r3, r5
 800995a:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800995e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009962:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009966:	b292      	uxth	r2, r2
 8009968:	f04f 0308 	mov.w	r3, #8
 800996c:	fb13 2305 	smlabb	r3, r3, r5, r2
 8009970:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8009974:	d01e      	beq.n	80099b4 <HAL_PCD_IRQHandler+0x3ec>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009976:	f8d3 5404 	ldr.w	r5, [r3, #1028]	; 0x404
 800997a:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0)
 800997e:	b135      	cbz	r5, 800998e <HAL_PCD_IRQHandler+0x3c6>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009980:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 8009984:	462b      	mov	r3, r5
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009986:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800998a:	f000 f941 	bl	8009c10 <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800998e:	231c      	movs	r3, #28
 8009990:	fb03 4306 	mla	r3, r3, r6, r4
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800999a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800999e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099a2:	051b      	lsls	r3, r3, #20
 80099a4:	0d1b      	lsrs	r3, r3, #20
 80099a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099ae:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80099b2:	e770      	b.n	8009896 <HAL_PCD_IRQHandler+0x2ce>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099b4:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
 80099b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0)
 80099bc:	2d00      	cmp	r5, #0
 80099be:	d0e6      	beq.n	800998e <HAL_PCD_IRQHandler+0x3c6>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80099c0:	462b      	mov	r3, r5
 80099c2:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 80099c6:	e7de      	b.n	8009986 <HAL_PCD_IRQHandler+0x3be>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80099c8:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7ff fcb1 	bl	8009334 <HAL_PCD_EP_Receive>
 80099d2:	e77d      	b.n	80098d0 <HAL_PCD_IRQHandler+0x308>
 80099d4:	ffff8f0f 	.word	0xffff8f0f
 80099d8:	ffffbf8f 	.word	0xffffbf8f
 80099dc:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80099e0:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 80099e4:	b22b      	sxth	r3, r5
 80099e6:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80099ea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 80099ee:	f013 0f40 	tst.w	r3, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80099f2:	b292      	uxth	r2, r2
 80099f4:	f04f 0308 	mov.w	r3, #8
 80099f8:	fb13 2305 	smlabb	r3, r3, r5, r2
 80099fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8009a00:	d01c      	beq.n	8009a3c <HAL_PCD_IRQHandler+0x474>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a0a:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 8009a0c:	b11b      	cbz	r3, 8009a16 <HAL_PCD_IRQHandler+0x44e>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8009a0e:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8009a10:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a12:	f000 f8ec 	bl	8009bee <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8009a16:	231c      	movs	r3, #28
 8009a18:	fb03 4306 	mla	r3, r3, r6, r4
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8009a22:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a2a:	051b      	lsls	r3, r3, #20
 8009a2c:	0d1b      	lsrs	r3, r3, #20
 8009a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a36:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009a3a:	e76f      	b.n	800991c <HAL_PCD_IRQHandler+0x354>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009a3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8009a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a44:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0e5      	beq.n	8009a16 <HAL_PCD_IRQHandler+0x44e>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8009a4a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8009a4c:	e7e0      	b.n	8009a10 <HAL_PCD_IRQHandler+0x448>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8009a4e:	f7ff fcfb 	bl	8009448 <HAL_PCD_EP_Transmit>
 8009a52:	e638      	b.n	80096c6 <HAL_PCD_IRQHandler+0xfe>

08009a54 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8009a54:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009a58:	2b01      	cmp	r3, #1
{
 8009a5a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8009a5c:	d048      	beq.n	8009af0 <HAL_PCD_EP_SetStall+0x9c>
   
  if ((0x80 & ep_addr) == 0x80)
 8009a5e:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 8009a60:	2301      	movs	r3, #1
 8009a62:	221c      	movs	r2, #28
 8009a64:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009a6e:	bfb5      	itete	lt
 8009a70:	fb02 0203 	mlalt	r2, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009a74:	fb02 0201 	mlage	r2, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009a78:	3228      	addlt	r2, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8009a7a:	32b4      	addge	r2, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	7091      	strb	r1, [r2, #2]
  ep->num   = ep_addr & 0x7F;
 8009a80:	b2d9      	uxtb	r1, r3
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8009a82:	0fe3      	lsrs	r3, r4, #31
  ep->num   = ep_addr & 0x7F;
 8009a84:	7011      	strb	r1, [r2, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8009a86:	7053      	strb	r3, [r2, #1]
 8009a88:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8009a8a:	b9a1      	cbnz	r1, 8009ab6 <HAL_PCD_EP_SetStall+0x62>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8009a8c:	8813      	ldrh	r3, [r2, #0]
 8009a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a96:	041b      	lsls	r3, r3, #16
 8009a98:	0c1b      	lsrs	r3, r3, #16
 8009a9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a9e:	f083 0310 	eor.w	r3, r3, #16
 8009aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aaa:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
    }
  }
  __HAL_UNLOCK(hpcd); 
 8009aac:	2300      	movs	r3, #0
 8009aae:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	bd10      	pop	{r4, pc}
 8009ab6:	b209      	sxth	r1, r1
    if (ep->is_in)
 8009ab8:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8009aba:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 8009abe:	da0e      	bge.n	8009ade <HAL_PCD_EP_SetStall+0x8a>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8009ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac8:	041b      	lsls	r3, r3, #16
 8009aca:	0c1b      	lsrs	r3, r3, #16
 8009acc:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8009ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8009adc:	e7e6      	b.n	8009aac <HAL_PCD_EP_SetStall+0x58>
 8009ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae6:	041b      	lsls	r3, r3, #16
 8009ae8:	0c1b      	lsrs	r3, r3, #16
 8009aea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009aee:	e7ef      	b.n	8009ad0 <HAL_PCD_EP_SetStall+0x7c>
  __HAL_LOCK(hpcd); 
 8009af0:	2002      	movs	r0, #2
}
 8009af2:	bd10      	pop	{r4, pc}

08009af4 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8009af4:	b24b      	sxtb	r3, r1
 8009af6:	2b00      	cmp	r3, #0
{
 8009af8:	b510      	push	{r4, lr}
 8009afa:	f04f 021c 	mov.w	r2, #28
 8009afe:	f001 047f 	and.w	r4, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009b02:	bfb5      	itete	lt
 8009b04:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009b08:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009b0c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8009b0e:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8009b10:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8009b12:	2200      	movs	r2, #0
 8009b14:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8009b16:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8009b18:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8009b1a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d049      	beq.n	8009bb6 <HAL_PCD_EP_ClrStall+0xc2>
 8009b22:	2301      	movs	r3, #1
 8009b24:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 8009b28:	780b      	ldrb	r3, [r1, #0]
  
  if (ep->is_in)
 8009b2a:	784c      	ldrb	r4, [r1, #1]
 8009b2c:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009b2e:	b21b      	sxth	r3, r3
  if (ep->is_in)
 8009b30:	b32c      	cbz	r4, 8009b7e <HAL_PCD_EP_ClrStall+0x8a>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009b32:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8009b36:	0664      	lsls	r4, r4, #25
 8009b38:	d50b      	bpl.n	8009b52 <HAL_PCD_EP_ClrStall+0x5e>
 8009b3a:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8009b3e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009b42:	0524      	lsls	r4, r4, #20
 8009b44:	0d24      	lsrs	r4, r4, #20
 8009b46:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009b4a:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8009b4e:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009b52:	7809      	ldrb	r1, [r1, #0]
 8009b54:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	0c1b      	lsrs	r3, r3, #16
 8009b64:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8009b74:	2300      	movs	r3, #0
 8009b76:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009b7e:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8009b82:	0464      	lsls	r4, r4, #17
 8009b84:	d50b      	bpl.n	8009b9e <HAL_PCD_EP_ClrStall+0xaa>
 8009b86:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 8009b8a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009b8e:	0524      	lsls	r4, r4, #20
 8009b90:	0d24      	lsrs	r4, r4, #20
 8009b92:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009b96:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009b9a:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009b9e:	7809      	ldrb	r1, [r1, #0]
 8009ba0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8009ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bac:	041b      	lsls	r3, r3, #16
 8009bae:	0c1b      	lsrs	r3, r3, #16
 8009bb0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8009bb4:	e7d8      	b.n	8009b68 <HAL_PCD_EP_ClrStall+0x74>
  __HAL_LOCK(hpcd); 
 8009bb6:	2002      	movs	r0, #2
}
 8009bb8:	bd10      	pop	{r4, pc}

08009bba <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8009bba:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8009bbe:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009bc0:	bf18      	it	ne
 8009bc2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8009bc6:	f04f 041c 	mov.w	r4, #28
 8009bca:	bf15      	itete	ne
 8009bcc:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009bd0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009bd4:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8009bd6:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009bd8:	b91a      	cbnz	r2, 8009be2 <HAL_PCDEx_PMAConfig+0x28>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8009bda:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8009bdc:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 8009bde:	2000      	movs	r0, #0
 8009be0:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1;
 8009be2:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8009be4:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8009be6:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 8009be8:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8009bea:	8103      	strh	r3, [r0, #8]
 8009bec:	e7f7      	b.n	8009bde <HAL_PCDEx_PMAConfig+0x24>

08009bee <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8009bee:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8009bf0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 8009bf4:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8009bf6:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8009bf8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8009bfc:	2400      	movs	r4, #0
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	d100      	bne.n	8009c04 <PCD_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8009c02:	bd10      	pop	{r4, pc}
 8009c04:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8009c08:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8009c0c:	3401      	adds	r4, #1
 8009c0e:	e7f6      	b.n	8009bfe <PCD_WritePMA+0x10>

08009c10 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8009c10:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8009c12:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 8009c16:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8009c18:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8009c1a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 8009c1e:	2400      	movs	r4, #0
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d100      	bne.n	8009c26 <PCD_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8009c24:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8009c26:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8009c2a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8009c2e:	3401      	adds	r4, #1
 8009c30:	e7f6      	b.n	8009c20 <PCD_ReadPMA+0x10>

08009c32 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8009c32:	4770      	bx	lr

08009c34 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009c34:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8009c36:	6805      	ldr	r5, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8009c38:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8009c3a:	6868      	ldr	r0, [r5, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8009c3c:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8009c40:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8009c44:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009c48:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8009c4a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8009c4e:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8009c50:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8009c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c58:	4301      	orrs	r1, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8009c5a:	6069      	str	r1, [r5, #4]
 8009c5c:	bd30      	pop	{r4, r5, pc}

08009c5e <I2C_IsAcknowledgeFailed>:
{
 8009c5e:	b570      	push	{r4, r5, r6, lr}
 8009c60:	4604      	mov	r4, r0
 8009c62:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 8009c64:	f7fe ff14 	bl	8008a90 <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c68:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009c6a:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c6c:	6998      	ldr	r0, [r3, #24]
 8009c6e:	f010 0010 	ands.w	r0, r0, #16
 8009c72:	d02d      	beq.n	8009cd0 <I2C_IsAcknowledgeFailed+0x72>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8009c74:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8009c78:	2a12      	cmp	r2, #18
 8009c7a:	d007      	beq.n	8009c8c <I2C_IsAcknowledgeFailed+0x2e>
 8009c7c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8009c80:	2a52      	cmp	r2, #82	; 0x52
 8009c82:	d003      	beq.n	8009c8c <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8009c84:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8009c88:	2a62      	cmp	r2, #98	; 0x62
 8009c8a:	d106      	bne.n	8009c9a <I2C_IsAcknowledgeFailed+0x3c>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	0190      	lsls	r0, r2, #6
 8009c90:	d403      	bmi.n	8009c9a <I2C_IsAcknowledgeFailed+0x3c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c98:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	0692      	lsls	r2, r2, #26
 8009ca0:	d517      	bpl.n	8009cd2 <I2C_IsAcknowledgeFailed+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009cb0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009cb4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009cb8:	f022 0201 	bic.w	r2, r2, #1
 8009cbc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009cbe:	2304      	movs	r3, #4
 8009cc0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 8009cc4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8009cc6:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 8009cc8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 8009ccc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009cd0:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8009cd2:	1c69      	adds	r1, r5, #1
 8009cd4:	d0e2      	beq.n	8009c9c <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009cd6:	b93d      	cbnz	r5, 8009ce8 <I2C_IsAcknowledgeFailed+0x8a>
          hi2c->State= HAL_I2C_STATE_READY;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8009ce4:	2003      	movs	r0, #3
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009ce8:	f7fe fed2 	bl	8008a90 <HAL_GetTick>
 8009cec:	1b80      	subs	r0, r0, r6
 8009cee:	4285      	cmp	r5, r0
 8009cf0:	d2d3      	bcs.n	8009c9a <I2C_IsAcknowledgeFailed+0x3c>
 8009cf2:	e7f1      	b.n	8009cd8 <I2C_IsAcknowledgeFailed+0x7a>

08009cf4 <I2C_WaitOnFlagUntilTimeout>:
{  
 8009cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460e      	mov	r6, r1
 8009cfc:	4690      	mov	r8, r2
 8009cfe:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8009d00:	f7fe fec6 	bl	8008a90 <HAL_GetTick>
 8009d04:	4607      	mov	r7, r0
  if(Status == RESET)
 8009d06:	f1b8 0f00 	cmp.w	r8, #0
 8009d0a:	d01e      	beq.n	8009d4a <I2C_WaitOnFlagUntilTimeout+0x56>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8009d0c:	6822      	ldr	r2, [r4, #0]
 8009d0e:	6993      	ldr	r3, [r2, #24]
 8009d10:	ea36 0303 	bics.w	r3, r6, r3
 8009d14:	d11e      	bne.n	8009d54 <I2C_WaitOnFlagUntilTimeout+0x60>
      if(Timeout != HAL_MAX_DELAY)
 8009d16:	1c6b      	adds	r3, r5, #1
 8009d18:	d0f9      	beq.n	8009d0e <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009d1a:	b145      	cbz	r5, 8009d2e <I2C_WaitOnFlagUntilTimeout+0x3a>
 8009d1c:	f7fe feb8 	bl	8008a90 <HAL_GetTick>
 8009d20:	1bc0      	subs	r0, r0, r7
 8009d22:	4285      	cmp	r5, r0
 8009d24:	d2f2      	bcs.n	8009d0c <I2C_WaitOnFlagUntilTimeout+0x18>
 8009d26:	e002      	b.n	8009d2e <I2C_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8009d28:	1c69      	adds	r1, r5, #1
 8009d2a:	d00f      	beq.n	8009d4c <I2C_WaitOnFlagUntilTimeout+0x58>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009d2c:	b945      	cbnz	r5, 8009d40 <I2C_WaitOnFlagUntilTimeout+0x4c>
          hi2c->State= HAL_I2C_STATE_READY;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 8009d34:	2300      	movs	r3, #0
 8009d36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8009d3a:	2003      	movs	r0, #3
 8009d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009d40:	f7fe fea6 	bl	8008a90 <HAL_GetTick>
 8009d44:	1bc0      	subs	r0, r0, r7
 8009d46:	4285      	cmp	r5, r0
 8009d48:	d3f1      	bcc.n	8009d2e <I2C_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	6993      	ldr	r3, [r2, #24]
 8009d4e:	ea36 0303 	bics.w	r3, r6, r3
 8009d52:	d1e9      	bne.n	8009d28 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 8009d54:	2000      	movs	r0, #0
 8009d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d5a <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 8009d60:	f7fe fe96 	bl	8008a90 <HAL_GetTick>
 8009d64:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	069b      	lsls	r3, r3, #26
 8009d6c:	d501      	bpl.n	8009d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 8009d6e:	2000      	movs	r0, #0
 8009d70:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8009d72:	4629      	mov	r1, r5
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff ff72 	bl	8009c5e <I2C_IsAcknowledgeFailed>
 8009d7a:	b9a0      	cbnz	r0, 8009da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009d7c:	b96d      	cbnz	r5, 8009d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d7e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009d82:	f043 0320 	orr.w	r3, r3, #32
 8009d86:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 8009d90:	2300      	movs	r3, #0
 8009d92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009d96:	2003      	movs	r0, #3
 8009d98:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009d9a:	f7fe fe79 	bl	8008a90 <HAL_GetTick>
 8009d9e:	1b80      	subs	r0, r0, r6
 8009da0:	4285      	cmp	r5, r0
 8009da2:	d2e0      	bcs.n	8009d66 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8009da4:	e7eb      	b.n	8009d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 8009da6:	2001      	movs	r0, #1
}
 8009da8:	bd70      	pop	{r4, r5, r6, pc}

08009daa <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8009daa:	b570      	push	{r4, r5, r6, lr}
 8009dac:	4604      	mov	r4, r0
 8009dae:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8009db0:	f7fe fe6e 	bl	8008a90 <HAL_GetTick>
 8009db4:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	079b      	lsls	r3, r3, #30
 8009dbc:	d501      	bpl.n	8009dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7ff ff4a 	bl	8009c5e <I2C_IsAcknowledgeFailed>
 8009dca:	b9b0      	cbnz	r0, 8009dfa <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8009dcc:	1c6a      	adds	r2, r5, #1
 8009dce:	d0f2      	beq.n	8009db6 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009dd0:	b96d      	cbnz	r5, 8009dee <I2C_WaitOnTXISFlagUntilTimeout+0x44>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dd2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009dd6:	f043 0320 	orr.w	r3, r3, #32
 8009dda:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
 8009de4:	2300      	movs	r3, #0
 8009de6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009dea:	2003      	movs	r0, #3
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8009dee:	f7fe fe4f 	bl	8008a90 <HAL_GetTick>
 8009df2:	1b80      	subs	r0, r0, r6
 8009df4:	4285      	cmp	r5, r0
 8009df6:	d2de      	bcs.n	8009db6 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 8009df8:	e7eb      	b.n	8009dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8009dfa:	2001      	movs	r0, #1
}
 8009dfc:	bd70      	pop	{r4, r5, r6, pc}

08009dfe <I2C_RequestMemoryWrite>:
{
 8009dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e00:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8009e06:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009e08:	9300      	str	r3, [sp, #0]
{
 8009e0a:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e10:	b2f2      	uxtb	r2, r6
 8009e12:	f7ff ff0f 	bl	8009c34 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8009e16:	9906      	ldr	r1, [sp, #24]
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f7ff ffc6 	bl	8009daa <I2C_WaitOnTXISFlagUntilTimeout>
 8009e1e:	b130      	cbz	r0, 8009e2e <I2C_RequestMemoryWrite+0x30>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e20:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d10f      	bne.n	8009e48 <I2C_RequestMemoryWrite+0x4a>
      return HAL_ERROR;
 8009e28:	2001      	movs	r0, #1
}
 8009e2a:	b002      	add	sp, #8
 8009e2c:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e2e:	2e01      	cmp	r6, #1
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	d10b      	bne.n	8009e4c <I2C_RequestMemoryWrite+0x4e>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8009e34:	b2ed      	uxtb	r5, r5
 8009e36:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2180      	movs	r1, #128	; 0x80
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7ff ff58 	bl	8009cf4 <I2C_WaitOnFlagUntilTimeout>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d0f0      	beq.n	8009e2a <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8009e48:	2003      	movs	r0, #3
 8009e4a:	e7ee      	b.n	8009e2a <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8009e4c:	0a2a      	lsrs	r2, r5, #8
 8009e4e:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8009e50:	9906      	ldr	r1, [sp, #24]
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff ffa9 	bl	8009daa <I2C_WaitOnTXISFlagUntilTimeout>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d1e1      	bne.n	8009e20 <I2C_RequestMemoryWrite+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	e7e9      	b.n	8009e34 <I2C_RequestMemoryWrite+0x36>

08009e60 <I2C_RequestMemoryRead>:
{
 8009e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e62:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8009e68:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e6a:	9300      	str	r3, [sp, #0]
{
 8009e6c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e6e:	2300      	movs	r3, #0
 8009e70:	b2f2      	uxtb	r2, r6
 8009e72:	f7ff fedf 	bl	8009c34 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8009e76:	9906      	ldr	r1, [sp, #24]
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f7ff ff96 	bl	8009daa <I2C_WaitOnTXISFlagUntilTimeout>
 8009e7e:	b130      	cbz	r0, 8009e8e <I2C_RequestMemoryRead+0x2e>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e80:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	d10f      	bne.n	8009ea8 <I2C_RequestMemoryRead+0x48>
      return HAL_ERROR;
 8009e88:	2001      	movs	r0, #1
}
 8009e8a:	b002      	add	sp, #8
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e8e:	2e01      	cmp	r6, #1
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	d10b      	bne.n	8009eac <I2C_RequestMemoryRead+0x4c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8009e94:	b2ed      	uxtb	r5, r5
 8009e96:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 8009e98:	9b06      	ldr	r3, [sp, #24]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2140      	movs	r1, #64	; 0x40
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f7ff ff28 	bl	8009cf4 <I2C_WaitOnFlagUntilTimeout>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d0f0      	beq.n	8009e8a <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 8009ea8:	2003      	movs	r0, #3
 8009eaa:	e7ee      	b.n	8009e8a <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8009eac:	0a2a      	lsrs	r2, r5, #8
 8009eae:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8009eb0:	9906      	ldr	r1, [sp, #24]
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f7ff ff79 	bl	8009daa <I2C_WaitOnTXISFlagUntilTimeout>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1e1      	bne.n	8009e80 <I2C_RequestMemoryRead+0x20>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	e7e9      	b.n	8009e94 <I2C_RequestMemoryRead+0x34>

08009ec0 <HAL_I2C_MspInit>:
 8009ec0:	4770      	bx	lr

08009ec2 <HAL_I2C_Init>:
{ 
 8009ec2:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d041      	beq.n	8009f4e <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8009eca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8009ece:	b90b      	cbnz	r3, 8009ed4 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 8009ed0:	f7ff fff6 	bl	8009ec0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	68e1      	ldr	r1, [r4, #12]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009ee6:	6862      	ldr	r2, [r4, #4]
 8009ee8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009eec:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ef4:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8009ef6:	68a2      	ldr	r2, [r4, #8]
 8009ef8:	b31a      	cbz	r2, 8009f42 <HAL_I2C_Init+0x80>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009efa:	2901      	cmp	r1, #1
 8009efc:	d11e      	bne.n	8009f3c <HAL_I2C_Init+0x7a>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f02:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f04:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009f06:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f08:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f10:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009f12:	6922      	ldr	r2, [r4, #16]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	69a1      	ldr	r1, [r4, #24]
 8009f18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f1c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009f1e:	6a21      	ldr	r1, [r4, #32]
 8009f20:	69e2      	ldr	r2, [r4, #28]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	f042 0201 	orr.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f2e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8009f30:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f32:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 8009f36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8009f3a:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009f40:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f42:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009f44:	bf04      	itt	eq
 8009f46:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8009f4a:	605a      	streq	r2, [r3, #4]
 8009f4c:	e7da      	b.n	8009f04 <HAL_I2C_Init+0x42>
    return HAL_ERROR;
 8009f4e:	2001      	movs	r0, #1
}
 8009f50:	bd10      	pop	{r4, pc}

08009f52 <HAL_I2C_MspDeInit>:
 8009f52:	4770      	bx	lr

08009f54 <HAL_I2C_DeInit>:
{
 8009f54:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 8009f56:	4604      	mov	r4, r0
 8009f58:	b188      	cbz	r0, 8009f7e <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 8009f5a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 8009f62:	6813      	ldr	r3, [r2, #0]
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8009f6a:	f7ff fff2 	bl	8009f52 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f6e:	2000      	movs	r0, #0
 8009f70:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 8009f74:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 8009f78:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  return HAL_OK;
 8009f7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009f7e:	2001      	movs	r0, #1
}
 8009f80:	bd10      	pop	{r4, pc}

08009f82 <HAL_I2C_Mem_Write>:
{
 8009f82:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 8009f86:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 8009f8a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8009f8e:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8009f92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 8009f96:	b2ed      	uxtb	r5, r5
 8009f98:	2d01      	cmp	r5, #1
{
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4689      	mov	r9, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 8009f9e:	f040 8087 	bne.w	800a0b0 <HAL_I2C_Mem_Write+0x12e>
    if((pData == NULL) || (Size == 0)) 
 8009fa2:	f1b8 0f00 	cmp.w	r8, #0
 8009fa6:	d103      	bne.n	8009fb0 <HAL_I2C_Mem_Write+0x2e>
      return  HAL_ERROR;                                    
 8009fa8:	2001      	movs	r0, #1
}
 8009faa:	b002      	add	sp, #8
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((pData == NULL) || (Size == 0)) 
 8009fb0:	2e00      	cmp	r6, #0
 8009fb2:	d0f9      	beq.n	8009fa8 <HAL_I2C_Mem_Write+0x26>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009fb4:	6807      	ldr	r7, [r0, #0]
 8009fb6:	69bf      	ldr	r7, [r7, #24]
 8009fb8:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 8009fbc:	d178      	bne.n	800a0b0 <HAL_I2C_Mem_Write+0x12e>
    __HAL_LOCK(hi2c);
 8009fbe:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 8009fc2:	f1be 0f01 	cmp.w	lr, #1
 8009fc6:	d073      	beq.n	800a0b0 <HAL_I2C_Mem_Write+0x12e>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8009fc8:	f04f 0e52 	mov.w	lr, #82	; 0x52
 8009fcc:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 8009fd0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fd4:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8009fd8:	f8cd a000 	str.w	sl, [sp]
 8009fdc:	f7ff ff0f 	bl	8009dfe <I2C_RequestMemoryWrite>
 8009fe0:	b138      	cbz	r0, 8009ff2 <HAL_I2C_Mem_Write+0x70>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fe2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 8009fe6:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d0dc      	beq.n	8009fa8 <HAL_I2C_Mem_Write+0x26>
          return HAL_TIMEOUT;
 8009fee:	2003      	movs	r0, #3
 8009ff0:	e7db      	b.n	8009faa <HAL_I2C_Mem_Write+0x28>
    if(Size > 255)
 8009ff2:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ff4:	9000      	str	r0, [sp, #0]
    if(Size > 255)
 8009ff6:	d911      	bls.n	800a01c <HAL_I2C_Mem_Write+0x9a>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	4649      	mov	r1, r9
 800a000:	4620      	mov	r0, r4
 800a002:	f7ff fe17 	bl	8009c34 <I2C_TransferConfig>
      Sizetmp = 255;
 800a006:	25ff      	movs	r5, #255	; 0xff
 800a008:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800a00c:	4651      	mov	r1, sl
 800a00e:	4620      	mov	r0, r4
 800a010:	f7ff fecb 	bl	8009daa <I2C_WaitOnTXISFlagUntilTimeout>
 800a014:	b158      	cbz	r0, 800a02e <HAL_I2C_Mem_Write+0xac>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a016:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a01a:	e7e6      	b.n	8009fea <HAL_I2C_Mem_Write+0x68>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a01c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a020:	b2f2      	uxtb	r2, r6
 800a022:	4649      	mov	r1, r9
 800a024:	4620      	mov	r0, r4
 800a026:	f7ff fe05 	bl	8009c34 <I2C_TransferConfig>
      Sizetmp = Size;
 800a02a:	4635      	mov	r5, r6
 800a02c:	e7ec      	b.n	800a008 <HAL_I2C_Mem_Write+0x86>
      hi2c->Instance->TXDR = (*pData++);
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800a034:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800a036:	3e01      	subs	r6, #1
      if((Sizetmp == 0)&&(Size!=0))
 800a038:	3d01      	subs	r5, #1
      Size--;
 800a03a:	b2b6      	uxth	r6, r6
      if((Sizetmp == 0)&&(Size!=0))
 800a03c:	d11d      	bne.n	800a07a <HAL_I2C_Mem_Write+0xf8>
 800a03e:	b1f6      	cbz	r6, 800a07e <HAL_I2C_Mem_Write+0xfc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a040:	4653      	mov	r3, sl
 800a042:	462a      	mov	r2, r5
 800a044:	2180      	movs	r1, #128	; 0x80
 800a046:	4620      	mov	r0, r4
 800a048:	f7ff fe54 	bl	8009cf4 <I2C_WaitOnFlagUntilTimeout>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d1ce      	bne.n	8009fee <HAL_I2C_Mem_Write+0x6c>
        if(Size > 255)
 800a050:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a052:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 800a054:	d908      	bls.n	800a068 <HAL_I2C_Mem_Write+0xe6>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a05a:	22ff      	movs	r2, #255	; 0xff
 800a05c:	4649      	mov	r1, r9
 800a05e:	4620      	mov	r0, r4
 800a060:	f7ff fde8 	bl	8009c34 <I2C_TransferConfig>
          Sizetmp = 255;
 800a064:	25ff      	movs	r5, #255	; 0xff
 800a066:	e7d1      	b.n	800a00c <HAL_I2C_Mem_Write+0x8a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a06c:	b2f2      	uxtb	r2, r6
 800a06e:	4649      	mov	r1, r9
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff fddf 	bl	8009c34 <I2C_TransferConfig>
          Sizetmp = Size;
 800a076:	4635      	mov	r5, r6
 800a078:	e7c8      	b.n	800a00c <HAL_I2C_Mem_Write+0x8a>
    }while(Size > 0);
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	d1c6      	bne.n	800a00c <HAL_I2C_Mem_Write+0x8a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a07e:	2119      	movs	r1, #25
 800a080:	4620      	mov	r0, r4
 800a082:	f7ff fe6a 	bl	8009d5a <I2C_WaitOnSTOPFlagUntilTimeout>
 800a086:	2800      	cmp	r0, #0
 800a088:	d1c5      	bne.n	800a016 <HAL_I2C_Mem_Write+0x94>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	2220      	movs	r2, #32
 800a08e:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a096:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a09a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a09e:	f022 0201 	bic.w	r2, r2, #1
 800a0a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a0aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a0ae:	e77c      	b.n	8009faa <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800a0b0:	2002      	movs	r0, #2
 800a0b2:	e77a      	b.n	8009faa <HAL_I2C_Mem_Write+0x28>

0800a0b4 <HAL_I2C_Mem_Read>:
{
 800a0b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a0b8:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
{
 800a0bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800a0c0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 800a0c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a0c8:	b2ed      	uxtb	r5, r5
 800a0ca:	2d01      	cmp	r5, #1
{
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4689      	mov	r9, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800a0d0:	f040 808b 	bne.w	800a1ea <HAL_I2C_Mem_Read+0x136>
    if((pData == NULL) || (Size == 0)) 
 800a0d4:	f1b8 0f00 	cmp.w	r8, #0
 800a0d8:	d103      	bne.n	800a0e2 <HAL_I2C_Mem_Read+0x2e>
      return  HAL_ERROR;                                    
 800a0da:	2001      	movs	r0, #1
}
 800a0dc:	b002      	add	sp, #8
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((pData == NULL) || (Size == 0)) 
 800a0e2:	2e00      	cmp	r6, #0
 800a0e4:	d0f9      	beq.n	800a0da <HAL_I2C_Mem_Read+0x26>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a0e6:	6807      	ldr	r7, [r0, #0]
 800a0e8:	69bf      	ldr	r7, [r7, #24]
 800a0ea:	f417 4700 	ands.w	r7, r7, #32768	; 0x8000
 800a0ee:	d17c      	bne.n	800a1ea <HAL_I2C_Mem_Read+0x136>
    __HAL_LOCK(hi2c);
 800a0f0:	f890 e034 	ldrb.w	lr, [r0, #52]	; 0x34
 800a0f4:	f1be 0f01 	cmp.w	lr, #1
 800a0f8:	d077      	beq.n	800a1ea <HAL_I2C_Mem_Read+0x136>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800a0fa:	f04f 0e62 	mov.w	lr, #98	; 0x62
 800a0fe:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800a102:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a106:	f880 7036 	strb.w	r7, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800a10a:	f8cd a000 	str.w	sl, [sp]
 800a10e:	f7ff fea7 	bl	8009e60 <I2C_RequestMemoryRead>
 800a112:	b138      	cbz	r0, 800a124 <HAL_I2C_Mem_Read+0x70>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a114:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800a118:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d0dc      	beq.n	800a0da <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 800a120:	2003      	movs	r0, #3
 800a122:	e7db      	b.n	800a0dc <HAL_I2C_Mem_Read+0x28>
 800a124:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    if(Size > 255)
 800a128:	2eff      	cmp	r6, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a12a:	9300      	str	r3, [sp, #0]
    if(Size > 255)
 800a12c:	d92e      	bls.n	800a18c <HAL_I2C_Mem_Read+0xd8>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a12e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a132:	22ff      	movs	r2, #255	; 0xff
 800a134:	4649      	mov	r1, r9
 800a136:	4620      	mov	r0, r4
 800a138:	f7ff fd7c 	bl	8009c34 <I2C_TransferConfig>
      Sizetmp = 255;
 800a13c:	25ff      	movs	r5, #255	; 0xff
 800a13e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800a142:	4653      	mov	r3, sl
 800a144:	2200      	movs	r2, #0
 800a146:	2104      	movs	r1, #4
 800a148:	4620      	mov	r0, r4
 800a14a:	f7ff fdd3 	bl	8009cf4 <I2C_WaitOnFlagUntilTimeout>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d1e6      	bne.n	800a120 <HAL_I2C_Mem_Read+0x6c>
      (*pData++) = hi2c->Instance->RXDR;
 800a152:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800a154:	3e01      	subs	r6, #1
      (*pData++) = hi2c->Instance->RXDR;
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	f808 3f01 	strb.w	r3, [r8, #1]!
      if((Sizetmp == 0)&&(Size!=0))
 800a15c:	3d01      	subs	r5, #1
      Size--;   
 800a15e:	b2b6      	uxth	r6, r6
      if((Sizetmp == 0)&&(Size!=0))
 800a160:	d126      	bne.n	800a1b0 <HAL_I2C_Mem_Read+0xfc>
 800a162:	b33e      	cbz	r6, 800a1b4 <HAL_I2C_Mem_Read+0x100>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800a164:	4653      	mov	r3, sl
 800a166:	462a      	mov	r2, r5
 800a168:	2180      	movs	r1, #128	; 0x80
 800a16a:	4620      	mov	r0, r4
 800a16c:	f7ff fdc2 	bl	8009cf4 <I2C_WaitOnFlagUntilTimeout>
 800a170:	2800      	cmp	r0, #0
 800a172:	d1d5      	bne.n	800a120 <HAL_I2C_Mem_Read+0x6c>
        if(Size > 255)
 800a174:	2eff      	cmp	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a176:	9500      	str	r5, [sp, #0]
        if(Size > 255)
 800a178:	d911      	bls.n	800a19e <HAL_I2C_Mem_Read+0xea>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a17a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a17e:	22ff      	movs	r2, #255	; 0xff
 800a180:	4649      	mov	r1, r9
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff fd56 	bl	8009c34 <I2C_TransferConfig>
          Sizetmp = 255;
 800a188:	25ff      	movs	r5, #255	; 0xff
 800a18a:	e7da      	b.n	800a142 <HAL_I2C_Mem_Read+0x8e>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a18c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a190:	b2f2      	uxtb	r2, r6
 800a192:	4649      	mov	r1, r9
 800a194:	4620      	mov	r0, r4
 800a196:	f7ff fd4d 	bl	8009c34 <I2C_TransferConfig>
      Sizetmp = Size;
 800a19a:	4635      	mov	r5, r6
 800a19c:	e7cf      	b.n	800a13e <HAL_I2C_Mem_Read+0x8a>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a19e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1a2:	b2f2      	uxtb	r2, r6
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f7ff fd44 	bl	8009c34 <I2C_TransferConfig>
          Sizetmp = Size;
 800a1ac:	4635      	mov	r5, r6
 800a1ae:	e7c8      	b.n	800a142 <HAL_I2C_Mem_Read+0x8e>
    }while(Size > 0);
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	d1c6      	bne.n	800a142 <HAL_I2C_Mem_Read+0x8e>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800a1b4:	2119      	movs	r1, #25
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7ff fdcf 	bl	8009d5a <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1bc:	b110      	cbz	r0, 800a1c4 <HAL_I2C_Mem_Read+0x110>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1be:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a1c2:	e7ab      	b.n	800a11c <HAL_I2C_Mem_Read+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a1d0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a1d4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a1d8:	f022 0201 	bic.w	r2, r2, #1
 800a1dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a1e4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800a1e8:	e778      	b.n	800a0dc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 800a1ea:	2002      	movs	r0, #2
 800a1ec:	e776      	b.n	800a0dc <HAL_I2C_Mem_Read+0x28>

0800a1ee <HAL_I2C_GetState>:
  return hi2c->State;
 800a1ee:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a1f2:	4770      	bx	lr

0800a1f4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1f4:	6803      	ldr	r3, [r0, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1fc:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1fe:	6842      	ldr	r2, [r0, #4]
 800a200:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800a204:	d10a      	bne.n	800a21c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800a206:	6882      	ldr	r2, [r0, #8]
 800a208:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a20c:	d002      	beq.n	800a214 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
 800a20e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a212:	d103      	bne.n	800a21c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a21a:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a21c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a21e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a222:	d107      	bne.n	800a234 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          __HAL_SPI_RESET_CRC(hspi);
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a232:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 800a234:	2301      	movs	r3, #1
 800a236:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a23a:	2300      	movs	r3, #0
 800a23c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }
  
  return HAL_OK;      
}
 800a240:	2003      	movs	r0, #3
 800a242:	4770      	bx	lr

0800a244 <SPI_WaitFlagStateUntilTimeout>:
{
 800a244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a248:	4605      	mov	r5, r0
 800a24a:	460f      	mov	r7, r1
 800a24c:	4616      	mov	r6, r2
 800a24e:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800a250:	f7fe fc1e 	bl	8008a90 <HAL_GetTick>
 800a254:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800a256:	682b      	ldr	r3, [r5, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	403a      	ands	r2, r7
 800a25c:	42b2      	cmp	r2, r6
 800a25e:	d102      	bne.n	800a266 <SPI_WaitFlagStateUntilTimeout+0x22>
}
 800a260:	2000      	movs	r0, #0
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800a266:	1c62      	adds	r2, r4, #1
 800a268:	d0f6      	beq.n	800a258 <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a26a:	b924      	cbnz	r4, 800a276 <SPI_WaitFlagStateUntilTimeout+0x32>
 800a26c:	4628      	mov	r0, r5
}
 800a26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	f7ff bfbf 	b.w	800a1f4 <SPI_WaitFifoStateUntilTimeout.part.1>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a276:	f7fe fc0b 	bl	8008a90 <HAL_GetTick>
 800a27a:	eba0 0008 	sub.w	r0, r0, r8
 800a27e:	4284      	cmp	r4, r0
 800a280:	d2e9      	bcs.n	800a256 <SPI_WaitFlagStateUntilTimeout+0x12>
 800a282:	e7f3      	b.n	800a26c <SPI_WaitFlagStateUntilTimeout+0x28>

0800a284 <SPI_WaitFifoStateUntilTimeout>:
{
 800a284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a288:	4607      	mov	r7, r0
 800a28a:	460e      	mov	r6, r1
 800a28c:	4615      	mov	r5, r2
 800a28e:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800a290:	f7fe fbfe 	bl	8008a90 <HAL_GetTick>
 800a294:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	688a      	ldr	r2, [r1, #8]
 800a29a:	4032      	ands	r2, r6
 800a29c:	42aa      	cmp	r2, r5
 800a29e:	d101      	bne.n	800a2a4 <SPI_WaitFifoStateUntilTimeout+0x20>
  return HAL_OK;      
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	e00d      	b.n	800a2c0 <SPI_WaitFifoStateUntilTimeout+0x3c>
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a2a4:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800a2a8:	d104      	bne.n	800a2b4 <SPI_WaitFifoStateUntilTimeout+0x30>
 800a2aa:	b91d      	cbnz	r5, 800a2b4 <SPI_WaitFifoStateUntilTimeout+0x30>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800a2ac:	7b0b      	ldrb	r3, [r1, #12]
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800a2b4:	1c63      	adds	r3, r4, #1
 800a2b6:	d0ef      	beq.n	800a298 <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a2b8:	b92c      	cbnz	r4, 800a2c6 <SPI_WaitFifoStateUntilTimeout+0x42>
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	f7ff ff9a 	bl	800a1f4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800a2c0:	b002      	add	sp, #8
 800a2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a2c6:	f7fe fbe3 	bl	8008a90 <HAL_GetTick>
 800a2ca:	eba0 0008 	sub.w	r0, r0, r8
 800a2ce:	4284      	cmp	r4, r0
 800a2d0:	d2e1      	bcs.n	800a296 <SPI_WaitFifoStateUntilTimeout+0x12>
 800a2d2:	e7f2      	b.n	800a2ba <SPI_WaitFifoStateUntilTimeout+0x36>

0800a2d4 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800a2d4:	b538      	push	{r3, r4, r5, lr}
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	460b      	mov	r3, r1
{
 800a2da:	460d      	mov	r5, r1
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a2dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800a2e0:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800a2e2:	f7ff ffcf 	bl	800a284 <SPI_WaitFifoStateUntilTimeout>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	b138      	cbz	r0, 800a2fa <SPI_EndRxTxTransaction+0x26>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800a2ea:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800a2ee:	f043 0320 	orr.w	r3, r3, #32
 800a2f2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800a2f6:	2003      	movs	r0, #3
 800a2f8:	e00f      	b.n	800a31a <SPI_EndRxTxTransaction+0x46>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	2180      	movs	r1, #128	; 0x80
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff ffa0 	bl	800a244 <SPI_WaitFlagStateUntilTimeout>
 800a304:	4602      	mov	r2, r0
 800a306:	2800      	cmp	r0, #0
 800a308:	d1ef      	bne.n	800a2ea <SPI_EndRxTxTransaction+0x16>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK) 
 800a30a:	462b      	mov	r3, r5
 800a30c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a310:	4620      	mov	r0, r4
 800a312:	f7ff ffb7 	bl	800a284 <SPI_WaitFifoStateUntilTimeout>
 800a316:	2800      	cmp	r0, #0
 800a318:	d1e7      	bne.n	800a2ea <SPI_EndRxTxTransaction+0x16>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800a31a:	bd38      	pop	{r3, r4, r5, pc}

0800a31c <HAL_SPI_MspInit>:
 800a31c:	4770      	bx	lr

0800a31e <HAL_SPI_Init>:
{
 800a31e:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800a320:	4604      	mov	r4, r0
 800a322:	2800      	cmp	r0, #0
 800a324:	d04b      	beq.n	800a3be <HAL_SPI_Init+0xa0>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a326:	2302      	movs	r3, #2
 800a328:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800a32c:	f7ff fff6 	bl	800a31c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a330:	6821      	ldr	r1, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a332:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800a334:	680b      	ldr	r3, [r1, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a336:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800a33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33e:	600b      	str	r3, [r1, #0]
 800a340:	f04f 0300 	mov.w	r3, #0
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a344:	d938      	bls.n	800a3b8 <HAL_SPI_Init+0x9a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a346:	4618      	mov	r0, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800a348:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800a34c:	bf18      	it	ne
 800a34e:	62a3      	strne	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a350:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a352:	b92b      	cbnz	r3, 800a360 <HAL_SPI_Init+0x42>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a354:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a358:	bf8c      	ite	hi
 800a35a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a35c:	2301      	movls	r3, #1
 800a35e:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a360:	68a6      	ldr	r6, [r4, #8]
 800a362:	6863      	ldr	r3, [r4, #4]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a364:	69a5      	ldr	r5, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a366:	4333      	orrs	r3, r6
 800a368:	6926      	ldr	r6, [r4, #16]
 800a36a:	4333      	orrs	r3, r6
 800a36c:	6966      	ldr	r6, [r4, #20]
 800a36e:	4333      	orrs	r3, r6
 800a370:	69e6      	ldr	r6, [r4, #28]
 800a372:	4333      	orrs	r3, r6
 800a374:	6a26      	ldr	r6, [r4, #32]
 800a376:	4333      	orrs	r3, r6
 800a378:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a37a:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800a37c:	f405 7600 	and.w	r6, r5, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800a380:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800a382:	600b      	str	r3, [r1, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a384:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a386:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800a388:	bf02      	ittt	eq
 800a38a:	680b      	ldreq	r3, [r1, #0]
 800a38c:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800a390:	600b      	streq	r3, [r1, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a394:	431a      	orrs	r2, r3
 800a396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a398:	0c2d      	lsrs	r5, r5, #16
 800a39a:	431a      	orrs	r2, r3
 800a39c:	f005 0504 	and.w	r5, r5, #4
 800a3a0:	432a      	orrs	r2, r5
                         hspi->Init.DataSize ) | frxth;
 800a3a2:	4302      	orrs	r2, r0
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800a3a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800a3a6:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3a8:	2000      	movs	r0, #0
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800a3aa:	610b      	str	r3, [r1, #16]
  hspi->State= HAL_SPI_STATE_READY;
 800a3ac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3ae:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800a3b2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a3b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a3bc:	e7c6      	b.n	800a34c <HAL_SPI_Init+0x2e>
    return HAL_ERROR;
 800a3be:	2001      	movs	r0, #1
}
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}

0800a3c2 <HAL_SPI_MspDeInit>:
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_SPI_DeInit>:
{
 800a3c4:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	b188      	cbz	r0, 800a3ee <HAL_SPI_DeInit+0x2a>
  __HAL_SPI_DISABLE(hspi);
 800a3ca:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800a3d2:	6813      	ldr	r3, [r2, #0]
 800a3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d8:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800a3da:	f7ff fff2 	bl	800a3c2 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3de:	2000      	movs	r0, #0
 800a3e0:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 800a3e4:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a3e8:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 800a3ec:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800a3ee:	2001      	movs	r0, #1
}
 800a3f0:	bd10      	pop	{r4, pc}

0800a3f2 <HAL_SPI_TransmitReceive>:
{
 800a3f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a3f6:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
{
 800a3fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800a3fc:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a400:	2d01      	cmp	r5, #1
{
 800a402:	4604      	mov	r4, r0
 800a404:	4689      	mov	r9, r1
 800a406:	4692      	mov	sl, r2
 800a408:	4698      	mov	r8, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800a40a:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800a40e:	d004      	beq.n	800a41a <HAL_SPI_TransmitReceive+0x28>
    return HAL_BUSY;
 800a410:	2502      	movs	r5, #2
}
 800a412:	4628      	mov	r0, r5
 800a414:	b003      	add	sp, #12
 800a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d0f9      	beq.n	800a412 <HAL_SPI_TransmitReceive+0x20>
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d0f7      	beq.n	800a412 <HAL_SPI_TransmitReceive+0x20>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0f5      	beq.n	800a412 <HAL_SPI_TransmitReceive+0x20>
  tickstart = HAL_GetTick();
 800a426:	f7fe fb33 	bl	8008a90 <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800a42a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800a42e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800a430:	4607      	mov	r7, r0
  __HAL_LOCK(hspi); 
 800a432:	d0ed      	beq.n	800a410 <HAL_SPI_TransmitReceive+0x1e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a434:	2305      	movs	r3, #5
 800a436:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a43a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  __HAL_LOCK(hspi); 
 800a43c:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a444:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->pRxBuffPtr  = pRxData;
 800a448:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a44c:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a450:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800a454:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a458:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800a45c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
 800a460:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a462:	d107      	bne.n	800a474 <HAL_SPI_TransmitReceive+0x82>
    __HAL_SPI_RESET_CRC(hspi);
 800a464:	6813      	ldr	r3, [r2, #0]
 800a466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	6813      	ldr	r3, [r2, #0]
 800a46e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a472:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800a474:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a476:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800a478:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a47c:	d802      	bhi.n	800a484 <HAL_SPI_TransmitReceive+0x92>
 800a47e:	f1b8 0f01 	cmp.w	r8, #1
 800a482:	d915      	bls.n	800a4b0 <HAL_SPI_TransmitReceive+0xbe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a488:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800a48e:	bf5e      	ittt	pl
 800a490:	6813      	ldrpl	r3, [r2, #0]
 800a492:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800a496:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a498:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a49c:	d83f      	bhi.n	800a51e <HAL_SPI_TransmitReceive+0x12c>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800a49e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d178      	bne.n	800a596 <HAL_SPI_TransmitReceive+0x1a4>
 800a4a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f040 808f 	bne.w	800a5cc <HAL_SPI_TransmitReceive+0x1da>
 800a4ae:	e03d      	b.n	800a52c <HAL_SPI_TransmitReceive+0x13a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4b4:	e7e8      	b.n	800a488 <HAL_SPI_TransmitReceive+0x96>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	6891      	ldr	r1, [r2, #8]
 800a4ba:	0789      	lsls	r1, r1, #30
 800a4bc:	d510      	bpl.n	800a4e0 <HAL_SPI_TransmitReceive+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a4c0:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4c2:	f831 5b02 	ldrh.w	r5, [r1], #2
 800a4c6:	60d5      	str	r5, [r2, #12]
        hspi->TxXferCount--;
 800a4c8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4ca:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800a4cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800a4ce:	b93b      	cbnz	r3, 800a4e0 <HAL_SPI_TransmitReceive+0xee>
 800a4d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a4d6:	bf02      	ittt	eq
 800a4d8:	6813      	ldreq	r3, [r2, #0]
 800a4da:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800a4de:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800a4e0:	b168      	cbz	r0, 800a4fe <HAL_SPI_TransmitReceive+0x10c>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	07d2      	lsls	r2, r2, #31
 800a4e8:	d509      	bpl.n	800a4fe <HAL_SPI_TransmitReceive+0x10c>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4ee:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4f2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800a4f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800a4fe:	1c75      	adds	r5, r6, #1
 800a500:	d00d      	beq.n	800a51e <HAL_SPI_TransmitReceive+0x12c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800a502:	b93e      	cbnz	r6, 800a514 <HAL_SPI_TransmitReceive+0x122>
          hspi->State = HAL_SPI_STATE_READY;
 800a504:	2301      	movs	r3, #1
 800a506:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 800a50a:	2300      	movs	r3, #0
 800a50c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800a510:	2503      	movs	r5, #3
 800a512:	e77e      	b.n	800a412 <HAL_SPI_TransmitReceive+0x20>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800a514:	f7fe fabc 	bl	8008a90 <HAL_GetTick>
 800a518:	1bc0      	subs	r0, r0, r7
 800a51a:	4286      	cmp	r6, r0
 800a51c:	d3f2      	bcc.n	800a504 <HAL_SPI_TransmitReceive+0x112>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800a51e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a520:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1c6      	bne.n	800a4b6 <HAL_SPI_TransmitReceive+0xc4>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d1da      	bne.n	800a4e2 <HAL_SPI_TransmitReceive+0xf0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800a52c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a52e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a532:	d115      	bne.n	800a560 <HAL_SPI_TransmitReceive+0x16e>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800a534:	2202      	movs	r2, #2
 800a536:	4633      	mov	r3, r6
 800a538:	4611      	mov	r1, r2
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff fe82 	bl	800a244 <SPI_WaitFlagStateUntilTimeout>
 800a540:	b128      	cbz	r0, 800a54e <HAL_SPI_TransmitReceive+0x15c>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800a542:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800a546:	f043 0302 	orr.w	r3, r3, #2
 800a54a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	d16f      	bne.n	800a638 <HAL_SPI_TransmitReceive+0x246>
      tmpreg = hspi->Instance->DR;
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800a55c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800a560:	4631      	mov	r1, r6
 800a562:	4620      	mov	r0, r4
 800a564:	f7ff feb6 	bl	800a2d4 <SPI_EndRxTxTransaction>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1d1      	bne.n	800a510 <HAL_SPI_TransmitReceive+0x11e>
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800a56c:	6825      	ldr	r5, [r4, #0]
 800a56e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800a572:	68a9      	ldr	r1, [r5, #8]
  hspi->State = HAL_SPI_STATE_READY;
 800a574:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800a576:	f011 0110 	ands.w	r1, r1, #16
  hspi->State = HAL_SPI_STATE_READY;
 800a57a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800a57e:	d070      	beq.n	800a662 <HAL_SPI_TransmitReceive+0x270>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800a580:	f042 0202 	orr.w	r2, r2, #2
 800a584:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a588:	f06f 0210 	mvn.w	r2, #16
 800a58c:	60aa      	str	r2, [r5, #8]
    __HAL_UNLOCK(hspi);
 800a58e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800a592:	461d      	mov	r5, r3
 800a594:	e73d      	b.n	800a412 <HAL_SPI_TransmitReceive+0x20>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800a596:	6821      	ldr	r1, [r4, #0]
 800a598:	688b      	ldr	r3, [r1, #8]
 800a59a:	0798      	lsls	r0, r3, #30
 800a59c:	d513      	bpl.n	800a5c6 <HAL_SPI_TransmitReceive+0x1d4>
        if(hspi->TxXferCount > 2)
 800a59e:	2a02      	cmp	r2, #2
 800a5a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5a2:	d937      	bls.n	800a614 <HAL_SPI_TransmitReceive+0x222>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800a5a4:	f833 0b02 	ldrh.w	r0, [r3], #2
 800a5a8:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800a5aa:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5ac:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800a5ae:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800a5b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a5b2:	b943      	cbnz	r3, 800a5c6 <HAL_SPI_TransmitReceive+0x1d4>
 800a5b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800a5ba:	bf01      	itttt	eq
 800a5bc:	6822      	ldreq	r2, [r4, #0]
 800a5be:	6813      	ldreq	r3, [r2, #0]
 800a5c0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800a5c4:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800a5c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a5ca:	b1b3      	cbz	r3, 800a5fa <HAL_SPI_TransmitReceive+0x208>
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	6891      	ldr	r1, [r2, #8]
 800a5d0:	07c9      	lsls	r1, r1, #31
 800a5d2:	d512      	bpl.n	800a5fa <HAL_SPI_TransmitReceive+0x208>
        if(hspi->RxXferCount > 1)
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5d8:	d924      	bls.n	800a624 <HAL_SPI_TransmitReceive+0x232>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a5da:	68d1      	ldr	r1, [r2, #12]
 800a5dc:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5e0:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800a5e2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a5e6:	3b02      	subs	r3, #2
 800a5e8:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800a5ea:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800a5ec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800a5f0:	d803      	bhi.n	800a5fa <HAL_SPI_TransmitReceive+0x208>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a5f2:	6853      	ldr	r3, [r2, #4]
 800a5f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5f8:	6053      	str	r3, [r2, #4]
      if(Timeout != HAL_MAX_DELAY)
 800a5fa:	1c73      	adds	r3, r6, #1
 800a5fc:	f43f af4f 	beq.w	800a49e <HAL_SPI_TransmitReceive+0xac>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a600:	2e00      	cmp	r6, #0
 800a602:	f43f af7f 	beq.w	800a504 <HAL_SPI_TransmitReceive+0x112>
 800a606:	f7fe fa43 	bl	8008a90 <HAL_GetTick>
 800a60a:	1bc0      	subs	r0, r0, r7
 800a60c:	4286      	cmp	r6, r0
 800a60e:	f4bf af46 	bcs.w	800a49e <HAL_SPI_TransmitReceive+0xac>
 800a612:	e777      	b.n	800a504 <HAL_SPI_TransmitReceive+0x112>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	63a2      	str	r2, [r4, #56]	; 0x38
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800a61c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800a61e:	3b01      	subs	r3, #1
 800a620:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a622:	e7c5      	b.n	800a5b0 <HAL_SPI_TransmitReceive+0x1be>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800a624:	1c59      	adds	r1, r3, #1
 800a626:	6421      	str	r1, [r4, #64]	; 0x40
 800a628:	7b12      	ldrb	r2, [r2, #12]
 800a62a:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800a62c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800a630:	3b01      	subs	r3, #1
 800a632:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800a636:	e7e0      	b.n	800a5fa <HAL_SPI_TransmitReceive+0x208>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a638:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800a63a:	7b1b      	ldrb	r3, [r3, #12]
 800a63c:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a640:	2a02      	cmp	r2, #2
 800a642:	d18d      	bne.n	800a560 <HAL_SPI_TransmitReceive+0x16e>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800a644:	4633      	mov	r3, r6
 800a646:	4611      	mov	r1, r2
 800a648:	4620      	mov	r0, r4
 800a64a:	f7ff fdfb 	bl	800a244 <SPI_WaitFlagStateUntilTimeout>
 800a64e:	b128      	cbz	r0, 800a65c <HAL_SPI_TransmitReceive+0x26a>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800a650:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800a654:	f043 0302 	orr.w	r3, r3, #2
 800a658:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	7b1b      	ldrb	r3, [r3, #12]
 800a660:	e77c      	b.n	800a55c <HAL_SPI_TransmitReceive+0x16a>
    return HAL_BUSY;
 800a662:	1c15      	adds	r5, r2, #0
  __HAL_UNLOCK(hspi);
 800a664:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800a668:	bf18      	it	ne
 800a66a:	2501      	movne	r5, #1
 800a66c:	e6d1      	b.n	800a412 <HAL_SPI_TransmitReceive+0x20>

0800a66e <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800a66e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800a672:	4770      	bx	lr

0800a674 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a674:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a676:	b180      	cbz	r0, 800a69a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a678:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a67c:	b113      	cbz	r3, 800a684 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a684:	b109      	cbz	r1, 800a68a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800a686:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800a690:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a692:	f000 fc6b 	bl	800af6c <USBD_LL_Init>
  
  return USBD_OK; 
 800a696:	2000      	movs	r0, #0
 800a698:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800a69a:	2002      	movs	r0, #2
}
 800a69c:	bd08      	pop	{r3, pc}

0800a69e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800a69e:	b119      	cbz	r1, 800a6a8 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800a6a0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800a6a8:	2002      	movs	r0, #2
  }
  
  return status;
}
 800a6aa:	4770      	bx	lr

0800a6ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a6ac:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800a6ae:	f000 fc9b 	bl	800afe8 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	bd08      	pop	{r3, pc}

0800a6b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6b6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800a6b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a6bc:	b90b      	cbnz	r3, 800a6c2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a6be:	2002      	movs	r0, #2
 800a6c0:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4798      	blx	r3
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d1f9      	bne.n	800a6be <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800a6ca:	bd08      	pop	{r3, pc}

0800a6cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a6cc:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800a6ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4798      	blx	r3
  return USBD_OK;
}
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	bd08      	pop	{r3, pc}

0800a6da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6da:	b538      	push	{r3, r4, r5, lr}
 800a6dc:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6de:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 fa3f 	bl	800ab66 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800a6e8:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800a6ea:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800a6ee:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800a6f2:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800a6f6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800a6fa:	f001 031f 	and.w	r3, r1, #31
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d00e      	beq.n	800a720 <USBD_LL_SetupStage+0x46>
 800a702:	d307      	bcc.n	800a714 <USBD_LL_SetupStage+0x3a>
 800a704:	2b02      	cmp	r3, #2
 800a706:	d010      	beq.n	800a72a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800a708:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 fc83 	bl	800b018 <USBD_LL_StallEP>
    break;
 800a712:	e003      	b.n	800a71c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800a714:	4629      	mov	r1, r5
 800a716:	4620      	mov	r0, r4
 800a718:	f000 f8be 	bl	800a898 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800a71c:	2000      	movs	r0, #0
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800a720:	4629      	mov	r1, r5
 800a722:	4620      	mov	r0, r4
 800a724:	f000 f9b2 	bl	800aa8c <USBD_StdItfReq>
    break;
 800a728:	e7f8      	b.n	800a71c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800a72a:	4629      	mov	r1, r5
 800a72c:	4620      	mov	r0, r4
 800a72e:	f000 f9c5 	bl	800aabc <USBD_StdEPReq>
    break;
 800a732:	e7f3      	b.n	800a71c <USBD_LL_SetupStage+0x42>

0800a734 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	4604      	mov	r4, r0
 800a738:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800a73a:	bb11      	cbnz	r1, 800a782 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a73c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800a740:	2b03      	cmp	r3, #3
 800a742:	d10f      	bne.n	800a764 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 800a744:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800a748:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d90b      	bls.n	800a768 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800a750:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800a752:	429a      	cmp	r2, r3
 800a754:	bf28      	it	cs
 800a756:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800a758:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800a75c:	b292      	uxth	r2, r2
 800a75e:	4629      	mov	r1, r5
 800a760:	f000 fa55 	bl	800ac0e <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800a764:	2000      	movs	r0, #0
 800a766:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a768:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	b123      	cbz	r3, 800a77a <USBD_LL_DataOutStage+0x46>
 800a770:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800a774:	2a03      	cmp	r2, #3
 800a776:	d100      	bne.n	800a77a <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800a778:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fa4f 	bl	800ac1e <USBD_CtlSendStatus>
 800a780:	e7f0      	b.n	800a764 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 800a782:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0eb      	beq.n	800a764 <USBD_LL_DataOutStage+0x30>
 800a78c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800a790:	2a03      	cmp	r2, #3
 800a792:	d1e7      	bne.n	800a764 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800a794:	4798      	blx	r3
 800a796:	e7e5      	b.n	800a764 <USBD_LL_DataOutStage+0x30>

0800a798 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4604      	mov	r4, r0
 800a79c:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800a79e:	bbb1      	cbnz	r1, 800a80e <USBD_LL_DataInStage+0x76>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7a0:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d109      	bne.n	800a7bc <USBD_LL_DataInStage+0x24>
    {
      if(pep->rem_length > pep->maxpacket)
 800a7a8:	69c3      	ldr	r3, [r0, #28]
 800a7aa:	6a02      	ldr	r2, [r0, #32]
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d90e      	bls.n	800a7ce <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -=  pep->maxpacket;
 800a7b0:	1a9a      	subs	r2, r3, r2
 800a7b2:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	b292      	uxth	r2, r2
 800a7b8:	f000 fa12 	bl	800abe0 <USBD_CtlContinueSendData>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800a7bc:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d102      	bne.n	800a7ca <USBD_LL_DataInStage+0x32>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	bd38      	pop	{r3, r4, r5, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800a7ce:	6983      	ldr	r3, [r0, #24]
 800a7d0:	fbb3 f5f2 	udiv	r5, r3, r2
 800a7d4:	fb02 3515 	mls	r5, r2, r5, r3
 800a7d8:	b95d      	cbnz	r5, 800a7f2 <USBD_LL_DataInStage+0x5a>
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d809      	bhi.n	800a7f2 <USBD_LL_DataInStage+0x5a>
           (pep->total_length >= pep->maxpacket) &&
 800a7de:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d205      	bcs.n	800a7f2 <USBD_LL_DataInStage+0x5a>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800a7e6:	462a      	mov	r2, r5
 800a7e8:	f000 f9fa 	bl	800abe0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800a7ec:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800a7f0:	e7e4      	b.n	800a7bc <USBD_LL_DataInStage+0x24>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a7f2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	b12b      	cbz	r3, 800a806 <USBD_LL_DataInStage+0x6e>
 800a7fa:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800a7fe:	2a03      	cmp	r2, #3
 800a800:	d101      	bne.n	800a806 <USBD_LL_DataInStage+0x6e>
            pdev->pClass->EP0_TxSent(pdev); 
 800a802:	4620      	mov	r0, r4
 800a804:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800a806:	4620      	mov	r0, r4
 800a808:	f000 fa14 	bl	800ac34 <USBD_CtlReceiveStatus>
 800a80c:	e7d6      	b.n	800a7bc <USBD_LL_DataInStage+0x24>
  else if((pdev->pClass->DataIn != NULL)&& 
 800a80e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0d8      	beq.n	800a7ca <USBD_LL_DataInStage+0x32>
 800a818:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800a81c:	2a03      	cmp	r2, #3
 800a81e:	d1d4      	bne.n	800a7ca <USBD_LL_DataInStage+0x32>
    pdev->pClass->DataIn(pdev, epnum); 
 800a820:	4798      	blx	r3
 800a822:	e7d2      	b.n	800a7ca <USBD_LL_DataInStage+0x32>

0800a824 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a824:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800a826:	2200      	movs	r2, #0
{
 800a828:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800a82a:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a82c:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800a82e:	2340      	movs	r3, #64	; 0x40
 800a830:	f000 fbe1 	bl	800aff6 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800a834:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a836:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800a83a:	2200      	movs	r2, #0
 800a83c:	2180      	movs	r1, #128	; 0x80
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 fbd9 	bl	800aff6 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a844:	2301      	movs	r3, #1
 800a846:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800a84a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a84e:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800a850:	b12b      	cbz	r3, 800a85e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800a852:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800a856:	7921      	ldrb	r1, [r4, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	4620      	mov	r0, r4
 800a85c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800a85e:	2000      	movs	r0, #0
 800a860:	bd38      	pop	{r3, r4, r5, pc}

0800a862 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a862:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800a864:	2000      	movs	r0, #0
 800a866:	4770      	bx	lr

0800a868 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a868:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a86a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800a86e:	2a03      	cmp	r2, #3
 800a870:	d104      	bne.n	800a87c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800a872:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	b103      	cbz	r3, 800a87c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800a87a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800a87c:	2000      	movs	r0, #0
 800a87e:	bd08      	pop	{r3, pc}

0800a880 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800a880:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800a882:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800a884:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800a886:	f000 fbc7 	bl	800b018 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800a88a:	4620      	mov	r0, r4
 800a88c:	2100      	movs	r1, #0
}
 800a88e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800a892:	f000 bbc1 	b.w	800b018 <USBD_LL_StallEP>
	...

0800a898 <USBD_StdDevReq>:
{
 800a898:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800a89a:	784b      	ldrb	r3, [r1, #1]
{
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 800a8a0:	2b09      	cmp	r3, #9
 800a8a2:	d879      	bhi.n	800a998 <USBD_StdDevReq+0x100>
 800a8a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a8a8:	00e500c9 	.word	0x00e500c9
 800a8ac:	00d90078 	.word	0x00d90078
 800a8b0:	006d0078 	.word	0x006d0078
 800a8b4:	0078000a 	.word	0x0078000a
 800a8b8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800a8bc:	884b      	ldrh	r3, [r1, #2]
 800a8be:	0a1a      	lsrs	r2, r3, #8
 800a8c0:	3a01      	subs	r2, #1
 800a8c2:	2a06      	cmp	r2, #6
 800a8c4:	d868      	bhi.n	800a998 <USBD_StdDevReq+0x100>
 800a8c6:	e8df f002 	tbb	[pc, r2]
 800a8ca:	1c04      	.short	0x1c04
 800a8cc:	49676729 	.word	0x49676729
 800a8d0:	52          	.byte	0x52
 800a8d1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8d2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a8d6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800a8d8:	7c20      	ldrb	r0, [r4, #16]
 800a8da:	f10d 0106 	add.w	r1, sp, #6
 800a8de:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800a8e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a8e4:	2a00      	cmp	r2, #0
 800a8e6:	d067      	beq.n	800a9b8 <USBD_StdDevReq+0x120>
 800a8e8:	88eb      	ldrh	r3, [r5, #6]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d064      	beq.n	800a9b8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	bf28      	it	cs
 800a8f2:	461a      	movcs	r2, r3
 800a8f4:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800a8f8:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 f963 	bl	800abc6 <USBD_CtlSendData>
 800a900:	e05a      	b.n	800a9b8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800a902:	7c02      	ldrb	r2, [r0, #16]
 800a904:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a908:	b932      	cbnz	r2, 800a918 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a90c:	f10d 0006 	add.w	r0, sp, #6
 800a910:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a912:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a914:	7043      	strb	r3, [r0, #1]
 800a916:	e7e3      	b.n	800a8e0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91a:	e7f7      	b.n	800a90c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b05      	cmp	r3, #5
 800a920:	d83a      	bhi.n	800a998 <USBD_StdDevReq+0x100>
 800a922:	e8df f003 	tbb	[pc, r3]
 800a926:	0703      	.short	0x0703
 800a928:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800a92c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	e7d1      	b.n	800a8d8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a934:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	e7cd      	b.n	800a8d8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a93c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	e7c9      	b.n	800a8d8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a944:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	e7c5      	b.n	800a8d8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a94c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	e7c1      	b.n	800a8d8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a954:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	e7bd      	b.n	800a8d8 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800a95c:	7c03      	ldrb	r3, [r0, #16]
 800a95e:	b9db      	cbnz	r3, 800a998 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a960:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a964:	f10d 0006 	add.w	r0, sp, #6
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	4798      	blx	r3
 800a96c:	e7b8      	b.n	800a8e0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800a96e:	7c03      	ldrb	r3, [r0, #16]
 800a970:	b993      	cbnz	r3, 800a998 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a972:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800a976:	f10d 0006 	add.w	r0, sp, #6
 800a97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a97e:	2307      	movs	r3, #7
 800a980:	e7c8      	b.n	800a914 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800a982:	888b      	ldrh	r3, [r1, #4]
 800a984:	b943      	cbnz	r3, 800a998 <USBD_StdDevReq+0x100>
 800a986:	88cb      	ldrh	r3, [r1, #6]
 800a988:	b933      	cbnz	r3, 800a998 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800a98a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800a98e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800a990:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800a992:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800a996:	d103      	bne.n	800a9a0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 800a998:	4620      	mov	r0, r4
 800a99a:	f7ff ff71 	bl	800a880 <USBD_CtlError.constprop.0>
    break;
 800a99e:	e00b      	b.n	800a9b8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 800a9a0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	f000 fb58 	bl	800b05a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f937 	bl	800ac1e <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800a9b0:	b12d      	cbz	r5, 800a9be <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800a9b2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800a9b4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	b003      	add	sp, #12
 800a9bc:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e7f8      	b.n	800a9b4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800a9c2:	7889      	ldrb	r1, [r1, #2]
 800a9c4:	4d30      	ldr	r5, [pc, #192]	; (800aa88 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800a9c6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800a9c8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800a9ca:	d8e5      	bhi.n	800a998 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800a9cc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d00c      	beq.n	800a9ee <USBD_StdDevReq+0x156>
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d1df      	bne.n	800a998 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 800a9d8:	b9b1      	cbnz	r1, 800aa08 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9da:	2302      	movs	r3, #2
 800a9dc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800a9e0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800a9e2:	f7ff fe73 	bl	800a6cc <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f919 	bl	800ac1e <USBD_CtlSendStatus>
 800a9ec:	e7e4      	b.n	800a9b8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	d0f9      	beq.n	800a9e6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800a9f2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9f4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800a9f6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9f8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f7ff fe5a 	bl	800a6b6 <USBD_SetClassConfig>
 800aa02:	2802      	cmp	r0, #2
 800aa04:	d1ef      	bne.n	800a9e6 <USBD_StdDevReq+0x14e>
 800aa06:	e7c7      	b.n	800a998 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 800aa08:	6841      	ldr	r1, [r0, #4]
 800aa0a:	2901      	cmp	r1, #1
 800aa0c:	d0eb      	beq.n	800a9e6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800aa0e:	b2c9      	uxtb	r1, r1
 800aa10:	f7ff fe5c 	bl	800a6cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa14:	7829      	ldrb	r1, [r5, #0]
 800aa16:	6061      	str	r1, [r4, #4]
 800aa18:	e7f0      	b.n	800a9fc <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800aa1a:	88ca      	ldrh	r2, [r1, #6]
 800aa1c:	2a01      	cmp	r2, #1
 800aa1e:	d1bb      	bne.n	800a998 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 800aa20:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d003      	beq.n	800aa30 <USBD_StdDevReq+0x198>
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d1b5      	bne.n	800a998 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800aa2c:	1d01      	adds	r1, r0, #4
 800aa2e:	e764      	b.n	800a8fa <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800aa30:	4601      	mov	r1, r0
 800aa32:	2300      	movs	r3, #0
 800aa34:	f841 3f08 	str.w	r3, [r1, #8]!
 800aa38:	e75f      	b.n	800a8fa <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800aa3a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800aa3e:	3b02      	subs	r3, #2
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d8a9      	bhi.n	800a998 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800aa44:	2301      	movs	r3, #1
 800aa46:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800aa48:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800aa4c:	b10b      	cbz	r3, 800aa52 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800aa4e:	2303      	movs	r3, #3
 800aa50:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800aa52:	2202      	movs	r2, #2
 800aa54:	f104 010c 	add.w	r1, r4, #12
 800aa58:	e74f      	b.n	800a8fa <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa5a:	884b      	ldrh	r3, [r1, #2]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d1ab      	bne.n	800a9b8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800aa60:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800aa64:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800aa68:	4629      	mov	r1, r5
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4798      	blx	r3
 800aa70:	e7b9      	b.n	800a9e6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800aa72:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800aa76:	3b02      	subs	r3, #2
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d88d      	bhi.n	800a998 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800aa7c:	884b      	ldrh	r3, [r1, #2]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d19a      	bne.n	800a9b8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800aa82:	2300      	movs	r3, #0
 800aa84:	e7ec      	b.n	800aa60 <USBD_StdDevReq+0x1c8>
 800aa86:	bf00      	nop
 800aa88:	20000c5c 	.word	0x20000c5c

0800aa8c <USBD_StdItfReq>:
{
 800aa8c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800aa8e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800aa92:	2b03      	cmp	r3, #3
{
 800aa94:	4604      	mov	r4, r0
 800aa96:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800aa98:	d10d      	bne.n	800aab6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800aa9a:	790b      	ldrb	r3, [r1, #4]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d80a      	bhi.n	800aab6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800aaa0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800aaa4:	689b      	ldr	r3, [r3, #8]
 800aaa6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800aaa8:	88eb      	ldrh	r3, [r5, #6]
 800aaaa:	b913      	cbnz	r3, 800aab2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 f8b6 	bl	800ac1e <USBD_CtlSendStatus>
}
 800aab2:	2000      	movs	r0, #0
 800aab4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800aab6:	f7ff fee3 	bl	800a880 <USBD_CtlError.constprop.0>
    break;
 800aaba:	e7fa      	b.n	800aab2 <USBD_StdItfReq+0x26>

0800aabc <USBD_StdEPReq>:
{
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800aac0:	888b      	ldrh	r3, [r1, #4]
  switch (req->bRequest) 
 800aac2:	786a      	ldrb	r2, [r5, #1]
 800aac4:	2a01      	cmp	r2, #1
{
 800aac6:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);   
 800aac8:	b2d9      	uxtb	r1, r3
  switch (req->bRequest) 
 800aaca:	d01c      	beq.n	800ab06 <USBD_StdEPReq+0x4a>
 800aacc:	d329      	bcc.n	800ab22 <USBD_StdEPReq+0x66>
 800aace:	2a03      	cmp	r2, #3
 800aad0:	d117      	bne.n	800ab02 <USBD_StdEPReq+0x46>
    switch (pdev->dev_state) 
 800aad2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d03e      	beq.n	800ab58 <USBD_StdEPReq+0x9c>
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d002      	beq.n	800aae4 <USBD_StdEPReq+0x28>
      USBD_CtlError(pdev , req);
 800aade:	f7ff fecf 	bl	800a880 <USBD_CtlError.constprop.0>
      break;
 800aae2:	e00e      	b.n	800ab02 <USBD_StdEPReq+0x46>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800aae4:	886b      	ldrh	r3, [r5, #2]
 800aae6:	b91b      	cbnz	r3, 800aaf0 <USBD_StdEPReq+0x34>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800aae8:	064b      	lsls	r3, r1, #25
 800aaea:	d001      	beq.n	800aaf0 <USBD_StdEPReq+0x34>
          USBD_LL_StallEP(pdev , ep_addr);
 800aaec:	f000 fa94 	bl	800b018 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800aaf0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 f88e 	bl	800ac1e <USBD_CtlSendStatus>
}
 800ab02:	2000      	movs	r0, #0
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state) 
 800ab06:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d024      	beq.n	800ab58 <USBD_StdEPReq+0x9c>
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d1e5      	bne.n	800aade <USBD_StdEPReq+0x22>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800ab12:	886b      	ldrh	r3, [r5, #2]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d1f4      	bne.n	800ab02 <USBD_StdEPReq+0x46>
        if ((ep_addr & 0x7F) != 0x00) 
 800ab18:	064a      	lsls	r2, r1, #25
 800ab1a:	d0ef      	beq.n	800aafc <USBD_StdEPReq+0x40>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800ab1c:	f000 fa83 	bl	800b026 <USBD_LL_ClearStallEP>
 800ab20:	e7e6      	b.n	800aaf0 <USBD_StdEPReq+0x34>
    switch (pdev->dev_state) 
 800ab22:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800ab26:	2a02      	cmp	r2, #2
 800ab28:	d016      	beq.n	800ab58 <USBD_StdEPReq+0x9c>
 800ab2a:	2a03      	cmp	r2, #3
 800ab2c:	d1d7      	bne.n	800aade <USBD_StdEPReq+0x22>
 800ab2e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800ab32:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab36:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800ab3a:	bf14      	ite	ne
 800ab3c:	3514      	addne	r5, #20
 800ab3e:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ab42:	f000 fa77 	bl	800b034 <USBD_LL_IsStallEP>
 800ab46:	b160      	cbz	r0, 800ab62 <USBD_StdEPReq+0xa6>
        pep->status = 0x0001;     
 800ab48:	2301      	movs	r3, #1
 800ab4a:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f838 	bl	800abc6 <USBD_CtlSendData>
      break;
 800ab56:	e7d4      	b.n	800ab02 <USBD_StdEPReq+0x46>
      if ((ep_addr & 0x7F) != 0x00) 
 800ab58:	064b      	lsls	r3, r1, #25
 800ab5a:	d0d2      	beq.n	800ab02 <USBD_StdEPReq+0x46>
        USBD_LL_StallEP(pdev , ep_addr);
 800ab5c:	f000 fa5c 	bl	800b018 <USBD_LL_StallEP>
 800ab60:	e7cf      	b.n	800ab02 <USBD_StdEPReq+0x46>
        pep->status = 0x0000;  
 800ab62:	6028      	str	r0, [r5, #0]
 800ab64:	e7f2      	b.n	800ab4c <USBD_StdEPReq+0x90>

0800ab66 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800ab66:	780b      	ldrb	r3, [r1, #0]
 800ab68:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800ab6a:	784b      	ldrb	r3, [r1, #1]
 800ab6c:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800ab6e:	78ca      	ldrb	r2, [r1, #3]
 800ab70:	788b      	ldrb	r3, [r1, #2]
 800ab72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ab76:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800ab78:	794a      	ldrb	r2, [r1, #5]
 800ab7a:	790b      	ldrb	r3, [r1, #4]
 800ab7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ab80:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800ab82:	79ca      	ldrb	r2, [r1, #7]
 800ab84:	798b      	ldrb	r3, [r1, #6]
 800ab86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ab8a:	80c3      	strh	r3, [r0, #6]
 800ab8c:	4770      	bx	lr

0800ab8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab8e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800ab90:	b188      	cbz	r0, 800abb6 <USBD_GetString+0x28>
 800ab92:	4605      	mov	r5, r0
 800ab94:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800ab96:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2c00      	cmp	r4, #0
 800ab9e:	d1f9      	bne.n	800ab94 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	3302      	adds	r3, #2
 800aba4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800aba6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800aba8:	2303      	movs	r3, #3
 800abaa:	704b      	strb	r3, [r1, #1]
 800abac:	3801      	subs	r0, #1
 800abae:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800abb0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800abb4:	b905      	cbnz	r5, 800abb8 <USBD_GetString+0x2a>
 800abb6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800abbe:	3302      	adds	r3, #2
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	548c      	strb	r4, [r1, r2]
 800abc4:	e7f4      	b.n	800abb0 <USBD_GetString+0x22>

0800abc6 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800abc6:	b510      	push	{r4, lr}
 800abc8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800abca:	2202      	movs	r2, #2
 800abcc:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800abd0:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800abd2:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800abd4:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800abd6:	2100      	movs	r1, #0
 800abd8:	f000 fa46 	bl	800b068 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800abdc:	2000      	movs	r0, #0
 800abde:	bd10      	pop	{r4, pc}

0800abe0 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800abe0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800abe2:	4613      	mov	r3, r2
 800abe4:	460a      	mov	r2, r1
 800abe6:	2100      	movs	r1, #0
 800abe8:	f000 fa3e 	bl	800b068 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800abec:	2000      	movs	r0, #0
 800abee:	bd08      	pop	{r3, pc}

0800abf0 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800abf4:	2203      	movs	r2, #3
 800abf6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800abfa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800abfe:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800ac00:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800ac04:	2100      	movs	r1, #0
 800ac06:	f000 fa36 	bl	800b076 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	bd10      	pop	{r4, pc}

0800ac0e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800ac0e:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800ac10:	4613      	mov	r3, r2
 800ac12:	460a      	mov	r2, r1
 800ac14:	2100      	movs	r1, #0
 800ac16:	f000 fa2e 	bl	800b076 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	bd08      	pop	{r3, pc}

0800ac1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800ac1e:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac20:	2304      	movs	r3, #4
 800ac22:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800ac26:	2300      	movs	r3, #0
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	f000 fa1c 	bl	800b068 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800ac30:	2000      	movs	r0, #0
 800ac32:	bd08      	pop	{r3, pc}

0800ac34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800ac34:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800ac36:	2305      	movs	r3, #5
 800ac38:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4619      	mov	r1, r3
 800ac42:	f000 fa18 	bl	800b076 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800ac46:	2000      	movs	r0, #0
 800ac48:	bd08      	pop	{r3, pc}

0800ac4a <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800ac4a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800ac4e:	b11b      	cbz	r3, 800ac58 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800ac50:	2000      	movs	r0, #0
 800ac52:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800ac56:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800ac58:	2002      	movs	r0, #2
  }
}
 800ac5a:	4770      	bx	lr

0800ac5c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800ac5c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800ac60:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800ac62:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800ac66:	b15b      	cbz	r3, 800ac80 <USBD_CDC_EP0_RxReady+0x24>
 800ac68:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800ac6c:	28ff      	cmp	r0, #255	; 0xff
 800ac6e:	d007      	beq.n	800ac80 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800ac76:	4621      	mov	r1, r4
 800ac78:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800ac7a:	23ff      	movs	r3, #255	; 0xff
 800ac7c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800ac80:	2000      	movs	r0, #0
 800ac82:	bd10      	pop	{r4, pc}

0800ac84 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ac84:	2343      	movs	r3, #67	; 0x43
 800ac86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800ac88:	4800      	ldr	r0, [pc, #0]	; (800ac8c <USBD_CDC_GetFSCfgDesc+0x8>)
 800ac8a:	4770      	bx	lr
 800ac8c:	20000914 	.word	0x20000914

0800ac90 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800ac90:	2343      	movs	r3, #67	; 0x43
 800ac92:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800ac94:	4800      	ldr	r0, [pc, #0]	; (800ac98 <USBD_CDC_GetHSCfgDesc+0x8>)
 800ac96:	4770      	bx	lr
 800ac98:	20000958 	.word	0x20000958

0800ac9c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800ac9c:	2343      	movs	r3, #67	; 0x43
 800ac9e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800aca0:	4800      	ldr	r0, [pc, #0]	; (800aca4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800aca2:	4770      	bx	lr
 800aca4:	200009a8 	.word	0x200009a8

0800aca8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800aca8:	230a      	movs	r3, #10
 800acaa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800acac:	4800      	ldr	r0, [pc, #0]	; (800acb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800acae:	4770      	bx	lr
 800acb0:	2000099c 	.word	0x2000099c

0800acb4 <USBD_CDC_DataOut>:
{      
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800acb8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800acbc:	f000 f9e2 	bl	800b084 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800acc0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800acc4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800acc8:	b14b      	cbz	r3, 800acde <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800acca:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800acce:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800acd8:	4798      	blx	r3
    return USBD_OK;
 800acda:	2000      	movs	r0, #0
 800acdc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800acde:	2002      	movs	r0, #2
}
 800ace0:	bd38      	pop	{r3, r4, r5, pc}

0800ace2 <USBD_CDC_DeInit>:
{
 800ace2:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800ace4:	2181      	movs	r1, #129	; 0x81
{
 800ace6:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800ace8:	f000 f98f 	bl	800b00a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800acec:	2101      	movs	r1, #1
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f98b 	bl	800b00a <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800acf4:	2182      	movs	r1, #130	; 0x82
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f987 	bl	800b00a <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800acfc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800ad00:	b153      	cbz	r3, 800ad18 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad02:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ad0a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800ad0e:	f000 f9c3 	bl	800b098 <USBD_static_free>
    pdev->pClassData = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800ad18:	2000      	movs	r0, #0
 800ad1a:	bd10      	pop	{r4, pc}

0800ad1c <USBD_CDC_Init>:
{
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ad1e:	7c03      	ldrb	r3, [r0, #16]
{
 800ad20:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ad22:	bb7b      	cbnz	r3, 800ad84 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800ad24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad28:	2202      	movs	r2, #2
 800ad2a:	2181      	movs	r1, #129	; 0x81
 800ad2c:	f000 f963 	bl	800aff6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800ad30:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800ad34:	2202      	movs	r2, #2
 800ad36:	2101      	movs	r1, #1
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 f95c 	bl	800aff6 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800ad3e:	2308      	movs	r3, #8
 800ad40:	2203      	movs	r2, #3
 800ad42:	2182      	movs	r1, #130	; 0x82
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 f956 	bl	800aff6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800ad4a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad4e:	f000 f99f 	bl	800b090 <USBD_static_malloc>
 800ad52:	4606      	mov	r6, r0
 800ad54:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800ad58:	b320      	cbz	r0, 800ada4 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad5a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ad62:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 800ad64:	2500      	movs	r5, #0
 800ad66:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 800ad6a:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ad6e:	b987      	cbnz	r7, 800ad92 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800ad70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad74:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800ad78:	2101      	movs	r1, #1
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 f97b 	bl	800b076 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800ad80:	4638      	mov	r0, r7
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800ad84:	2340      	movs	r3, #64	; 0x40
 800ad86:	2202      	movs	r2, #2
 800ad88:	2181      	movs	r1, #129	; 0x81
 800ad8a:	f000 f934 	bl	800aff6 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800ad8e:	2340      	movs	r3, #64	; 0x40
 800ad90:	e7d0      	b.n	800ad34 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800ad92:	2340      	movs	r3, #64	; 0x40
 800ad94:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 f96b 	bl	800b076 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800ada0:	4628      	mov	r0, r5
 800ada2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 800ada4:	2001      	movs	r0, #1
}
 800ada6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ada8 <USBD_CDC_Setup>:
{
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adac:	7809      	ldrb	r1, [r1, #0]
 800adae:	f001 0360 	and.w	r3, r1, #96	; 0x60
 800adb2:	2b20      	cmp	r3, #32
{
 800adb4:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adb6:	d111      	bne.n	800addc <USBD_CDC_Setup+0x34>
    if (req->wLength)
 800adb8:	88f2      	ldrh	r2, [r6, #6]
 800adba:	7873      	ldrb	r3, [r6, #1]
 800adbc:	b1c2      	cbz	r2, 800adf0 <USBD_CDC_Setup+0x48>
      if (req->bmRequest & 0x80)
 800adbe:	0609      	lsls	r1, r1, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800adc0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800adc4:	d50c      	bpl.n	800ade0 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adc6:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800adca:	4618      	mov	r0, r3
 800adcc:	688f      	ldr	r7, [r1, #8]
 800adce:	4621      	mov	r1, r4
 800add0:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 800add2:	88f2      	ldrh	r2, [r6, #6]
 800add4:	4621      	mov	r1, r4
 800add6:	4628      	mov	r0, r5
 800add8:	f7ff fef5 	bl	800abc6 <USBD_CtlSendData>
}
 800addc:	2000      	movs	r0, #0
 800adde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcdc->CmdOpCode = req->bRequest;
 800ade0:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800ade4:	f884 2201 	strb.w	r2, [r4, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800ade8:	4621      	mov	r1, r4
 800adea:	f7ff ff01 	bl	800abf0 <USBD_CtlPrepareRx>
 800adee:	e7f5      	b.n	800addc <USBD_CDC_Setup+0x34>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800adf0:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800adf4:	4618      	mov	r0, r3
 800adf6:	688c      	ldr	r4, [r1, #8]
 800adf8:	4611      	mov	r1, r2
 800adfa:	47a0      	blx	r4
 800adfc:	e7ee      	b.n	800addc <USBD_CDC_Setup+0x34>

0800adfe <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800adfe:	b119      	cbz	r1, 800ae08 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800ae00:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800ae04:	2000      	movs	r0, #0
 800ae06:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800ae08:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800ae0a:	4770      	bx	lr

0800ae0c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800ae0c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800ae10:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800ae12:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800ae16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800ae1a:	4770      	bx	lr

0800ae1c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800ae1c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800ae20:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800ae22:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800ae26:	4770      	bx	lr

0800ae28 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800ae28:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800ae2a:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800ae2e:	b175      	cbz	r5, 800ae4e <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800ae30:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800ae34:	b96c      	cbnz	r4, 800ae52 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800ae36:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800ae3a:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800ae3e:	2181      	movs	r1, #129	; 0x81
 800ae40:	f000 f912 	bl	800b068 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800ae4e:	2002      	movs	r0, #2
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
 800ae52:	2001      	movs	r0, #1
  }
}
 800ae54:	bd38      	pop	{r3, r4, r5, pc}

0800ae56 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800ae56:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800ae5a:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800ae5c:	b162      	cbz	r2, 800ae78 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ae5e:	7c04      	ldrb	r4, [r0, #16]
 800ae60:	b944      	cbnz	r4, 800ae74 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae62:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae66:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	f000 f903 	bl	800b076 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae70:	2000      	movs	r0, #0
 800ae72:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800ae74:	2340      	movs	r3, #64	; 0x40
 800ae76:	e7f6      	b.n	800ae66 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 800ae78:	2002      	movs	r0, #2
  }
}
 800ae7a:	bd10      	pop	{r4, pc}

0800ae7c <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800ae80:	4c24      	ldr	r4, [pc, #144]	; (800af14 <HAL_PCD_MspInit+0x98>)
 800ae82:	6963      	ldr	r3, [r4, #20]
 800ae84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae88:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800ae8a:	6963      	ldr	r3, [r4, #20]
{
 800ae8c:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800ae8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae92:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800ae94:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800ae98:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae9a:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ae9c:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800aea0:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800aea2:	a901      	add	r1, sp, #4
 800aea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800aea8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800aeaa:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeac:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800aeae:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800aeb2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800aeb4:	f7fd fe68 	bl	8008b88 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800aeb8:	462a      	mov	r2, r5
 800aeba:	4631      	mov	r1, r6
 800aebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aec0:	f7fd ff36 	bl	8008d30 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800aec4:	2001      	movs	r0, #1
 800aec6:	f7fd fde9 	bl	8008a9c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800aeca:	2201      	movs	r2, #1
 800aecc:	4631      	mov	r1, r6
 800aece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aed2:	f7fd ff2d 	bl	8008d30 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aed6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800aed8:	a901      	add	r1, sp, #4
 800aeda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aede:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800aee0:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800aee4:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800aee8:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800aeea:	f7fd fe4d 	bl	8008b88 <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800aeee:	69e3      	ldr	r3, [r4, #28]
 800aef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aef4:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800aef6:	69a3      	ldr	r3, [r4, #24]
 800aef8:	f043 0301 	orr.w	r3, r3, #1
 800aefc:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800aefe:	462a      	mov	r2, r5
 800af00:	2105      	movs	r1, #5
 800af02:	2014      	movs	r0, #20
 800af04:	f7fd fdea 	bl	8008adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800af08:	2014      	movs	r0, #20
 800af0a:	f7fd fe1b 	bl	8008b44 <HAL_NVIC_EnableIRQ>
}
 800af0e:	b006      	add	sp, #24
 800af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af14:	40021000 	.word	0x40021000

0800af18 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800af18:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800af1c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800af20:	f7ff bbdb 	b.w	800a6da <USBD_LL_SetupStage>

0800af24 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af24:	231c      	movs	r3, #28
 800af26:	fb03 0301 	mla	r3, r3, r1, r0
 800af2a:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800af2e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800af32:	f7ff bbff 	b.w	800a734 <USBD_LL_DataOutStage>

0800af36 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af36:	231c      	movs	r3, #28
 800af38:	fb03 0301 	mla	r3, r3, r1, r0
 800af3c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800af40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af42:	f7ff bc29 	b.w	800a798 <USBD_LL_DataInStage>

0800af46 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800af46:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800af4a:	f7ff bc8d 	b.w	800a868 <USBD_LL_SOF>

0800af4e <HAL_PCD_ResetCallback>:
{   
 800af4e:	b510      	push	{r4, lr}
 800af50:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800af52:	2101      	movs	r1, #1
 800af54:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800af58:	f7ff fc83 	bl	800a862 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800af5c:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800af60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800af64:	f7ff bc5e 	b.w	800a824 <USBD_LL_Reset>

0800af68 <HAL_PCD_SuspendCallback>:
 800af68:	4770      	bx	lr

0800af6a <HAL_PCD_ResumeCallback>:
 800af6a:	4770      	bx	lr

0800af6c <USBD_LL_Init>:
{    
 800af6c:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800af6e:	4a1c      	ldr	r2, [pc, #112]	; (800afe0 <USBD_LL_Init+0x74>)
{    
 800af70:	4605      	mov	r5, r0
  hpcd.Instance = USB;
 800af72:	481c      	ldr	r0, [pc, #112]	; (800afe4 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800af74:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800af78:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800af7a:	2400      	movs	r4, #0
  hpcd.Init.dev_endpoints = 8;
 800af7c:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af80:	2302      	movs	r3, #2
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800af82:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af84:	6103      	str	r3, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800af86:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800af88:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800af8c:	f7fd fee6 	bl	8008d5c <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800af90:	4622      	mov	r2, r4
 800af92:	4621      	mov	r1, r4
 800af94:	2340      	movs	r3, #64	; 0x40
 800af96:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800af9a:	f7fe fe0e 	bl	8009bba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800af9e:	2380      	movs	r3, #128	; 0x80
 800afa0:	4622      	mov	r2, r4
 800afa2:	4619      	mov	r1, r3
 800afa4:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800afa8:	f7fe fe07 	bl	8009bba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800afac:	4622      	mov	r2, r4
 800afae:	23c0      	movs	r3, #192	; 0xc0
 800afb0:	2181      	movs	r1, #129	; 0x81
 800afb2:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800afb6:	f7fe fe00 	bl	8009bba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800afba:	4622      	mov	r2, r4
 800afbc:	f44f 7388 	mov.w	r3, #272	; 0x110
 800afc0:	2101      	movs	r1, #1
 800afc2:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800afc6:	f7fe fdf8 	bl	8009bba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800afca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afce:	4622      	mov	r2, r4
 800afd0:	2182      	movs	r1, #130	; 0x82
 800afd2:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800afd6:	f7fe fdf0 	bl	8009bba <HAL_PCDEx_PMAConfig>
}
 800afda:	4620      	mov	r0, r4
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	bf00      	nop
 800afe0:	40005c00 	.word	0x40005c00
 800afe4:	200011f8 	.word	0x200011f8

0800afe8 <USBD_LL_Start>:
{
 800afe8:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800afea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800afee:	f7fd ff02 	bl	8008df6 <HAL_PCD_Start>
}
 800aff2:	2000      	movs	r0, #0
 800aff4:	bd08      	pop	{r3, pc}

0800aff6 <USBD_LL_OpenEP>:
{
 800aff6:	b510      	push	{r4, lr}
 800aff8:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 800affa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800affe:	4613      	mov	r3, r2
 800b000:	4622      	mov	r2, r4
 800b002:	f7fd ff15 	bl	8008e30 <HAL_PCD_EP_Open>
}
 800b006:	2000      	movs	r0, #0
 800b008:	bd10      	pop	{r4, pc}

0800b00a <USBD_LL_CloseEP>:
{
 800b00a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b00c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b010:	f7fe f8a4 	bl	800915c <HAL_PCD_EP_Close>
}
 800b014:	2000      	movs	r0, #0
 800b016:	bd08      	pop	{r3, pc}

0800b018 <USBD_LL_StallEP>:
{
 800b018:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b01a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b01e:	f7fe fd19 	bl	8009a54 <HAL_PCD_EP_SetStall>
}
 800b022:	2000      	movs	r0, #0
 800b024:	bd08      	pop	{r3, pc}

0800b026 <USBD_LL_ClearStallEP>:
{
 800b026:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b028:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b02c:	f7fe fd62 	bl	8009af4 <HAL_PCD_EP_ClrStall>
}
 800b030:	2000      	movs	r0, #0
 800b032:	bd08      	pop	{r3, pc}

0800b034 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800b034:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b038:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800b03c:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b040:	bf1b      	ittet	ne
 800b042:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800b046:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b04a:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b04e:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b052:	bf08      	it	eq
 800b054:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800b058:	4770      	bx	lr

0800b05a <USBD_LL_SetUSBAddress>:
{
 800b05a:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b05c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b060:	f7fd fecf 	bl	8008e02 <HAL_PCD_SetAddress>
}
 800b064:	2000      	movs	r0, #0
 800b066:	bd08      	pop	{r3, pc}

0800b068 <USBD_LL_Transmit>:
{
 800b068:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b06a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b06e:	f7fe f9eb 	bl	8009448 <HAL_PCD_EP_Transmit>
}
 800b072:	2000      	movs	r0, #0
 800b074:	bd08      	pop	{r3, pc}

0800b076 <USBD_LL_PrepareReceive>:
{
 800b076:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b078:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b07c:	f7fe f95a 	bl	8009334 <HAL_PCD_EP_Receive>
}
 800b080:	2000      	movs	r0, #0
 800b082:	bd08      	pop	{r3, pc}

0800b084 <USBD_LL_GetRxDataSize>:
{
 800b084:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800b086:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800b08a:	f7fe f9d5 	bl	8009438 <HAL_PCD_EP_GetRxCount>
}
 800b08e:	bd08      	pop	{r3, pc}

0800b090 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800b090:	4800      	ldr	r0, [pc, #0]	; (800b094 <USBD_static_malloc+0x4>)
 800b092:	4770      	bx	lr
 800b094:	20000c60 	.word	0x20000c60

0800b098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b098:	4770      	bx	lr
	...

0800b09c <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800b09c:	2312      	movs	r3, #18
 800b09e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 800b0a0:	4800      	ldr	r0, [pc, #0]	; (800b0a4 <USBD_VCP_DeviceDescriptor+0x8>)
 800b0a2:	4770      	bx	lr
 800b0a4:	0801b4f9 	.word	0x0801b4f9

0800b0a8 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 800b0ac:	4800      	ldr	r0, [pc, #0]	; (800b0b0 <USBD_VCP_LangIDStrDescriptor+0x8>)
 800b0ae:	4770      	bx	lr
 800b0b0:	0801b4a8 	.word	0x0801b4a8

0800b0b4 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800b0b4:	2300      	movs	r3, #0
{
 800b0b6:	b530      	push	{r4, r5, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800b0b8:	461d      	mov	r5, r3
  for( idx = 0 ; idx < len ; idx ++)
 800b0ba:	b2dc      	uxtb	r4, r3
 800b0bc:	42a2      	cmp	r2, r4
 800b0be:	d800      	bhi.n	800b0c2 <IntToUnicode+0xe>
  }
}
 800b0c0:	bd30      	pop	{r4, r5, pc}
    if( ((value >> 28)) < 0xA )
 800b0c2:	0f04      	lsrs	r4, r0, #28
 800b0c4:	2c09      	cmp	r4, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 800b0c6:	bf94      	ite	ls
 800b0c8:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800b0ca:	3437      	addhi	r4, #55	; 0x37
 800b0cc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800b0d0:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 800b0d4:	0100      	lsls	r0, r0, #4
    pbuf[ 2* idx + 1] = 0;
 800b0d6:	7065      	strb	r5, [r4, #1]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	e7ee      	b.n	800b0ba <IntToUnicode+0x6>

0800b0dc <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b0dc:	231a      	movs	r3, #26
{
 800b0de:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b0e0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800b0e2:	4b09      	ldr	r3, [pc, #36]	; (800b108 <USBD_VCP_SerialStrDescriptor+0x2c>)
 800b0e4:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800b0e6:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800b0e8:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800b0ea:	18c0      	adds	r0, r0, r3
 800b0ec:	d00a      	beq.n	800b104 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800b0f0:	4907      	ldr	r1, [pc, #28]	; (800b110 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800b0f2:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800b0f4:	2208      	movs	r2, #8
 800b0f6:	f7ff ffdd 	bl	800b0b4 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800b0fa:	2204      	movs	r2, #4
 800b0fc:	4905      	ldr	r1, [pc, #20]	; (800b114 <USBD_VCP_SerialStrDescriptor+0x38>)
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7ff ffd8 	bl	800b0b4 <IntToUnicode>
}
 800b104:	4804      	ldr	r0, [pc, #16]	; (800b118 <USBD_VCP_SerialStrDescriptor+0x3c>)
 800b106:	bd10      	pop	{r4, pc}
 800b108:	1ffff7ac 	.word	0x1ffff7ac
 800b10c:	1ffff7b0 	.word	0x1ffff7b0
 800b110:	200009ed 	.word	0x200009ed
 800b114:	200009fd 	.word	0x200009fd
 800b118:	200009eb 	.word	0x200009eb

0800b11c <USBD_VCP_ProductStrDescriptor>:
{
 800b11c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800b11e:	4c04      	ldr	r4, [pc, #16]	; (800b130 <USBD_VCP_ProductStrDescriptor+0x14>)
 800b120:	4804      	ldr	r0, [pc, #16]	; (800b134 <USBD_VCP_ProductStrDescriptor+0x18>)
 800b122:	460a      	mov	r2, r1
 800b124:	4621      	mov	r1, r4
 800b126:	f7ff fd32 	bl	800ab8e <USBD_GetString>
}
 800b12a:	4620      	mov	r0, r4
 800b12c:	bd10      	pop	{r4, pc}
 800b12e:	bf00      	nop
 800b130:	20001370 	.word	0x20001370
 800b134:	0801b4d8 	.word	0x0801b4d8

0800b138 <USBD_VCP_ManufacturerStrDescriptor>:
{
 800b138:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b13a:	4c04      	ldr	r4, [pc, #16]	; (800b14c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800b13c:	4804      	ldr	r0, [pc, #16]	; (800b150 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 800b13e:	460a      	mov	r2, r1
 800b140:	4621      	mov	r1, r4
 800b142:	f7ff fd24 	bl	800ab8e <USBD_GetString>
}
 800b146:	4620      	mov	r0, r4
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop
 800b14c:	20001370 	.word	0x20001370
 800b150:	0801b4c5 	.word	0x0801b4c5

0800b154 <USBD_VCP_ConfigStrDescriptor>:
{
 800b154:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800b156:	4c04      	ldr	r4, [pc, #16]	; (800b168 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800b158:	4804      	ldr	r0, [pc, #16]	; (800b16c <USBD_VCP_ConfigStrDescriptor+0x18>)
 800b15a:	460a      	mov	r2, r1
 800b15c:	4621      	mov	r1, r4
 800b15e:	f7ff fd16 	bl	800ab8e <USBD_GetString>
}
 800b162:	4620      	mov	r0, r4
 800b164:	bd10      	pop	{r4, pc}
 800b166:	bf00      	nop
 800b168:	20001370 	.word	0x20001370
 800b16c:	0801b4ac 	.word	0x0801b4ac

0800b170 <USBD_VCP_InterfaceStrDescriptor>:
{
 800b170:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b172:	4c04      	ldr	r4, [pc, #16]	; (800b184 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800b174:	4804      	ldr	r0, [pc, #16]	; (800b188 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 800b176:	460a      	mov	r2, r1
 800b178:	4621      	mov	r1, r4
 800b17a:	f7ff fd08 	bl	800ab8e <USBD_GetString>
}
 800b17e:	4620      	mov	r0, r4
 800b180:	bd10      	pop	{r4, pc}
 800b182:	bf00      	nop
 800b184:	20001370 	.word	0x20001370
 800b188:	0801b4b7 	.word	0x0801b4b7

0800b18c <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800b18c:	2000      	movs	r0, #0
 800b18e:	4770      	bx	lr

0800b190 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800b190:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800b192:	680a      	ldr	r2, [r1, #0]
 800b194:	4601      	mov	r1, r0
 800b196:	2000      	movs	r0, #0
 800b198:	f7fc fc9c 	bl	8007ad4 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800b19c:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <CDC_Itf_Receive+0x18>)
 800b19e:	f7ff fe5a 	bl	800ae56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	bd08      	pop	{r3, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000fd0 	.word	0x20000fd0

0800b1ac <CDC_Itf_Init>:
{
 800b1ac:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800b1ae:	4903      	ldr	r1, [pc, #12]	; (800b1bc <CDC_Itf_Init+0x10>)
 800b1b0:	4803      	ldr	r0, [pc, #12]	; (800b1c0 <CDC_Itf_Init+0x14>)
 800b1b2:	f7ff fe33 	bl	800ae1c <USBD_CDC_SetRxBuffer>
}
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	bd08      	pop	{r3, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200014e0 	.word	0x200014e0
 800b1c0:	20000fd0 	.word	0x20000fd0

0800b1c4 <CDC_Itf_Control>:
  switch (cmd)
 800b1c4:	2820      	cmp	r0, #32
 800b1c6:	d003      	beq.n	800b1d0 <CDC_Itf_Control+0xc>
 800b1c8:	2821      	cmp	r0, #33	; 0x21
 800b1ca:	d00b      	beq.n	800b1e4 <CDC_Itf_Control+0x20>
}
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <CDC_Itf_Control+0x44>)
 800b1d2:	680a      	ldr	r2, [r1, #0]
 800b1d4:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800b1d6:	790a      	ldrb	r2, [r1, #4]
 800b1d8:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800b1da:	794a      	ldrb	r2, [r1, #5]
 800b1dc:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800b1de:	798a      	ldrb	r2, [r1, #6]
 800b1e0:	719a      	strb	r2, [r3, #6]
 800b1e2:	e7f3      	b.n	800b1cc <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b1e4:	4b08      	ldr	r3, [pc, #32]	; (800b208 <CDC_Itf_Control+0x44>)
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	0a12      	lsrs	r2, r2, #8
 800b1ee:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b1f0:	885a      	ldrh	r2, [r3, #2]
 800b1f2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b1f4:	78da      	ldrb	r2, [r3, #3]
 800b1f6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800b1f8:	791a      	ldrb	r2, [r3, #4]
 800b1fa:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800b1fc:	795a      	ldrb	r2, [r3, #5]
 800b1fe:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800b200:	799b      	ldrb	r3, [r3, #6]
 800b202:	718b      	strb	r3, [r1, #6]
    break;
 800b204:	e7e2      	b.n	800b1cc <CDC_Itf_Control+0x8>
 800b206:	bf00      	nop
 800b208:	20000a24 	.word	0x20000a24

0800b20c <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800b20c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b20e:	4c1c      	ldr	r4, [pc, #112]	; (800b280 <SPIx_Init+0x74>)
{
 800b210:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff fa2b 	bl	800a66e <HAL_SPI_GetState>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d12e      	bne.n	800b27a <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800b21c:	4b19      	ldr	r3, [pc, #100]	; (800b284 <SPIx_Init+0x78>)
 800b21e:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b220:	2318      	movs	r3, #24
 800b222:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800b224:	2307      	movs	r3, #7
 800b226:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800b228:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800b22c:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800b22e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b232:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800b234:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b238:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800b23a:	4b13      	ldr	r3, [pc, #76]	; (800b288 <SPIx_Init+0x7c>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800b23c:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b23e:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b240:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800b242:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b244:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800b246:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800b248:	699a      	ldr	r2, [r3, #24]
 800b24a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b24e:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800b250:	695a      	ldr	r2, [r3, #20]
 800b252:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b256:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800b258:	23e0      	movs	r3, #224	; 0xe0
 800b25a:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b25c:	2302      	movs	r3, #2
 800b25e:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b260:	2303      	movs	r3, #3
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800b262:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b264:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b26a:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b26c:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800b26e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800b270:	f7fd fc8a 	bl	8008b88 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800b274:	4620      	mov	r0, r4
 800b276:	f7ff f852 	bl	800a31e <HAL_SPI_Init>
}
 800b27a:	b006      	add	sp, #24
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	bf00      	nop
 800b280:	20000ec8 	.word	0x20000ec8
 800b284:	40013000 	.word	0x40013000
 800b288:	40021000 	.word	0x40021000

0800b28c <SPIx_WriteRead>:
{
 800b28c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800b28e:	aa06      	add	r2, sp, #24
 800b290:	2300      	movs	r3, #0
 800b292:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <SPIx_WriteRead+0x38>)
{
 800b298:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	f10d 010f 	add.w	r1, sp, #15
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4808      	ldr	r0, [pc, #32]	; (800b2c8 <SPIx_WriteRead+0x3c>)
 800b2a8:	f7ff f8a3 	bl	800a3f2 <HAL_SPI_TransmitReceive>
 800b2ac:	b120      	cbz	r0, 800b2b8 <SPIx_WriteRead+0x2c>
  HAL_SPI_DeInit(&SpiHandle);
 800b2ae:	4806      	ldr	r0, [pc, #24]	; (800b2c8 <SPIx_WriteRead+0x3c>)
 800b2b0:	f7ff f888 	bl	800a3c4 <HAL_SPI_DeInit>
  SPIx_Init();
 800b2b4:	f7ff ffaa 	bl	800b20c <SPIx_Init>
}
 800b2b8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800b2bc:	b007      	add	sp, #28
 800b2be:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2c2:	bf00      	nop
 800b2c4:	20000a64 	.word	0x20000a64
 800b2c8:	20000ec8 	.word	0x20000ec8

0800b2cc <I2Cx_Init>:
{
 800b2cc:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b2ce:	4c16      	ldr	r4, [pc, #88]	; (800b328 <I2Cx_Init+0x5c>)
{
 800b2d0:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7fe ff8b 	bl	800a1ee <HAL_I2C_GetState>
 800b2d8:	bb18      	cbnz	r0, 800b322 <I2Cx_Init+0x56>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800b2da:	4b14      	ldr	r3, [pc, #80]	; (800b32c <I2Cx_Init+0x60>)
 800b2dc:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 800b2de:	2332      	movs	r3, #50	; 0x32
 800b2e0:	60a3      	str	r3, [r4, #8]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b2e2:	4d13      	ldr	r5, [pc, #76]	; (800b330 <I2Cx_Init+0x64>)
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800b2e4:	6120      	str	r0, [r4, #16]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b2e6:	2301      	movs	r3, #1
    I2cHandle.Init.OwnAddress2 = 0;
 800b2e8:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 800b2ea:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800b2ec:	6220      	str	r0, [r4, #32]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b2ee:	60e3      	str	r3, [r4, #12]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b2f0:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b2f2:	4810      	ldr	r0, [pc, #64]	; (800b334 <I2Cx_Init+0x68>)
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800b2f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2f8:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 800b2fa:	23c0      	movs	r3, #192	; 0xc0
 800b2fc:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800b2fe:	2302      	movs	r3, #2
 800b300:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800b302:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b304:	2303      	movs	r3, #3
 800b306:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b308:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b30a:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800b30e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800b310:	f7fd fc3a 	bl	8008b88 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b314:	69eb      	ldr	r3, [r5, #28]
 800b316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b31a:	61eb      	str	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7fe fdd0 	bl	8009ec2 <HAL_I2C_Init>
}
 800b322:	b007      	add	sp, #28
 800b324:	bd30      	pop	{r4, r5, pc}
 800b326:	bf00      	nop
 800b328:	20000e90 	.word	0x20000e90
 800b32c:	40005400 	.word	0x40005400
 800b330:	40021000 	.word	0x40021000
 800b334:	48000400 	.word	0x48000400

0800b338 <BSP_LED_Init>:
{
 800b338:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800b33a:	4604      	mov	r4, r0
{
 800b33c:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800b33e:	b928      	cbnz	r0, 800b34c <BSP_LED_Init+0x14>
 800b340:	4a15      	ldr	r2, [pc, #84]	; (800b398 <BSP_LED_Init+0x60>)
 800b342:	6953      	ldr	r3, [r2, #20]
 800b344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b348:	6153      	str	r3, [r2, #20]
 800b34a:	e00d      	b.n	800b368 <BSP_LED_Init+0x30>
 800b34c:	2801      	cmp	r0, #1
 800b34e:	d0f7      	beq.n	800b340 <BSP_LED_Init+0x8>
 800b350:	2802      	cmp	r0, #2
 800b352:	d0f5      	beq.n	800b340 <BSP_LED_Init+0x8>
 800b354:	2803      	cmp	r0, #3
 800b356:	d0f3      	beq.n	800b340 <BSP_LED_Init+0x8>
 800b358:	2804      	cmp	r0, #4
 800b35a:	d0f1      	beq.n	800b340 <BSP_LED_Init+0x8>
 800b35c:	2805      	cmp	r0, #5
 800b35e:	d0ef      	beq.n	800b340 <BSP_LED_Init+0x8>
 800b360:	2806      	cmp	r0, #6
 800b362:	d0ed      	beq.n	800b340 <BSP_LED_Init+0x8>
 800b364:	2807      	cmp	r0, #7
 800b366:	d0eb      	beq.n	800b340 <BSP_LED_Init+0x8>
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b368:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <BSP_LED_Init+0x64>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b36a:	4d0d      	ldr	r5, [pc, #52]	; (800b3a0 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b36c:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b370:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b374:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b376:	2301      	movs	r3, #1
 800b378:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b37a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b37c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b37e:	2303      	movs	r3, #3
 800b380:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b382:	f7fd fc01 	bl	8008b88 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800b386:	2200      	movs	r2, #0
 800b388:	4631      	mov	r1, r6
 800b38a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b38e:	f7fd fccf 	bl	8008d30 <HAL_GPIO_WritePin>
}
 800b392:	b006      	add	sp, #24
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	bf00      	nop
 800b398:	40021000 	.word	0x40021000
 800b39c:	0801b50c 	.word	0x0801b50c
 800b3a0:	20000a44 	.word	0x20000a44

0800b3a4 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800b3a4:	4b04      	ldr	r3, [pc, #16]	; (800b3b8 <BSP_LED_On+0x14>)
 800b3a6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b3aa:	4b04      	ldr	r3, [pc, #16]	; (800b3bc <BSP_LED_On+0x18>)
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b3b2:	f7fd bcbd 	b.w	8008d30 <HAL_GPIO_WritePin>
 800b3b6:	bf00      	nop
 800b3b8:	0801b50c 	.word	0x0801b50c
 800b3bc:	20000a44 	.word	0x20000a44

0800b3c0 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <BSP_LED_Off+0x14>)
 800b3c2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b3c6:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <BSP_LED_Off+0x18>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b3ce:	f7fd bcaf 	b.w	8008d30 <HAL_GPIO_WritePin>
 800b3d2:	bf00      	nop
 800b3d4:	0801b50c 	.word	0x0801b50c
 800b3d8:	20000a44 	.word	0x20000a44

0800b3dc <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800b3dc:	4b03      	ldr	r3, [pc, #12]	; (800b3ec <BSP_LED_Toggle+0x10>)
 800b3de:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800b3e2:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <BSP_LED_Toggle+0x14>)
 800b3e4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b3e8:	f7fd bca7 	b.w	8008d3a <HAL_GPIO_TogglePin>
 800b3ec:	0801b50c 	.word	0x0801b50c
 800b3f0:	20000a44 	.word	0x20000a44

0800b3f4 <BSP_PB_Init>:
{
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	4b19      	ldr	r3, [pc, #100]	; (800b45c <BSP_PB_Init+0x68>)
 800b3f8:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800b3fa:	b918      	cbnz	r0, 800b404 <BSP_PB_Init+0x10>
 800b3fc:	695a      	ldr	r2, [r3, #20]
 800b3fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b402:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800b404:	699a      	ldr	r2, [r3, #24]
 800b406:	f042 0201 	orr.w	r2, r2, #1
 800b40a:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800b40c:	b971      	cbnz	r1, 800b42c <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800b40e:	2301      	movs	r3, #1
 800b410:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b412:	2302      	movs	r3, #2
 800b414:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b416:	2303      	movs	r3, #3
 800b418:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b41a:	4b11      	ldr	r3, [pc, #68]	; (800b460 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b41c:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b41e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b422:	a901      	add	r1, sp, #4
 800b424:	f7fd fbb0 	bl	8008b88 <HAL_GPIO_Init>
}
 800b428:	b006      	add	sp, #24
 800b42a:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 800b42c:	2901      	cmp	r1, #1
 800b42e:	d1fb      	bne.n	800b428 <BSP_PB_Init+0x34>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800b430:	2303      	movs	r3, #3
 800b432:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800b434:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <BSP_PB_Init+0x70>)
 800b436:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b438:	4b09      	ldr	r3, [pc, #36]	; (800b460 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800b43a:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b43c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b440:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b442:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b444:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b446:	f7fd fb9f 	bl	8008b88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800b44a:	4622      	mov	r2, r4
 800b44c:	210f      	movs	r1, #15
 800b44e:	2006      	movs	r0, #6
 800b450:	f7fd fb44 	bl	8008adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800b454:	2006      	movs	r0, #6
 800b456:	f7fd fb75 	bl	8008b44 <HAL_NVIC_EnableIRQ>
}
 800b45a:	e7e5      	b.n	800b428 <BSP_PB_Init+0x34>
 800b45c:	40021000 	.word	0x40021000
 800b460:	20000a3c 	.word	0x20000a3c
 800b464:	10110000 	.word	0x10110000

0800b468 <BSP_PB_GetState>:
{
 800b468:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800b46a:	4b03      	ldr	r3, [pc, #12]	; (800b478 <BSP_PB_GetState+0x10>)
 800b46c:	2101      	movs	r1, #1
 800b46e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b472:	f7fd fc57 	bl	8008d24 <HAL_GPIO_ReadPin>
}
 800b476:	bd08      	pop	{r3, pc}
 800b478:	20000a3c 	.word	0x20000a3c

0800b47c <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800b47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800b480:	4c16      	ldr	r4, [pc, #88]	; (800b4dc <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800b482:	4d17      	ldr	r5, [pc, #92]	; (800b4e0 <GYRO_IO_Init+0x64>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800b484:	6963      	ldr	r3, [r4, #20]
{
 800b486:	b087      	sub	sp, #28
  GYRO_CS_GPIO_CLK_ENABLE();  
 800b488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b48c:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b48e:	2600      	movs	r6, #0
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800b490:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800b494:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b498:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800b49a:	a901      	add	r1, sp, #4
 800b49c:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800b49e:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800b4a2:	f8cd 9008 	str.w	r9, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b4a6:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b4a8:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800b4aa:	f7fd fb6d 	bl	8008b88 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800b4ae:	464a      	mov	r2, r9
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f7fd fc3c 	bl	8008d30 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800b4b8:	6963      	ldr	r3, [r4, #20]
 800b4ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4be:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b4c0:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800b4c2:	2306      	movs	r3, #6
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b4c4:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800b4c6:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800b4c8:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b4ca:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800b4cc:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b4ce:	f7fd fb5b 	bl	8008b88 <HAL_GPIO_Init>
  
  SPIx_Init();
 800b4d2:	f7ff fe9b 	bl	800b20c <SPIx_Init>
}
 800b4d6:	b007      	add	sp, #28
 800b4d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4dc:	40021000 	.word	0x40021000
 800b4e0:	48001000 	.word	0x48001000

0800b4e4 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800b4e4:	2a01      	cmp	r2, #1
{
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	4606      	mov	r6, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800b4ec:	bf88      	it	hi
 800b4ee:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800b4f2:	480c      	ldr	r0, [pc, #48]	; (800b524 <GYRO_IO_Write+0x40>)
{
 800b4f4:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800b4f6:	2108      	movs	r1, #8
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f7fd fc19 	bl	8008d30 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800b4fe:	4628      	mov	r0, r5
 800b500:	f7ff fec4 	bl	800b28c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800b504:	b934      	cbnz	r4, 800b514 <GYRO_IO_Write+0x30>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800b506:	2201      	movs	r2, #1
 800b508:	2108      	movs	r1, #8
 800b50a:	4806      	ldr	r0, [pc, #24]	; (800b524 <GYRO_IO_Write+0x40>)
}
 800b50c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800b510:	f7fd bc0e 	b.w	8008d30 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800b514:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 800b518:	3c01      	subs	r4, #1
    SPIx_WriteRead(*pBuffer);
 800b51a:	f7ff feb7 	bl	800b28c <SPIx_WriteRead>
    NumByteToWrite--;
 800b51e:	b2a4      	uxth	r4, r4
 800b520:	e7f0      	b.n	800b504 <GYRO_IO_Write+0x20>
 800b522:	bf00      	nop
 800b524:	48001000 	.word	0x48001000

0800b528 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800b528:	2a01      	cmp	r2, #1
{  
 800b52a:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800b52c:	bf8c      	ite	hi
 800b52e:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800b532:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
{  
 800b536:	4606      	mov	r6, r0
 800b538:	4614      	mov	r4, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800b53a:	480c      	ldr	r0, [pc, #48]	; (800b56c <GYRO_IO_Read+0x44>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	2108      	movs	r1, #8
 800b540:	f7fd fbf6 	bl	8008d30 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800b544:	4628      	mov	r0, r5
 800b546:	f7ff fea1 	bl	800b28c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800b54a:	b934      	cbnz	r4, 800b55a <GYRO_IO_Read+0x32>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800b54c:	2201      	movs	r2, #1
 800b54e:	2108      	movs	r1, #8
 800b550:	4806      	ldr	r0, [pc, #24]	; (800b56c <GYRO_IO_Read+0x44>)
}  
 800b552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800b556:	f7fd bbeb 	b.w	8008d30 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800b55a:	2000      	movs	r0, #0
 800b55c:	f7ff fe96 	bl	800b28c <SPIx_WriteRead>
    NumByteToRead--;
 800b560:	3c01      	subs	r4, #1
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800b562:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 800b566:	b2a4      	uxth	r4, r4
 800b568:	e7ef      	b.n	800b54a <GYRO_IO_Read+0x22>
 800b56a:	bf00      	nop
 800b56c:	48001000 	.word	0x48001000

0800b570 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800b570:	4b16      	ldr	r3, [pc, #88]	; (800b5cc <COMPASSACCELERO_IO_Init+0x5c>)
 800b572:	695a      	ldr	r2, [r3, #20]
{
 800b574:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800b576:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800b57a:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800b57c:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800b57e:	4d14      	ldr	r5, [pc, #80]	; (800b5d0 <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800b580:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800b584:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800b586:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800b588:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800b58a:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800b58c:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b590:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800b592:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800b594:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800b596:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b598:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b59a:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800b59c:	f7fd faf4 	bl	8008b88 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	2008      	movs	r0, #8
 800b5a6:	f7fd fa99 	bl	8008adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800b5aa:	2008      	movs	r0, #8
 800b5ac:	f7fd faca 	bl	8008b44 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800b5b0:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b5b2:	a901      	add	r1, sp, #4
 800b5b4:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800b5b6:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800b5b8:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b5ba:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b5bc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b5be:	f7fd fae3 	bl	8008b88 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800b5c2:	f7ff fe83 	bl	800b2cc <I2Cx_Init>
}
 800b5c6:	b006      	add	sp, #24
 800b5c8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ca:	bf00      	nop
 800b5cc:	40021000 	.word	0x40021000
 800b5d0:	48001000 	.word	0x48001000

0800b5d4 <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800b5d4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800b5d6:	4a0e      	ldr	r2, [pc, #56]	; (800b610 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b5d8:	480e      	ldr	r0, [pc, #56]	; (800b614 <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800b5da:	6953      	ldr	r3, [r2, #20]
{
 800b5dc:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800b5de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5e2:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800b5e4:	2330      	movs	r3, #48	; 0x30
 800b5e6:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800b5e8:	4b0b      	ldr	r3, [pc, #44]	; (800b618 <COMPASSACCELERO_IO_ITConfig+0x44>)
 800b5ea:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b5ec:	2400      	movs	r4, #0
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b5ee:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b5f0:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800b5f2:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b5f4:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800b5f6:	f7fd fac7 	bl	8008b88 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	200a      	movs	r0, #10
 800b600:	f7fd fa6c 	bl	8008adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800b604:	200a      	movs	r0, #10
 800b606:	f7fd fa9d 	bl	8008b44 <HAL_NVIC_EnableIRQ>
  
}
 800b60a:	b006      	add	sp, #24
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	40021000 	.word	0x40021000
 800b614:	48001000 	.word	0x48001000
 800b618:	10110000 	.word	0x10110000

0800b61c <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800b61c:	b510      	push	{r4, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800b622:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <COMPASSACCELERO_IO_Write+0x30>)
 800b624:	f804 2d01 	strb.w	r2, [r4, #-1]!
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	9302      	str	r3, [sp, #8]
 800b62c:	2301      	movs	r3, #1
 800b62e:	460a      	mov	r2, r1
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	4601      	mov	r1, r0
 800b634:	9400      	str	r4, [sp, #0]
 800b636:	4806      	ldr	r0, [pc, #24]	; (800b650 <COMPASSACCELERO_IO_Write+0x34>)
 800b638:	f7fe fca3 	bl	8009f82 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800b63c:	b120      	cbz	r0, 800b648 <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800b63e:	4804      	ldr	r0, [pc, #16]	; (800b650 <COMPASSACCELERO_IO_Write+0x34>)
 800b640:	f7fe fc88 	bl	8009f54 <HAL_I2C_DeInit>
  I2Cx_Init();
 800b644:	f7ff fe42 	bl	800b2cc <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800b648:	b006      	add	sp, #24
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	20000a40 	.word	0x20000a40
 800b650:	20000e90 	.word	0x20000e90

0800b654 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800b654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800b656:	aa06      	add	r2, sp, #24
 800b658:	2300      	movs	r3, #0
 800b65a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800b65e:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <COMPASSACCELERO_IO_Read+0x38>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	9302      	str	r3, [sp, #8]
 800b664:	2301      	movs	r3, #1
 800b666:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b66a:	460a      	mov	r2, r1
 800b66c:	4601      	mov	r1, r0
 800b66e:	4808      	ldr	r0, [pc, #32]	; (800b690 <COMPASSACCELERO_IO_Read+0x3c>)
 800b670:	f7fe fd20 	bl	800a0b4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800b674:	b120      	cbz	r0, 800b680 <COMPASSACCELERO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800b676:	4806      	ldr	r0, [pc, #24]	; (800b690 <COMPASSACCELERO_IO_Read+0x3c>)
 800b678:	f7fe fc6c 	bl	8009f54 <HAL_I2C_DeInit>
  I2Cx_Init();
 800b67c:	f7ff fe26 	bl	800b2cc <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800b680:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800b684:	b007      	add	sp, #28
 800b686:	f85d fb04 	ldr.w	pc, [sp], #4
 800b68a:	bf00      	nop
 800b68c:	20000a40 	.word	0x20000a40
 800b690:	20000e90 	.word	0x20000e90

0800b694 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 800b694:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800b696:	4c09      	ldr	r4, [pc, #36]	; (800b6bc <BSP_ACCELERO_Init+0x28>)
 800b698:	6863      	ldr	r3, [r4, #4]
 800b69a:	4798      	blx	r3
 800b69c:	2833      	cmp	r0, #51	; 0x33
 800b69e:	d10b      	bne.n	800b6b8 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 800b6a0:	4d07      	ldr	r5, [pc, #28]	; (800b6c0 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800b6a2:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303dlhcDrv;
 800b6a4:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800b6a6:	f640 0047 	movw	r0, #2119	; 0x847
 800b6aa:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	2090      	movs	r0, #144	; 0x90
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	4798      	blx	r3

    ret = ACCELERO_OK;
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 800b6b8:	2001      	movs	r0, #1
  }

  return ret;
}
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20000a68 	.word	0x20000a68
 800b6c0:	20000f28 	.word	0x20000f28

0800b6c4 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800b6c4:	4b02      	ldr	r3, [pc, #8]	; (800b6d0 <BSP_ACCELERO_GetXYZ+0xc>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ca:	b103      	cbz	r3, 800b6ce <BSP_ACCELERO_GetXYZ+0xa>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800b6cc:	4718      	bx	r3
 800b6ce:	4770      	bx	lr
 800b6d0:	20000f28 	.word	0x20000f28

0800b6d4 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800b6d4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800b6d6:	4c0e      	ldr	r4, [pc, #56]	; (800b710 <BSP_GYRO_Init+0x3c>)
 800b6d8:	6863      	ldr	r3, [r4, #4]
 800b6da:	4798      	blx	r3
 800b6dc:	28d4      	cmp	r0, #212	; 0xd4
 800b6de:	4625      	mov	r5, r4
 800b6e0:	d10f      	bne.n	800b702 <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800b6e2:	4c0c      	ldr	r4, [pc, #48]	; (800b714 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 800b6e4:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &L3gd20Drv;
 800b6e6:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800b6e8:	f241 003f 	movw	r0, #4159	; 0x103f
 800b6ec:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	2010      	movs	r0, #16
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fc:	4798      	blx	r3
	
    ret = GYRO_OK;
 800b6fe:	2000      	movs	r0, #0
 800b700:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800b702:	6863      	ldr	r3, [r4, #4]
 800b704:	4798      	blx	r3
 800b706:	28d5      	cmp	r0, #213	; 0xd5
 800b708:	d0eb      	beq.n	800b6e2 <BSP_GYRO_Init+0xe>
  }
  else
  {
    ret = GYRO_ERROR;
 800b70a:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800b70c:	bd38      	pop	{r3, r4, r5, pc}
 800b70e:	bf00      	nop
 800b710:	20000a94 	.word	0x20000a94
 800b714:	20000f2c 	.word	0x20000f2c

0800b718 <BSP_GYRO_GetXYZ>:
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800b718:	4b02      	ldr	r3, [pc, #8]	; (800b724 <BSP_GYRO_GetXYZ+0xc>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71e:	b103      	cbz	r3, 800b722 <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800b720:	4718      	bx	r3
 800b722:	4770      	bx	lr
 800b724:	20000f2c 	.word	0x20000f2c

0800b728 <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800b728:	b510      	push	{r4, lr}
 800b72a:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800b72c:	f7ff ff20 	bl	800b570 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800b730:	b2e2      	uxtb	r2, r4
 800b732:	2120      	movs	r1, #32
 800b734:	2032      	movs	r0, #50	; 0x32
 800b736:	f7ff ff71 	bl	800b61c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800b73a:	2200      	movs	r2, #0
 800b73c:	2123      	movs	r1, #35	; 0x23
 800b73e:	2032      	movs	r0, #50	; 0x32
}
 800b740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800b744:	f7ff bf6a 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b748 <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800b748:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800b74a:	f7ff ff11 	bl	800b570 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800b74e:	210f      	movs	r1, #15
 800b750:	2032      	movs	r0, #50	; 0x32

  return ctrl;
}
 800b752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800b756:	f7ff bf7d 	b.w	800b654 <COMPASSACCELERO_IO_Read>

0800b75a <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800b75a:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800b75c:	2124      	movs	r1, #36	; 0x24
 800b75e:	2032      	movs	r0, #50	; 0x32
 800b760:	f7ff ff78 	bl	800b654 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800b764:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	2124      	movs	r1, #36	; 0x24
 800b76c:	2032      	movs	r0, #50	; 0x32
}
 800b76e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800b772:	f7ff bf53 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b776 <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800b776:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800b778:	2121      	movs	r1, #33	; 0x21
{
 800b77a:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800b77c:	2032      	movs	r0, #50	; 0x32
 800b77e:	f7ff ff69 	bl	800b654 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800b782:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800b786:	4322      	orrs	r2, r4
 800b788:	2121      	movs	r1, #33	; 0x21
 800b78a:	2032      	movs	r0, #50	; 0x32
}
 800b78c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800b790:	f7ff bf44 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b794 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 800b794:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800b796:	2121      	movs	r1, #33	; 0x21
 {
 800b798:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800b79a:	2032      	movs	r0, #50	; 0x32
 800b79c:	f7ff ff5a 	bl	800b654 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 800b7a0:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800b7a4:	4322      	orrs	r2, r4
 800b7a6:	2121      	movs	r1, #33	; 0x21
 800b7a8:	2032      	movs	r0, #50	; 0x32
}
 800b7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800b7ae:	f7ff bf35 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b7b2 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800b7b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800b7b6:	2123      	movs	r1, #35	; 0x23
{
 800b7b8:	4607      	mov	r7, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800b7ba:	2032      	movs	r0, #50	; 0x32
 800b7bc:	f7ff ff4a 	bl	800b654 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800b7c0:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800b7c2:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800b7c4:	2032      	movs	r0, #50	; 0x32
 800b7c6:	f7ff ff45 	bl	800b654 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800b7ca:	2128      	movs	r1, #40	; 0x28
 800b7cc:	2032      	movs	r0, #50	; 0x32
 800b7ce:	f7ff ff41 	bl	800b654 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800b7d2:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800b7d4:	fa4f fa80 	sxtb.w	sl, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800b7d8:	2032      	movs	r0, #50	; 0x32
 800b7da:	f7ff ff3b 	bl	800b654 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800b7de:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800b7e0:	fa4f f880 	sxtb.w	r8, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800b7e4:	2032      	movs	r0, #50	; 0x32
 800b7e6:	f7ff ff35 	bl	800b654 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800b7ea:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800b7ec:	b246      	sxtb	r6, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800b7ee:	2032      	movs	r0, #50	; 0x32
 800b7f0:	f7ff ff30 	bl	800b654 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800b7f4:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800b7f6:	b245      	sxtb	r5, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800b7f8:	2032      	movs	r0, #50	; 0x32
 800b7fa:	f7ff ff2b 	bl	800b654 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800b7fe:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800b800:	fa4f f980 	sxtb.w	r9, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800b804:	2032      	movs	r0, #50	; 0x32
 800b806:	f7ff ff25 	bl	800b654 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800b80a:	0663      	lsls	r3, r4, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800b80c:	b240      	sxtb	r0, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800b80e:	d428      	bmi.n	800b862 <LSM303DLHC_AccReadXYZ+0xb0>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800b810:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
 800b814:	eb06 2505 	add.w	r5, r6, r5, lsl #8
 800b818:	f8ad 8000 	strh.w	r8, [sp]
 800b81c:	f8ad 5002 	strh.w	r5, [sp, #2]
 800b820:	eb09 2000 	add.w	r0, r9, r0, lsl #8
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800b824:	f004 0430 	and.w	r4, r4, #48	; 0x30
 800b828:	2c20      	cmp	r4, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800b82a:	f8ad 0004 	strh.w	r0, [sp, #4]
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800b82e:	d023      	beq.n	800b878 <LSM303DLHC_AccReadXYZ+0xc6>
 800b830:	2c30      	cmp	r4, #48	; 0x30
 800b832:	d023      	beq.n	800b87c <LSM303DLHC_AccReadXYZ+0xca>
 800b834:	2c10      	cmp	r4, #16
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800b836:	bf0c      	ite	eq
 800b838:	2302      	moveq	r3, #2
 800b83a:	2301      	movne	r3, #1
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800b83c:	f8bd 2000 	ldrh.w	r2, [sp]
 800b840:	b29b      	uxth	r3, r3
 800b842:	fb12 f203 	smulbb	r2, r2, r3
 800b846:	803a      	strh	r2, [r7, #0]
 800b848:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b84c:	fb12 f203 	smulbb	r2, r2, r3
 800b850:	807a      	strh	r2, [r7, #2]
 800b852:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800b856:	fb12 f303 	smulbb	r3, r2, r3
 800b85a:	80bb      	strh	r3, [r7, #4]
  }

}
 800b85c:	b002      	add	sp, #8
 800b85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800b862:	eb08 280a 	add.w	r8, r8, sl, lsl #8
 800b866:	eb05 2506 	add.w	r5, r5, r6, lsl #8
 800b86a:	f8ad 8000 	strh.w	r8, [sp]
 800b86e:	f8ad 5002 	strh.w	r5, [sp, #2]
 800b872:	eb00 2009 	add.w	r0, r0, r9, lsl #8
 800b876:	e7d5      	b.n	800b824 <LSM303DLHC_AccReadXYZ+0x72>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800b878:	2304      	movs	r3, #4
    break;
 800b87a:	e7df      	b.n	800b83c <LSM303DLHC_AccReadXYZ+0x8a>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800b87c:	230c      	movs	r3, #12
    break;
 800b87e:	e7dd      	b.n	800b83c <LSM303DLHC_AccReadXYZ+0x8a>

0800b880 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 800b880:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800b882:	2121      	movs	r1, #33	; 0x21
 {
 800b884:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800b886:	2032      	movs	r0, #50	; 0x32
 800b888:	f7ff fee4 	bl	800b654 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800b88c:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800b890:	4322      	orrs	r2, r4
 800b892:	2121      	movs	r1, #33	; 0x21
 800b894:	2032      	movs	r0, #50	; 0x32
}
 800b896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800b89a:	f7ff bebf 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b89e <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800b89e:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800b8a0:	2122      	movs	r1, #34	; 0x22
{
 800b8a2:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800b8a4:	2032      	movs	r0, #50	; 0x32
 800b8a6:	f7ff fed5 	bl	800b654 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800b8aa:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800b8ae:	b2d2      	uxtb	r2, r2
 800b8b0:	2122      	movs	r1, #34	; 0x22
 800b8b2:	2032      	movs	r0, #50	; 0x32
}
 800b8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800b8b8:	f7ff beb0 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b8bc <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800b8bc:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800b8be:	2138      	movs	r1, #56	; 0x38
{  
 800b8c0:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800b8c2:	2032      	movs	r0, #50	; 0x32
 800b8c4:	f7ff fec6 	bl	800b654 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800b8c8:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800b8cc:	b2d2      	uxtb	r2, r2
 800b8ce:	2138      	movs	r1, #56	; 0x38
 800b8d0:	2032      	movs	r0, #50	; 0x32
 800b8d2:	f7ff fea3 	bl	800b61c <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800b8d6:	220a      	movs	r2, #10
 800b8d8:	213a      	movs	r1, #58	; 0x3a
 800b8da:	2032      	movs	r0, #50	; 0x32
 800b8dc:	f7ff fe9e 	bl	800b61c <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800b8e0:	2205      	movs	r2, #5
 800b8e2:	213b      	movs	r1, #59	; 0x3b
 800b8e4:	2032      	movs	r0, #50	; 0x32
 800b8e6:	f7ff fe99 	bl	800b61c <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800b8ea:	2205      	movs	r2, #5
 800b8ec:	213c      	movs	r1, #60	; 0x3c
 800b8ee:	2032      	movs	r0, #50	; 0x32
 800b8f0:	f7ff fe94 	bl	800b61c <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800b8f4:	2232      	movs	r2, #50	; 0x32
 800b8f6:	213d      	movs	r1, #61	; 0x3d
 800b8f8:	4610      	mov	r0, r2

}
 800b8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800b8fe:	f7ff be8d 	b.w	800b61c <COMPASSACCELERO_IO_Write>

0800b902 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800b902:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800b904:	f7ff fe66 	bl	800b5d4 <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800b908:	2080      	movs	r0, #128	; 0x80
 800b90a:	f7ff ffc8 	bl	800b89e <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800b90e:	2004      	movs	r0, #4
 800b910:	f7ff ffb6 	bl	800b880 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800b914:	2010      	movs	r0, #16
  
}
 800b916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800b91a:	f7ff bfcf 	b.w	800b8bc <LSM303DLHC_AccClickITEnable>

0800b91e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800b91e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 800b920:	ac02      	add	r4, sp, #8
  uint8_t ctrl = 0x00;
 800b922:	2300      	movs	r3, #0
{  
 800b924:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 800b926:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800b92a:	f7ff fda7 	bl	800b47c <GYRO_IO_Init>
  ctrl = (uint8_t) InitStruct;
 800b92e:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800b932:	2201      	movs	r2, #1
 800b934:	4620      	mov	r0, r4
 800b936:	2120      	movs	r1, #32
 800b938:	f7ff fdd4 	bl	800b4e4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800b93c:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800b93e:	2201      	movs	r2, #1
 800b940:	2123      	movs	r1, #35	; 0x23
 800b942:	4620      	mov	r0, r4
  ctrl = (uint8_t) (InitStruct >> 8);
 800b944:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800b948:	f7ff fdcc 	bl	800b4e4 <GYRO_IO_Write>
}
 800b94c:	b003      	add	sp, #12
 800b94e:	bd30      	pop	{r4, r5, pc}

0800b950 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800b950:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 800b952:	f7ff fd93 	bl	800b47c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800b956:	f10d 0007 	add.w	r0, sp, #7
 800b95a:	2201      	movs	r2, #1
 800b95c:	210f      	movs	r1, #15
 800b95e:	f7ff fde3 	bl	800b528 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 800b962:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b966:	b003      	add	sp, #12
 800b968:	f85d fb04 	ldr.w	pc, [sp], #4

0800b96c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800b96c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800b96e:	2201      	movs	r2, #1
 800b970:	f10d 0007 	add.w	r0, sp, #7
 800b974:	2124      	movs	r1, #36	; 0x24
 800b976:	f7ff fdd7 	bl	800b528 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800b97a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800b97e:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800b980:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800b984:	2124      	movs	r1, #36	; 0x24
 800b986:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800b98a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800b98e:	f7ff fda9 	bl	800b4e4 <GYRO_IO_Write>
}
 800b992:	b003      	add	sp, #12
 800b994:	f85d fb04 	ldr.w	pc, [sp], #4

0800b998 <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800b998:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800b99a:	2300      	movs	r3, #0
{
 800b99c:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f10d 0006 	add.w	r0, sp, #6
 800b9a4:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800b9a6:	f88d 3006 	strb.w	r3, [sp, #6]
 800b9aa:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800b9ae:	f7ff fdbb 	bl	800b528 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800b9b2:	f10d 0007 	add.w	r0, sp, #7
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	2122      	movs	r1, #34	; 0x22
 800b9ba:	f7ff fdb5 	bl	800b528 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800b9be:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ctrl_cfr &= 0x80;
 800b9c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
  ctrl3 &= 0xDF;
 800b9c6:	f020 0020 	bic.w	r0, r0, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800b9ca:	4320      	orrs	r0, r4
  ctrl_cfr &= 0x80;
 800b9cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl3 |= ((uint8_t) Int1Config);
 800b9d0:	f88d 0007 	strb.w	r0, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f10d 0006 	add.w	r0, sp, #6
 800b9da:	2130      	movs	r1, #48	; 0x30
  ctrl_cfr &= 0x80;
 800b9dc:	f88d 3006 	strb.w	r3, [sp, #6]
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800b9e0:	f7ff fd80 	bl	800b4e4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	2122      	movs	r1, #34	; 0x22
 800b9e8:	f10d 0007 	add.w	r0, sp, #7
 800b9ec:	f7ff fd7a 	bl	800b4e4 <GYRO_IO_Write>
}
 800b9f0:	b002      	add	sp, #8
 800b9f2:	bd10      	pop	{r4, pc}

0800b9f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800b9f4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800b9f6:	2201      	movs	r2, #1
{  
 800b9f8:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800b9fa:	2122      	movs	r1, #34	; 0x22
 800b9fc:	f10d 0007 	add.w	r0, sp, #7
 800ba00:	f7ff fd92 	bl	800b528 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800ba04:	b96c      	cbnz	r4, 800ba22 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800ba06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800ba0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800ba0e:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ba12:	2201      	movs	r2, #1
 800ba14:	2122      	movs	r1, #34	; 0x22
 800ba16:	f10d 0007 	add.w	r0, sp, #7
 800ba1a:	f7ff fd63 	bl	800b4e4 <GYRO_IO_Write>
}
 800ba1e:	b002      	add	sp, #8
 800ba20:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800ba22:	2c01      	cmp	r4, #1
 800ba24:	d1f5      	bne.n	800ba12 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800ba26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba2a:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800ba2e:	f043 0308 	orr.w	r3, r3, #8
 800ba32:	e7ec      	b.n	800ba0e <L3GD20_EnableIT+0x1a>

0800ba34 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800ba34:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ba36:	2201      	movs	r2, #1
{  
 800ba38:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ba3a:	2122      	movs	r1, #34	; 0x22
 800ba3c:	f10d 0007 	add.w	r0, sp, #7
 800ba40:	f7ff fd72 	bl	800b528 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800ba44:	b96c      	cbnz	r4, 800ba62 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800ba46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800ba4e:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800ba52:	2201      	movs	r2, #1
 800ba54:	2122      	movs	r1, #34	; 0x22
 800ba56:	f10d 0007 	add.w	r0, sp, #7
 800ba5a:	f7ff fd43 	bl	800b4e4 <GYRO_IO_Write>
}
 800ba5e:	b002      	add	sp, #8
 800ba60:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800ba62:	2c01      	cmp	r4, #1
 800ba64:	d1f5      	bne.n	800ba52 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800ba66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba6a:	f023 0308 	bic.w	r3, r3, #8
 800ba6e:	e7ee      	b.n	800ba4e <L3GD20_DisableIT+0x1a>

0800ba70 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800ba70:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800ba72:	2201      	movs	r2, #1
{
 800ba74:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800ba76:	2121      	movs	r1, #33	; 0x21
 800ba78:	f10d 0007 	add.w	r0, sp, #7
 800ba7c:	f7ff fd54 	bl	800b528 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800ba80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 800ba88:	431c      	orrs	r4, r3

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	2121      	movs	r1, #33	; 0x21
 800ba8e:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800ba92:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800ba96:	f7ff fd25 	bl	800b4e4 <GYRO_IO_Write>
}
 800ba9a:	b002      	add	sp, #8
 800ba9c:	bd10      	pop	{r4, pc}

0800ba9e <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800ba9e:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800baa0:	2201      	movs	r2, #1
{
 800baa2:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800baa4:	2124      	movs	r1, #36	; 0x24
 800baa6:	f10d 0007 	add.w	r0, sp, #7
 800baaa:	f7ff fd3d 	bl	800b528 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800baae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bab2:	f023 0310 	bic.w	r3, r3, #16
  
  tmpreg |= HighPassFilterState;
 800bab6:	431c      	orrs	r4, r3
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bab8:	2201      	movs	r2, #1
 800baba:	2124      	movs	r1, #36	; 0x24
 800babc:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800bac0:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800bac4:	f7ff fd0e 	bl	800b4e4 <GYRO_IO_Write>
}
 800bac8:	b002      	add	sp, #8
 800baca:	bd10      	pop	{r4, pc}

0800bacc <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 800bacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bace:	b087      	sub	sp, #28
 800bad0:	4604      	mov	r4, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 800bad2:	a806      	add	r0, sp, #24
  uint8_t tmpbuffer[6] ={0};
 800bad4:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
 800bad6:	ad04      	add	r5, sp, #16
  uint8_t tmpreg = 0;
 800bad8:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800badc:	2201      	movs	r2, #1
 800bade:	2123      	movs	r1, #35	; 0x23
  uint8_t tmpbuffer[6] ={0};
 800bae0:	9302      	str	r3, [sp, #8]
 800bae2:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	80ab      	strh	r3, [r5, #4]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800baea:	f7ff fd1d 	bl	800b528 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800baee:	2206      	movs	r2, #6
 800baf0:	2128      	movs	r1, #40	; 0x28
 800baf2:	a802      	add	r0, sp, #8
 800baf4:	f7ff fd18 	bl	800b528 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800baf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bafc:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800bb00:	f89d e008 	ldrb.w	lr, [sp, #8]
 800bb04:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800bb08:	f89d 600a 	ldrb.w	r6, [sp, #10]
 800bb0c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800bb10:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800bb14:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bb18:	d12a      	bne.n	800bb70 <L3GD20_ReadXYZAngRate+0xa4>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800bb1a:	eb0e 2707 	add.w	r7, lr, r7, lsl #8
 800bb1e:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 800bb22:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bb26:	f8ad 0012 	strh.w	r0, [sp, #18]
 800bb2a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800bb2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb32:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800bb34:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800bb38:	d025      	beq.n	800bb86 <L3GD20_ReadXYZAngRate+0xba>
 800bb3a:	2b20      	cmp	r3, #32
 800bb3c:	d026      	beq.n	800bb8c <L3GD20_ReadXYZAngRate+0xc0>
  float sensitivity = 0;
 800bb3e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bb94 <L3GD20_ReadXYZAngRate+0xc8>
 800bb42:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800bb98 <L3GD20_ReadXYZAngRate+0xcc>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bf18      	it	ne
 800bb4a:	eeb0 7a67 	vmovne.f32	s14, s15
 800bb4e:	4620      	mov	r0, r4
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 800bb50:	2300      	movs	r3, #0
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800bb52:	f935 2013 	ldrsh.w	r2, [r5, r3, lsl #1]
 800bb56:	ee07 2a90 	vmov	s15, r2
 800bb5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for(i=0; i<3; i++)
 800bb5e:	3301      	adds	r3, #1
    pfData[i]=(float)(RawData[i] * sensitivity);
 800bb60:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 800bb64:	2b03      	cmp	r3, #3
    pfData[i]=(float)(RawData[i] * sensitivity);
 800bb66:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 800bb6a:	d1f2      	bne.n	800bb52 <L3GD20_ReadXYZAngRate+0x86>
  }
}
 800bb6c:	b007      	add	sp, #28
 800bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800bb70:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800bb74:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800bb78:	f8ad 7010 	strh.w	r7, [sp, #16]
 800bb7c:	f8ad 0012 	strh.w	r0, [sp, #18]
 800bb80:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800bb84:	e7d3      	b.n	800bb2e <L3GD20_ReadXYZAngRate+0x62>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800bb86:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800bb9c <L3GD20_ReadXYZAngRate+0xd0>
    break;
 800bb8a:	e7e0      	b.n	800bb4e <L3GD20_ReadXYZAngRate+0x82>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800bb8c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800bba0 <L3GD20_ReadXYZAngRate+0xd4>
    break;
 800bb90:	e7dd      	b.n	800bb4e <L3GD20_ReadXYZAngRate+0x82>
 800bb92:	bf00      	nop
 800bb94:	00000000 	.word	0x00000000
 800bb98:	410c0000 	.word	0x410c0000
 800bb9c:	418c0000 	.word	0x418c0000
 800bba0:	428c0000 	.word	0x428c0000

0800bba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800bba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bbdc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800bba8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800bbaa:	e003      	b.n	800bbb4 <LoopCopyDataInit>

0800bbac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800bbac:	4b0c      	ldr	r3, [pc, #48]	; (800bbe0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800bbae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800bbb0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800bbb2:	3104      	adds	r1, #4

0800bbb4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800bbb4:	480b      	ldr	r0, [pc, #44]	; (800bbe4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800bbb6:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800bbb8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800bbba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800bbbc:	d3f6      	bcc.n	800bbac <CopyDataInit>
	ldr	r2, =_sbss
 800bbbe:	4a0b      	ldr	r2, [pc, #44]	; (800bbec <LoopForever+0x12>)
	b	LoopFillZerobss
 800bbc0:	e002      	b.n	800bbc8 <LoopFillZerobss>

0800bbc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800bbc2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800bbc4:	f842 3b04 	str.w	r3, [r2], #4

0800bbc8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800bbc8:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <LoopForever+0x16>)
	cmp	r2, r3
 800bbca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800bbcc:	d3f9      	bcc.n	800bbc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800bbce:	f7fc fa53 	bl	8008078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bbd2:	f7f4 fc15 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bbd6:	f7fb fb61 	bl	800729c <main>

0800bbda <LoopForever>:

LoopForever:
    b LoopForever
 800bbda:	e7fe      	b.n	800bbda <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800bbdc:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800bbe0:	0801b598 	.word	0x0801b598
	ldr	r0, =_sdata
 800bbe4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800bbe8:	20000ac0 	.word	0x20000ac0
	ldr	r2, =_sbss
 800bbec:	20000ac0 	.word	0x20000ac0
	ldr	r3, = _ebss
 800bbf0:	20001d1c 	.word	0x20001d1c

0800bbf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bbf4:	e7fe      	b.n	800bbf4 <ADC1_2_IRQHandler>
	...

0800bbf8 <register_fini>:
 800bbf8:	4b02      	ldr	r3, [pc, #8]	; (800bc04 <register_fini+0xc>)
 800bbfa:	b113      	cbz	r3, 800bc02 <register_fini+0xa>
 800bbfc:	4802      	ldr	r0, [pc, #8]	; (800bc08 <register_fini+0x10>)
 800bbfe:	f7f4 bbd9 	b.w	80003b4 <atexit>
 800bc02:	4770      	bx	lr
 800bc04:	00000000 	.word	0x00000000
 800bc08:	080003cd 	.word	0x080003cd

0800bc0c <_init>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	bf00      	nop
 800bc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc12:	bc08      	pop	{r3}
 800bc14:	469e      	mov	lr, r3
 800bc16:	4770      	bx	lr

0800bc18 <_fini>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	bf00      	nop
 800bc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1e:	bc08      	pop	{r3}
 800bc20:	469e      	mov	lr, r3
 800bc22:	4770      	bx	lr
